/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={534:(t,e,n)=>{var r=n(865),i=n(128),o=function(t,e){this._pathTemplate="M 50,50 m 0,-{radius} a {radius},{radius} 0 1 1 0,{2radius} a {radius},{radius} 0 1 1 0,-{2radius}",this.containerAspectRatio=1,r.apply(this,arguments)};(o.prototype=new r).constructor=o,o.prototype._pathString=function(t){var e=t.strokeWidth;t.trailWidth&&t.trailWidth>t.strokeWidth&&(e=t.trailWidth);var n=50-e/2;return i.render(this._pathTemplate,{radius:n,"2radius":2*n})},o.prototype._trailString=function(t){return this._pathString(t)},t.exports=o},688:(t,e,n)=>{var r=n(865),i=n(128),o=function(t,e){this._pathTemplate="M 0,{center} L 100,{center}",r.apply(this,arguments)};(o.prototype=new r).constructor=o,o.prototype._initializeSvg=function(t,e){t.setAttribute("viewBox","0 0 100 "+e.strokeWidth),t.setAttribute("preserveAspectRatio","none")},o.prototype._pathString=function(t){return i.render(this._pathTemplate,{center:t.strokeWidth/2})},o.prototype._trailString=function(t){return this._pathString(t)},t.exports=o},86:(t,e,n)=>{t.exports={Line:n(688),Circle:n(534),SemiCircle:n(157),Square:n(681),Path:n(888),Shape:n(865),utils:n(128)}},888:(t,e,n)=>{var r=n(350),i=n(128),o=r.Tweenable,a={easeIn:"easeInCubic",easeOut:"easeOutCubic",easeInOut:"easeInOutCubic"},u=function t(e,n){if(!(this instanceof t))throw new Error("Constructor was called without new keyword");var r;n=i.extend({delay:0,duration:800,easing:"linear",from:{},to:{},step:function(){}},n),r=i.isString(e)?document.querySelector(e):e,this.path=r,this._opts=n,this._tweenable=null;var o=this.path.getTotalLength();this.path.style.strokeDasharray=o+" "+o,this.set(0)};u.prototype.value=function(){var t=this._getComputedDashOffset(),e=this.path.getTotalLength();return parseFloat((1-t/e).toFixed(6),10)},u.prototype.set=function(t){this.stop(),this.path.style.strokeDashoffset=this._progressToOffset(t);var e=this._opts.step;if(i.isFunction(e)){var n=this._easing(this._opts.easing);e(this._calculateTo(t,n),this._opts.shape||this,this._opts.attachment)}},u.prototype.stop=function(){this._stopTween(),this.path.style.strokeDashoffset=this._getComputedDashOffset()},u.prototype.animate=function(t,e,n){e=e||{},i.isFunction(e)&&(n=e,e={});var r=i.extend({},e),a=i.extend({},this._opts);e=i.extend(a,e);var u=this._easing(e.easing),s=this._resolveFromAndTo(t,u,r);this.stop(),this.path.getBoundingClientRect();var c=this._getComputedDashOffset(),l=this._progressToOffset(t),f=this;this._tweenable=new o,this._tweenable.tween({from:i.extend({offset:c},s.from),to:i.extend({offset:l},s.to),duration:e.duration,delay:e.delay,easing:u,step:function(t){f.path.style.strokeDashoffset=t.offset;var n=e.shape||f;e.step(t,n,e.attachment)}}).then((function(t){i.isFunction(n)&&n()}))},u.prototype._getComputedDashOffset=function(){var t=window.getComputedStyle(this.path,null);return parseFloat(t.getPropertyValue("stroke-dashoffset"),10)},u.prototype._progressToOffset=function(t){var e=this.path.getTotalLength();return e-t*e},u.prototype._resolveFromAndTo=function(t,e,n){return n.from&&n.to?{from:n.from,to:n.to}:{from:this._calculateFrom(e),to:this._calculateTo(t,e)}},u.prototype._calculateFrom=function(t){return r.interpolate(this._opts.from,this._opts.to,this.value(),t)},u.prototype._calculateTo=function(t,e){return r.interpolate(this._opts.from,this._opts.to,t,e)},u.prototype._stopTween=function(){null!==this._tweenable&&(this._tweenable.stop(),this._tweenable=null)},u.prototype._easing=function(t){return a.hasOwnProperty(t)?a[t]:t},t.exports=u},157:(t,e,n)=>{var r=n(865),i=n(534),o=n(128),a=function(t,e){this._pathTemplate="M 50,50 m -{radius},0 a {radius},{radius} 0 1 1 {2radius},0",this.containerAspectRatio=2,r.apply(this,arguments)};(a.prototype=new r).constructor=a,a.prototype._initializeSvg=function(t,e){t.setAttribute("viewBox","0 0 100 50")},a.prototype._initializeTextContainer=function(t,e,n){t.text.style&&(n.style.top="auto",n.style.bottom="0",t.text.alignToBottom?o.setStyle(n,"transform","translate(-50%, 0)"):o.setStyle(n,"transform","translate(-50%, 50%)"))},a.prototype._pathString=i.prototype._pathString,a.prototype._trailString=i.prototype._trailString,t.exports=a},865:(t,e,n)=>{var r=n(888),i=n(128),o="Object is destroyed",a=function t(e,n){if(!(this instanceof t))throw new Error("Constructor was called without new keyword");if(0!==arguments.length){this._opts=i.extend({color:"#555",strokeWidth:1,trailColor:null,trailWidth:null,fill:null,text:{style:{color:null,position:"absolute",left:"50%",top:"50%",padding:0,margin:0,transform:{prefix:!0,value:"translate(-50%, -50%)"}},autoStyleContainer:!0,alignToBottom:!0,value:null,className:"progressbar-text"},svgStyle:{display:"block",width:"100%"},warnings:!1},n,!0),i.isObject(n)&&void 0!==n.svgStyle&&(this._opts.svgStyle=n.svgStyle),i.isObject(n)&&i.isObject(n.text)&&void 0!==n.text.style&&(this._opts.text.style=n.text.style);var o,a=this._createSvgView(this._opts);if(!(o=i.isString(e)?document.querySelector(e):e))throw new Error("Container does not exist: "+e);this._container=o,this._container.appendChild(a.svg),this._opts.warnings&&this._warnContainerAspectRatio(this._container),this._opts.svgStyle&&i.setStyles(a.svg,this._opts.svgStyle),this.svg=a.svg,this.path=a.path,this.trail=a.trail,this.text=null;var u=i.extend({attachment:void 0,shape:this},this._opts);this._progressPath=new r(a.path,u),i.isObject(this._opts.text)&&null!==this._opts.text.value&&this.setText(this._opts.text.value)}};a.prototype.animate=function(t,e,n){if(null===this._progressPath)throw new Error(o);this._progressPath.animate(t,e,n)},a.prototype.stop=function(){if(null===this._progressPath)throw new Error(o);void 0!==this._progressPath&&this._progressPath.stop()},a.prototype.pause=function(){if(null===this._progressPath)throw new Error(o);void 0!==this._progressPath&&this._progressPath._tweenable&&this._progressPath._tweenable.pause()},a.prototype.resume=function(){if(null===this._progressPath)throw new Error(o);void 0!==this._progressPath&&this._progressPath._tweenable&&this._progressPath._tweenable.resume()},a.prototype.destroy=function(){if(null===this._progressPath)throw new Error(o);this.stop(),this.svg.parentNode.removeChild(this.svg),this.svg=null,this.path=null,this.trail=null,this._progressPath=null,null!==this.text&&(this.text.parentNode.removeChild(this.text),this.text=null)},a.prototype.set=function(t){if(null===this._progressPath)throw new Error(o);this._progressPath.set(t)},a.prototype.value=function(){if(null===this._progressPath)throw new Error(o);return void 0===this._progressPath?0:this._progressPath.value()},a.prototype.setText=function(t){if(null===this._progressPath)throw new Error(o);null===this.text&&(this.text=this._createTextContainer(this._opts,this._container),this._container.appendChild(this.text)),i.isObject(t)?(i.removeChildren(this.text),this.text.appendChild(t)):this.text.innerHTML=t},a.prototype._createSvgView=function(t){var e=document.createElementNS("http://www.w3.org/2000/svg","svg");this._initializeSvg(e,t);var n=null;(t.trailColor||t.trailWidth)&&(n=this._createTrail(t),e.appendChild(n));var r=this._createPath(t);return e.appendChild(r),{svg:e,path:r,trail:n}},a.prototype._initializeSvg=function(t,e){t.setAttribute("viewBox","0 0 100 100")},a.prototype._createPath=function(t){var e=this._pathString(t);return this._createPathElement(e,t)},a.prototype._createTrail=function(t){var e=this._trailString(t),n=i.extend({},t);return n.trailColor||(n.trailColor="#eee"),n.trailWidth||(n.trailWidth=n.strokeWidth),n.color=n.trailColor,n.strokeWidth=n.trailWidth,n.fill=null,this._createPathElement(e,n)},a.prototype._createPathElement=function(t,e){var n=document.createElementNS("http://www.w3.org/2000/svg","path");return n.setAttribute("d",t),n.setAttribute("stroke",e.color),n.setAttribute("stroke-width",e.strokeWidth),e.fill?n.setAttribute("fill",e.fill):n.setAttribute("fill-opacity","0"),n},a.prototype._createTextContainer=function(t,e){var n=document.createElement("div");n.className=t.text.className;var r=t.text.style;return r&&(t.text.autoStyleContainer&&(e.style.position="relative"),i.setStyles(n,r),r.color||(n.style.color=t.color)),this._initializeTextContainer(t,e,n),n},a.prototype._initializeTextContainer=function(t,e,n){},a.prototype._pathString=function(t){throw new Error("Override this function for each progress bar")},a.prototype._trailString=function(t){throw new Error("Override this function for each progress bar")},a.prototype._warnContainerAspectRatio=function(t){if(this.containerAspectRatio){var e=window.getComputedStyle(t,null),n=parseFloat(e.getPropertyValue("width"),10),r=parseFloat(e.getPropertyValue("height"),10);i.floatEquals(this.containerAspectRatio,n/r)||(console.warn("Incorrect aspect ratio of container","#"+t.id,"detected:",e.getPropertyValue("width")+"(width)","/",e.getPropertyValue("height")+"(height)","=",n/r),console.warn("Aspect ratio of should be",this.containerAspectRatio))}},t.exports=a},681:(t,e,n)=>{var r=n(865),i=n(128),o=function(t,e){this._pathTemplate="M 0,{halfOfStrokeWidth} L {width},{halfOfStrokeWidth} L {width},{width} L {halfOfStrokeWidth},{width} L {halfOfStrokeWidth},{strokeWidth}",this._trailTemplate="M {startMargin},{halfOfStrokeWidth} L {width},{halfOfStrokeWidth} L {width},{width} L {halfOfStrokeWidth},{width} L {halfOfStrokeWidth},{halfOfStrokeWidth}",r.apply(this,arguments)};(o.prototype=new r).constructor=o,o.prototype._pathString=function(t){var e=100-t.strokeWidth/2;return i.render(this._pathTemplate,{width:e,strokeWidth:t.strokeWidth,halfOfStrokeWidth:t.strokeWidth/2})},o.prototype._trailString=function(t){var e=100-t.strokeWidth/2;return i.render(this._trailTemplate,{width:e,strokeWidth:t.strokeWidth,halfOfStrokeWidth:t.strokeWidth/2,startMargin:t.strokeWidth/2-t.trailWidth/2})},t.exports=o},128:t=>{var e="Webkit Moz O ms".split(" ");function n(t,n,i){for(var o=t.style,a=0;a<e.length;++a)o[e[a]+r(n)]=i;o[n]=i}function r(t){return t.charAt(0).toUpperCase()+t.slice(1)}function i(t){return!function(t){return"[object Array]"===Object.prototype.toString.call(t)}(t)&&"object"==typeof t&&!!t}function o(t,e){for(var n in t)t.hasOwnProperty(n)&&e(t[n],n)}t.exports={extend:function t(e,n,r){for(var o in e=e||{},r=r||!1,n=n||{})if(n.hasOwnProperty(o)){var a=e[o],u=n[o];r&&i(a)&&i(u)?e[o]=t(a,u,r):e[o]=u}return e},render:function(t,e){var n=t;for(var r in e)if(e.hasOwnProperty(r)){var i=e[r],o=new RegExp("\\{"+r+"\\}","g");n=n.replace(o,i)}return n},setStyle:n,setStyles:function(t,e){o(e,(function(e,r){null!=e&&(i(e)&&!0===e.prefix?n(t,r,e.value):t.style[r]=e)}))},capitalize:r,isString:function(t){return"string"==typeof t||t instanceof String},isFunction:function(t){return"function"==typeof t},isObject:i,forEachObject:o,floatEquals:function(t,e){return Math.abs(t-e)<.001},removeChildren:function(t){for(;t.firstChild;)t.removeChild(t.firstChild)}}},350:t=>{self,t.exports=function(){"use strict";var t={720:function(t,e,n){n.r(e),n.d(e,{Scene:function(){return $t},Tweenable:function(){return mt},interpolate:function(){return Kt},processTweens:function(){return ct},setBezierFunction:function(){return Jt},shouldScheduleUpdate:function(){return ht},tween:function(){return bt},unsetBezierFunction:function(){return te}});var r={};n.r(r),n.d(r,{bounce:function(){return W},bouncePast:function(){return F},easeFrom:function(){return D},easeFromTo:function(){return N},easeInBack:function(){return j},easeInCirc:function(){return x},easeInCubic:function(){return c},easeInExpo:function(){return w},easeInOutBack:function(){return T},easeInOutCirc:function(){return E},easeInOutCubic:function(){return f},easeInOutExpo:function(){return S},easeInOutQuad:function(){return s},easeInOutQuart:function(){return d},easeInOutQuint:function(){return m},easeInOutSine:function(){return _},easeInQuad:function(){return a},easeInQuart:function(){return h},easeInQuint:function(){return v},easeInSine:function(){return b},easeOutBack:function(){return P},easeOutBounce:function(){return C},easeOutCirc:function(){return O},easeOutCubic:function(){return l},easeOutExpo:function(){return k},easeOutQuad:function(){return u},easeOutQuart:function(){return p},easeOutQuint:function(){return y},easeOutSine:function(){return g},easeTo:function(){return z},elastic:function(){return M},linear:function(){return o},swingFrom:function(){return I},swingFromTo:function(){return A},swingTo:function(){return L}});var i={};n.r(i),n.d(i,{afterTween:function(){return Bt},beforeTween:function(){return Rt},doesApply:function(){return Dt},tweenCreated:function(){return zt}});var o=function(t){return t},a=function(t){return Math.pow(t,2)},u=function(t){return-(Math.pow(t-1,2)-1)},s=function(t){return(t/=.5)<1?.5*Math.pow(t,2):-.5*((t-=2)*t-2)},c=function(t){return Math.pow(t,3)},l=function(t){return Math.pow(t-1,3)+1},f=function(t){return(t/=.5)<1?.5*Math.pow(t,3):.5*(Math.pow(t-2,3)+2)},h=function(t){return Math.pow(t,4)},p=function(t){return-(Math.pow(t-1,4)-1)},d=function(t){return(t/=.5)<1?.5*Math.pow(t,4):-.5*((t-=2)*Math.pow(t,3)-2)},v=function(t){return Math.pow(t,5)},y=function(t){return Math.pow(t-1,5)+1},m=function(t){return(t/=.5)<1?.5*Math.pow(t,5):.5*(Math.pow(t-2,5)+2)},b=function(t){return 1-Math.cos(t*(Math.PI/2))},g=function(t){return Math.sin(t*(Math.PI/2))},_=function(t){return-.5*(Math.cos(Math.PI*t)-1)},w=function(t){return 0===t?0:Math.pow(2,10*(t-1))},k=function(t){return 1===t?1:1-Math.pow(2,-10*t)},S=function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*--t))},x=function(t){return-(Math.sqrt(1-t*t)-1)},O=function(t){return Math.sqrt(1-Math.pow(t-1,2))},E=function(t){return(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},C=function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},j=function(t){var e=1.70158;return t*t*((e+1)*t-e)},P=function(t){var e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},T=function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},M=function(t){return-1*Math.pow(4,-8*t)*Math.sin((6*t-1)*(2*Math.PI)/2)+1},A=function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},I=function(t){var e=1.70158;return t*t*((e+1)*t-e)},L=function(t){var e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},W=function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},F=function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?2-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?2-(7.5625*(t-=2.25/2.75)*t+.9375):2-(7.5625*(t-=2.625/2.75)*t+.984375)},N=function(t){return(t/=.5)<1?.5*Math.pow(t,4):-.5*((t-=2)*Math.pow(t,3)-2)},D=function(t){return Math.pow(t,4)},z=function(t){return Math.pow(t,.25)};function R(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function B(t){return(B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function H(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function q(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?H(Object(n),!0).forEach((function(e){U(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):H(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function U(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Q,V,K,Y="linear",Z="undefined"!=typeof window?window:n.g,G="afterTween",X="afterTweenEnd",$="beforeTween",J="tweenCreated",tt="function",et="string",nt=Z.requestAnimationFrame||Z.webkitRequestAnimationFrame||Z.oRequestAnimationFrame||Z.msRequestAnimationFrame||Z.mozCancelRequestAnimationFrame&&Z.mozRequestAnimationFrame||setTimeout,rt=function(){},it=null,ot=null,at=q({},r),ut=function(t,e,n,r,i,o,a){var u,s,c,l=t<o?0:(t-o)/i,f=!1;for(var h in a&&a.call&&(f=!0,u=a(l)),e)f||(u=((s=a[h]).call?s:at[s])(l)),c=n[h],e[h]=c+(r[h]-c)*u;return e},st=function(t,e){var n=t._timestamp,r=t._currentState,i=t._delay;if(!(e<n+i)){var o=t._duration,a=t._targetState,u=n+i+o,s=e>u?u:e;t._hasEnded=s>=u;var c=o-(u-s),l=t._filters.length>0;if(t._hasEnded)return t._render(a,t._data,c),t.stop(!0);l&&t._applyFilter($),s<n+i?n=o=s=1:n+=i,ut(s,r,t._originalState,a,o,n,t._easing),l&&t._applyFilter(G),t._render(r,t._data,c)}},ct=function(){for(var t,e=mt.now(),n=it;n;)t=n._next,st(n,e),n=t},lt=Date.now||function(){return+new Date},ft=!1,ht=function(t){t&&ft||(ft=t,t&&pt())},pt=function t(){Q=lt(),ft&&nt.call(Z,t,16.666666666666668),ct()},dt=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Y,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=B(e);if(at[e])return at[e];if(r===et||r===tt)for(var i in t)n[i]=e;else for(var o in t)n[o]=e[o]||Y;return n},vt=function(t){t===it?(it=t._next)?it._previous=null:ot=null:t===ot?(ot=t._previous)?ot._next=null:it=null:(V=t._previous,K=t._next,V._next=K,K._previous=V),t._previous=t._next=null},yt="function"==typeof Promise?Promise:null,mt=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;R(this,t),this._config={},this._data={},this._delay=0,this._filters=[],this._next=null,this._previous=null,this._timestamp=null,this._hasEnded=!1,this._resolve=null,this._reject=null,this._currentState=e||{},this._originalState={},this._targetState={},this._start=rt,this._render=rt,this._promiseCtor=yt,n&&this.setConfig(n)}var e;return(e=[{key:"_applyFilter",value:function(t){for(var e=this._filters.length;e>0;e--){var n=this._filters[e-e][t];n&&n(this)}}},{key:"tween",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;return this._isPlaying&&this.stop(),!e&&this._config||this.setConfig(e),this._pausedAtTime=null,this._timestamp=t.now(),this._start(this.get(),this._data),this._delay&&this._render(this._currentState,this._data,0),this._resume(this._timestamp)}},{key:"setConfig",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=this._config;for(var r in e)n[r]=e[r];var i=n.promise,o=void 0===i?this._promiseCtor:i,a=n.start,u=void 0===a?rt:a,s=n.finish,c=n.render,l=void 0===c?this._config.step||rt:c,f=n.step,h=void 0===f?rt:f;this._data=n.data||n.attachment||this._data,this._isPlaying=!1,this._pausedAtTime=null,this._scheduleId=null,this._delay=e.delay||0,this._start=u,this._render=l||h,this._duration=n.duration||500,this._promiseCtor=o,s&&(this._resolve=s);var p=e.from,d=e.to,v=void 0===d?{}:d,y=this._currentState,m=this._originalState,b=this._targetState;for(var g in p)y[g]=p[g];var _=!1;for(var w in y){var k=y[w];_||B(k)!==et||(_=!0),m[w]=k,b[w]=v.hasOwnProperty(w)?v[w]:k}if(this._easing=dt(this._currentState,n.easing,this._easing),this._filters.length=0,_){for(var S in t.filters)t.filters[S].doesApply(this)&&this._filters.push(t.filters[S]);this._applyFilter(J)}return this}},{key:"then",value:function(t,e){var n=this;return this._promise=new this._promiseCtor((function(t,e){n._resolve=t,n._reject=e})),this._promise.then(t,e)}},{key:"catch",value:function(t){return this.then().catch(t)}},{key:"get",value:function(){return q({},this._currentState)}},{key:"set",value:function(t){this._currentState=t}},{key:"pause",value:function(){if(this._isPlaying)return this._pausedAtTime=t.now(),this._isPlaying=!1,vt(this),this}},{key:"resume",value:function(){return this._resume()}},{key:"_resume",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t.now();return null===this._timestamp?this.tween():this._isPlaying?this._promise:(this._pausedAtTime&&(this._timestamp+=e-this._pausedAtTime,this._pausedAtTime=null),this._isPlaying=!0,null===it?(it=this,ot=this):(this._previous=ot,ot._next=this,ot=this),this)}},{key:"seek",value:function(e){e=Math.max(e,0);var n=t.now();return this._timestamp+e===0||(this._timestamp=n-e,st(this,n)),this}},{key:"stop",value:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!this._isPlaying)return this;this._isPlaying=!1,vt(this);var e=this._filters.length>0;return t&&(e&&this._applyFilter($),ut(1,this._currentState,this._originalState,this._targetState,1,0,this._easing),e&&(this._applyFilter(G),this._applyFilter(X))),this._resolve&&this._resolve({data:this._data,state:this._currentState,tweenable:this}),this._resolve=null,this._reject=null,this}},{key:"cancel",value:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=this._currentState,n=this._data;return this._isPlaying?(this._reject&&this._reject({data:n,state:e,tweenable:this}),this._resolve=null,this._reject=null,this.stop(t)):this}},{key:"isPlaying",value:function(){return this._isPlaying}},{key:"hasEnded",value:function(){return this._hasEnded}},{key:"setScheduleFunction",value:function(e){t.setScheduleFunction(e)}},{key:"data",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return t&&(this._data=q({},t)),this._data}},{key:"dispose",value:function(){for(var t in this)delete this[t]}}])&&function(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}(t.prototype,e),t}();function bt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=new mt;return e.tween(t),e.tweenable=e,e}U(mt,"now",(function(){return Q})),U(mt,"setScheduleFunction",(function(t){return nt=t})),U(mt,"filters",{}),U(mt,"formulas",at),ht(!0);var gt,_t,wt=/(\d|-|\.)/,kt=/([^\-0-9.]+)/g,St=/[0-9.-]+/g,xt=(gt=St.source,_t=/,\s*/.source,new RegExp("rgba?\\(".concat(gt).concat(_t).concat(gt).concat(_t).concat(gt,"(").concat(_t).concat(gt,")?\\)"),"g")),Ot=/^.*\(/,Et=/#([0-9]|[a-f]){3,6}/gi,Ct="VAL",jt=function(t,e){return t.map((function(t,n){return"_".concat(e,"_").concat(n)}))};function Pt(t){return parseInt(t,16)}var Tt=function(t){return"rgb(".concat((e=t,3===(e=e.replace(/#/,"")).length&&(e=(e=e.split(""))[0]+e[0]+e[1]+e[1]+e[2]+e[2]),[Pt(e.substr(0,2)),Pt(e.substr(2,2)),Pt(e.substr(4,2))]).join(","),")");var e},Mt=function(t,e,n){var r=e.match(t),i=e.replace(t,Ct);return r&&r.forEach((function(t){return i=i.replace(Ct,n(t))})),i},At=function(t){for(var e in t){var n=t[e];"string"==typeof n&&n.match(Et)&&(t[e]=Mt(Et,n,Tt))}},It=function(t){var e=t.match(St),n=e.slice(0,3).map(Math.floor),r=t.match(Ot)[0];if(3===e.length)return"".concat(r).concat(n.join(","),")");if(4===e.length)return"".concat(r).concat(n.join(","),",").concat(e[3],")");throw new Error("Invalid rgbChunk: ".concat(t))},Lt=function(t){return t.match(St)},Wt=function(t,e){var n={};return e.forEach((function(e){n[e]=t[e],delete t[e]})),n},Ft=function(t,e){return e.map((function(e){return t[e]}))},Nt=function(t,e){return e.forEach((function(e){return t=t.replace(Ct,+e.toFixed(4))})),t},Dt=function(t){for(var e in t._currentState)if("string"==typeof t._currentState[e])return!0;return!1};function zt(t){var e=t._currentState;[e,t._originalState,t._targetState].forEach(At),t._tokenData=function(t){var e,n,r={};for(var i in t){var o=t[i];"string"==typeof o&&(r[i]={formatString:(e=o,n=void 0,n=e.match(kt),n?(1===n.length||e.charAt(0).match(wt))&&n.unshift(""):n=["",""],n.join(Ct)),chunkNames:jt(Lt(o),i)})}return r}(e)}function Rt(t){var e=t._currentState,n=t._originalState,r=t._targetState,i=t._easing,o=t._tokenData;!function(t,e){var n=function(n){var r=e[n].chunkNames,i=t[n];if("string"==typeof i){var o=i.split(" "),a=o[o.length-1];r.forEach((function(e,n){return t[e]=o[n]||a}))}else r.forEach((function(e){return t[e]=i}));delete t[n]};for(var r in e)n(r)}(i,o),[e,n,r].forEach((function(t){return function(t,e){var n=function(n){Lt(t[n]).forEach((function(r,i){return t[e[n].chunkNames[i]]=+r})),delete t[n]};for(var r in e)n(r)}(t,o)}))}function Bt(t){var e=t._currentState,n=t._originalState,r=t._targetState,i=t._easing,o=t._tokenData;[e,n,r].forEach((function(t){return function(t,e){for(var n in e){var r=e[n],i=r.chunkNames,o=r.formatString,a=Nt(o,Ft(Wt(t,i),i));t[n]=Mt(xt,a,It)}}(t,o)})),function(t,e){for(var n in e){var r=e[n].chunkNames,i=t[r[0]];t[n]="string"==typeof i?r.map((function(e){var n=t[e];return delete t[e],n})).join(" "):i}}(i,o)}function Ht(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function qt(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Ht(Object(n),!0).forEach((function(e){Ut(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Ht(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Ut(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Qt=new mt,Vt=mt.filters,Kt=function(t,e,n,r){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,o=qt({},t),a=dt(t,r);for(var u in Qt._filters.length=0,Qt.set({}),Qt._currentState=o,Qt._originalState=t,Qt._targetState=e,Qt._easing=a,Vt)Vt[u].doesApply(Qt)&&Qt._filters.push(Vt[u]);Qt._applyFilter("tweenCreated"),Qt._applyFilter("beforeTween");var s=ut(n,o,t,e,1,i,a);return Qt._applyFilter("afterTween"),s};function Yt(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Zt(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Gt(t,e){var n=e.get(t);if(!n)throw new TypeError("attempted to get private field on non-instance");return n.get?n.get.call(t):n.value}var Xt=new WeakMap,$t=function(){function t(){Zt(this,t),Xt.set(this,{writable:!0,value:[]});for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];n.forEach(this.add.bind(this))}var e;return(e=[{key:"add",value:function(t){return Gt(this,Xt).push(t),t}},{key:"remove",value:function(t){var e=Gt(this,Xt).indexOf(t);return~e&&Gt(this,Xt).splice(e,1),t}},{key:"empty",value:function(){return this.tweenables.map(this.remove.bind(this))}},{key:"isPlaying",value:function(){return Gt(this,Xt).some((function(t){return t.isPlaying()}))}},{key:"play",value:function(){return Gt(this,Xt).forEach((function(t){return t.tween()})),this}},{key:"pause",value:function(){return Gt(this,Xt).forEach((function(t){return t.pause()})),this}},{key:"resume",value:function(){return Gt(this,Xt).forEach((function(t){return t.resume()})),this}},{key:"stop",value:function(t){return Gt(this,Xt).forEach((function(e){return e.stop(t)})),this}},{key:"tweenables",get:function(){return function(t){if(Array.isArray(t))return Yt(t)}(t=Gt(this,Xt))||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return Yt(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Yt(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();var t}},{key:"promises",get:function(){return Gt(this,Xt).map((function(t){return t.then()}))}}])&&function(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}(t.prototype,e),t}(),Jt=function(t,e,n,r,i){var o=function(t,e,n,r){return function(i){return l=0,f=0,h=0,p=function(t){return((l*t+f)*t+h)*t},d=function(t){return(3*l*t+2*f)*t+h},v=function(t){return t>=0?t:0-t},l=1-(h=3*(o=t))-(f=3*(n-o)-h),u=1-(c=3*(a=e))-(s=3*(r-a)-c),function(t){return((u*t+s)*t+c)*t}(function(t,e){var n,r,i,o,a,u;for(i=t,u=0;u<8;u++){if(o=p(i)-t,v(o)<.005)return i;if(a=d(i),v(a)<1e-6)break;i-=o/a}if((i=t)<(n=0))return n;if(i>(r=1))return r;for(;n<r;){if(o=p(i),v(o-t)<.005)return i;t>o?n=i:r=i,i=.5*(r-n)+n}return i}(i));var o,a,u,s,c,l,f,h,p,d,v}}(e,n,r,i);return o.displayName=t,o.x1=e,o.y1=n,o.x2=r,o.y2=i,mt.formulas[t]=o},te=function(t){return delete mt.formulas[t]};mt.filters.token=i}},e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}return n.d=function(t,e){for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(720)}()}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}(()=>{"use strict";var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};function e(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function r(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}}function i(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function a(t,e,n){if(n||2===arguments.length)for(var r,i=0,o=e.length;i<o;i++)!r&&i in e||(r||(r=Array.prototype.slice.call(e,0,i)),r[i]=e[i]);return t.concat(r||Array.prototype.slice.call(e))}function u(t){return this instanceof u?(this.v=t,this):new u(t)}function s(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(t){i[t]&&(r[t]=function(e){return new Promise((function(n,r){o.push([t,e,n,r])>1||s(t,e)}))})}function s(t,e){try{(n=i[t](e)).value instanceof u?Promise.resolve(n.value.v).then(c,l):f(o[0][2],n)}catch(t){f(o[0][3],t)}var n}function c(t){s("next",t)}function l(t){s("throw",t)}function f(t,e){t(e),o.shift(),o.length&&s(o[0][0],o[0][1])}}Object.create,Object.create;var c=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function l(t){return"function"==typeof t}function f(t){return l(null==t?void 0:t.then)}var h,p=((h=function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}((function(t){Error.call(t),t.stack=(new Error).stack}))).prototype=Object.create(Error.prototype),h.prototype.constructor=h,h);function d(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var v=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}return t.prototype.unsubscribe=function(){var t,e,n,r,u;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var c=i(s),f=c.next();!f.done;f=c.next())f.value.remove(this)}catch(e){t={error:e}}finally{try{f&&!f.done&&(e=c.return)&&e.call(c)}finally{if(t)throw t.error}}else s.remove(this);var h=this.initialTeardown;if(l(h))try{h()}catch(t){u=t instanceof p?t.errors:[t]}var d=this._finalizers;if(d){this._finalizers=null;try{for(var v=i(d),y=v.next();!y.done;y=v.next()){var b=y.value;try{m(b)}catch(t){u=null!=u?u:[],t instanceof p?u=a(a([],o(u)),o(t.errors)):u.push(t)}}}catch(t){n={error:t}}finally{try{y&&!y.done&&(r=v.return)&&r.call(v)}finally{if(n)throw n.error}}}if(u)throw new p(u)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)m(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&d(e,t)},t.prototype.remove=function(e){var n=this._finalizers;n&&d(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t;var e}();function y(t){return t instanceof v||t&&"closed"in t&&l(t.remove)&&l(t.add)&&l(t.unsubscribe)}function m(t){l(t)?t():t.unsubscribe()}v.EMPTY;var b=null,g=null,_=void 0,w=!1,k=!1,S={setTimeout:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=S.delegate;return(null==i?void 0:i.setTimeout)?i.setTimeout.apply(i,a([t,e],o(n))):setTimeout.apply(void 0,a([t,e],o(n)))},clearTimeout:function(t){var e=S.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function x(t){S.setTimeout((function(){if(!b)throw t;b(t)}))}function O(){}var E=C("C",void 0,void 0);function C(t,e,n){return{kind:t,value:e,error:n}}var j=null,P=function(t){function n(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,y(e)&&e.add(n)):n.destination=F,n}return e(n,t),n.create=function(t,e,n){return new I(t,e,n)},n.prototype.next=function(t){this.isStopped?W(function(t){return C("N",t,void 0)}(t),this):this._next(t)},n.prototype.error=function(t){this.isStopped?W(C("E",void 0,t),this):(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped?W(E,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(v),T=Function.prototype.bind;function M(t,e){return T.call(t,e)}var A=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){L(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){L(t)}else L(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){L(t)}},t}(),I=function(t){function n(e,n,r){var i,o,a=t.call(this)||this;return l(e)||!e?i={next:null!=e?e:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:a&&k?((o=Object.create(e)).unsubscribe=function(){return a.unsubscribe()},i={next:e.next&&M(e.next,o),error:e.error&&M(e.error,o),complete:e.complete&&M(e.complete,o)}):i=e,a.destination=new A(i),a}return e(n,t),n}(P);function L(t){var e;w?(e=t,w&&j&&(j.errorThrown=!0,j.error=e)):x(t)}function W(t,e){var n=g;n&&S.setTimeout((function(){return n(t,e)}))}var F={closed:!0,next:O,error:function(t){throw t},complete:O},N="function"==typeof Symbol&&Symbol.observable||"@@observable";function D(t){return t}function z(t){return 0===t.length?D:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var R=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,i=this,o=(r=t)&&r instanceof P||function(t){return t&&l(t.next)&&l(t.error)&&l(t.complete)}(r)&&y(r)?t:new I(t,e,n);return function(t){if(w){var e=!j;if(e&&(j={errorThrown:!1,error:null}),t(),e){var n=j,r=n.errorThrown,i=n.error;if(j=null,r)throw i}}else t()}((function(){var t=i,e=t.operator,n=t.source;o.add(e?e.call(o,n):n?i._subscribe(o):i._trySubscribe(o))})),o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=B(e))((function(e,r){var i=new I({next:function(e){try{t(e)}catch(t){r(t),i.unsubscribe()}},error:r,complete:e});n.subscribe(i)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[N]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return z(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=B(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function B(t){var e;return null!==(e=null!=t?t:_)&&void 0!==e?e:Promise}function H(t){return l(t[N])}function q(t){return Symbol.asyncIterator&&l(null==t?void 0:t[Symbol.asyncIterator])}function U(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var Q="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function V(t){return l(null==t?void 0:t[Q])}function K(t){return s(this,arguments,(function(){var e,n,i;return r(this,(function(r){switch(r.label){case 0:e=t.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,u(e.read())];case 3:return n=r.sent(),i=n.value,n.done?[4,u(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,u(i)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function Y(t){return l(null==t?void 0:t.getReader)}function Z(t){if(t instanceof R)return t;if(null!=t){if(H(t))return o=t,new R((function(t){var e=o[N]();if(l(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(c(t))return r=t,new R((function(t){for(var e=0;e<r.length&&!t.closed;e++)t.next(r[e]);t.complete()}));if(f(t))return n=t,new R((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,x)}));if(q(t))return G(t);if(V(t))return e=t,new R((function(t){var n,r;try{for(var o=i(e),a=o.next();!a.done;a=o.next()){var u=a.value;if(t.next(u),t.closed)return}}catch(t){n={error:t}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}t.complete()}));if(Y(t))return G(K(t))}var e,n,r,o;throw U(t)}function G(t){return new R((function(e){(function(t,e){var n,o,a,u,s,c,l,f;return s=this,c=void 0,f=function(){var s,c;return r(this,(function(r){switch(r.label){case 0:r.trys.push([0,5,6,11]),n=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=i(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,i,(e=t[n](e)).done,e.value)}))}}}(t),r.label=1;case 1:return[4,n.next()];case 2:if((o=r.sent()).done)return[3,4];if(s=o.value,e.next(s),e.closed)return[2];r.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return c=r.sent(),a={error:c},[3,11];case 6:return r.trys.push([6,,9,10]),o&&!o.done&&(u=n.return)?[4,u.call(n)]:[3,8];case 7:r.sent(),r.label=8;case 8:return[3,10];case 9:if(a)throw a.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,e){function n(t){try{i(f.next(t))}catch(t){e(t)}}function r(t){try{i(f.throw(t))}catch(t){e(t)}}function i(e){var i;e.done?t(e.value):(i=e.value,i instanceof l?i:new l((function(t){t(i)}))).then(n,r)}i((f=f.apply(s,c||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function X(t){return function(e){if(function(t){return l(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function $(t,e,n,r,i){return new J(t,e,n,r,i)}var J=function(t){function n(e,n,r,i,o,a){var u=t.call(this,e)||this;return u.onFinalize=o,u.shouldUnsubscribe=a,u._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,u._error=i?function(t){try{i(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return e(n,t),n.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},n}(P);function tt(t,e){return X((function(n,r){var i=0;n.subscribe($(r,(function(n){r.next(t.call(e,n,i++))})))}))}function et(t,e,n,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=e.schedule((function(){n(),i?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(o),!i)return o}function nt(t,e,n){return void 0===n&&(n=1/0),l(e)?nt((function(n,r){return tt((function(t,i){return e(n,t,r,i)}))(Z(t(n,r)))}),n):("number"==typeof e&&(n=e),X((function(e,r){return function(t,e,n,r,i,o,a,u){var s=[],c=0,l=0,f=!1,h=function(){!f||s.length||c||e.complete()},p=function(t){return c<r?d(t):s.push(t)},d=function(t){c++;var i=!1;Z(n(t,l++)).subscribe($(e,(function(t){e.next(t)}),(function(){i=!0}),void 0,(function(){if(i)try{c--;for(;s.length&&c<r;)t=void 0,t=s.shift(),d(t);h()}catch(t){e.error(t)}var t})))};return t.subscribe($(e,p,(function(){f=!0,h()}))),function(){}}(e,r,t,n)})))}var rt=Array.isArray;function it(t){return tt((function(e){return function(t,e){return rt(e)?t.apply(void 0,a([],o(e))):t(e)}(t,e)}))}var ot=["addListener","removeListener"],at=["addEventListener","removeEventListener"],ut=["on","off"];function st(t,e,n,r){if(l(n)&&(r=n,n=void 0),r)return st(t,e,n).pipe(it(r));var i=o(function(t){return l(t.addEventListener)&&l(t.removeEventListener)}(t)?at.map((function(r){return function(i){return t[r](e,i,n)}})):function(t){return l(t.addListener)&&l(t.removeListener)}(t)?ot.map(ct(t,e)):function(t){return l(t.on)&&l(t.off)}(t)?ut.map(ct(t,e)):[],2),a=i[0],u=i[1];if(!a&&c(t))return nt((function(t){return st(t,e,n)}))(Z(t));if(!a)throw new TypeError("Invalid event target");return new R((function(t){var e=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.next(1<e.length?e:e[0])};return a(e),function(){return u(e)}}))}function ct(t,e){return function(n){return function(r){return t[n](e,r)}}}var lt=Array.isArray;function ft(t){return 1===t.length&&lt(t[0])?t[0]:t}var ht=new R((function(t){return t.complete()}));function pt(t){return t&&l(t.schedule)}function dt(t){return t[t.length-1]}function vt(t){return l(dt(t))?t.pop():void 0}function yt(t){return pt(dt(t))?t.pop():void 0}var mt=function(t){function n(e,n){return t.call(this)||this}return e(n,t),n.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},n}(v),bt={setInterval:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=bt.delegate;return(null==i?void 0:i.setInterval)?i.setInterval.apply(i,a([t,e],o(n))):setInterval.apply(void 0,a([t,e],o(n)))},clearInterval:function(t){var e=bt.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},gt=function(t){function n(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return e(n,t),n.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},n.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),bt.setInterval(t.flush.bind(t,this),n)},n.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return e;bt.clearInterval(e)},n.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,e){var n,r=!1;try{this.work(t)}catch(t){r=!0,n=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},n.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,d(r,this),null!=e&&(this.id=this.recycleAsyncId(n,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},n}(mt),_t={now:function(){return(_t.delegate||Date).now()},delegate:void 0},wt=function(){function t(e,n){void 0===n&&(n=t.now),this.schedulerActionCtor=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(n,e)},t.now=_t.now,t}(),kt=new(function(t){function n(e,n){void 0===n&&(n=wt.now);var r=t.call(this,e,n)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return e(n,t),n.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var n;this._active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},n}(wt))(gt),St=kt;function xt(t,e,n){void 0===t&&(t=0),void 0===n&&(n=St);var r=-1;return null!=e&&(pt(e)?n=e:r=e),new R((function(e){var i,o=(i=t)instanceof Date&&!isNaN(i)?+t-n.now():t;o<0&&(o=0);var a=0;return n.schedule((function(){e.closed||(e.next(a++),0<=r?this.schedule(void 0,r):e.complete())}),o)}))}function Ot(t,e){return void 0===e&&(e=0),X((function(n,r){n.subscribe($(r,(function(n){return et(r,t,(function(){return r.next(n)}),e)}),(function(){return et(r,t,(function(){return r.complete()}),e)}),(function(n){return et(r,t,(function(){return r.error(n)}),e)})))}))}function Et(t,e){return void 0===e&&(e=0),X((function(n,r){r.add(t.schedule((function(){return n.subscribe(r)}),e))}))}function Ct(t,e){if(!t)throw new Error("Iterable cannot be null");return new R((function(n){et(n,e,(function(){var r=t[Symbol.asyncIterator]();et(n,e,(function(){r.next().then((function(t){t.done?n.complete():n.next(t.value)}))}),0,!0)}))}))}function jt(t,e){return e?function(t,e){if(null!=t){if(H(t))return function(t,e){return Z(t).pipe(Et(e),Ot(e))}(t,e);if(c(t))return function(t,e){return new R((function(n){var r=0;return e.schedule((function(){r===t.length?n.complete():(n.next(t[r++]),n.closed||this.schedule())}))}))}(t,e);if(f(t))return function(t,e){return Z(t).pipe(Et(e),Ot(e))}(t,e);if(q(t))return Ct(t,e);if(V(t))return function(t,e){return new R((function(n){var r;return et(n,e,(function(){r=t[Q](),et(n,e,(function(){var t,e,i;try{e=(t=r.next()).value,i=t.done}catch(t){return void n.error(t)}i?n.complete():n.next(e)}),0,!0)})),function(){return l(null==r?void 0:r.return)&&r.return()}}))}(t,e);if(Y(t))return function(t,e){return Ct(K(t),e)}(t,e)}throw U(t)}(t,e):Z(t)}function Pt(){return void 0===(t=1)&&(t=1/0),nt(D,t);var t}function Tt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return Pt()(jt(t,yt(t)))}function Mt(t){return t<=0?function(){return ht}:X((function(e,n){var r=0;e.subscribe($(n,(function(e){++r<=t&&(n.next(e),t<=r&&n.complete())})))}))}function At(t){return tt((function(){return t}))}function It(t,e){return e?function(n){return Tt(e.pipe(Mt(1),X((function(t,e){t.subscribe($(e,O))}))),n.pipe(It(t)))}:nt((function(e,n){return t(e,n).pipe(Mt(1),At(e))}))}function Lt(t,e,n,r,i){return function(o,a){var u=n,s=e,c=0;o.subscribe($(a,(function(e){var n=c++;s=u?t(s,e,n):(u=!0,e),r&&a.next(s)}),i&&function(){u&&a.next(s),a.complete()}))}}var Wt=Array.isArray,Ft=Object.getPrototypeOf,Nt=Object.prototype,Dt=Object.keys;function zt(t){if(1===t.length){var e=t[0];if(Wt(e))return{args:e,keys:null};if((r=e)&&"object"==typeof r&&Ft(r)===Nt){var n=Dt(e);return{args:n.map((function(t){return e[t]})),keys:n}}}var r;return{args:t,keys:null}}function Rt(t,e){return t.reduce((function(t,n,r){return t[n]=e[r],t}),{})}function Bt(t,e,n){return void 0===n&&(n=D),function(r){Ht(e,(function(){for(var i=t.length,o=new Array(i),a=i,u=i,s=function(i){Ht(e,(function(){var s=jt(t[i],e),c=!1;s.subscribe($(r,(function(t){o[i]=t,c||(c=!0,u--),u||r.next(n(o.slice()))}),(function(){--a||r.complete()})))}),r)},c=0;c<i;c++)s(c)}),r)}}function Ht(t,e,n){t?et(n,t,e):e()}var qt=function(t,e){this.id=t,this.rec=e},Ut=[];function Qt(t,e,r,i){var o=document.createElement("label");o.id="labelaZaReci",o.innerHTML="Druga igra pocinje ubrzo",e.appendChild(o);var a=document.createElement("div");a.style.display="none",a.id="progressBarDiv",e.appendChild(a);var u=document.createElement("div");u.style.display="none",e.appendChild(u);var s=document.createElement("button");s.innerHTML="Vidjena",s.className="dugmeZaRec",s.id="vidjena",s.disabled=!0,u.appendChild(s);var c=document.createElement("button");c.innerHTML="Nova",c.className="dugmeZaRec",c.id="nova",c.disabled=!0,u.appendChild(c);var f=document.createElement("div");t.appendChild(f);var h=document.createElement("label");h.className="divLeveStraneIgraca",h.id="skorDrugeIgre",h.innerHTML="Broj pogodaka";var p=document.createElement("label");p.className="divLeveStraneIgraca",p.id="vidjene",p.innerHTML="Broj pogodaka",f.appendChild(p);var d=document.createElement("label");d.className="divLeveStraneIgraca",d.id="nove",d.innerHTML="Broj pogodaka",f.appendChild(d);for(var v,y,m,b,g=0,_=[],w=[],k=0;k<12;)_[k]=Ut[20*Math.random()|0],k++;for(k=0;k<3;)_[12*Math.random()|0]=_[12*Math.random()|0],k++;console.log(_),jt(_).pipe((m=function(t){return function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=yt(t);return jt(t,n)}(t).pipe(function(t,e){void 0===e&&(e=kt);var n=xt(500,e);return It((function(){return n}))}())},l(b)?nt(m,b,1):nt(m,1)),(y=function(){a.style.display="none",u.style.display="none",o.innerHTML="",function(t,e,n,r,i){var o=document.createElement("div");o.className="divLeveStraneIgraca",t.appendChild(o);var a=document.createElement("input");e.appendChild(a);var u=document.createElement("img");u.src="../src/assets/heart.png",u.width=40,u.style.paddingBottom="10px",o.appendChild(u);var s=document.createElement("img");s.src="../src/assets/heart.png",s.width=40,s.style.paddingBottom="10px",o.appendChild(s);var c,l,f=document.createElement("img");f.src="../src/assets/heart.png",f.width=40,f.style.paddingBottom="10px",o.appendChild(f),(c=1500,void 0===c&&(c=0),void 0===l&&(l=kt),c<0&&(c=0),xt(c,c,l)).pipe()}(t,e)},X((function(t,e){try{t.subscribe(e)}finally{e.add(y)}})))).subscribe((function(t){a.style.display="inline",u.style.display="inline",O.set(0),o.innerHTML=t.rec,w[g]=t,g++,v=!1;for(var e=0;e<w.length-1;e++)w[e]==t&&(v=!0);s.disabled=!1,c.disabled=!1,O.animate(1)})),c.addEventListener("click",(function(){v||0,s.disabled=!0,c.disabled=!0})),s.addEventListener("click",(function(){v&&0,s.disabled=!0,c.disabled=!0}));var S=function(t){return st(document.getElementById(t),"click").pipe(At(1),function(t,e){return X(Lt(t,e,arguments.length>=2,!0))}((function(t,e){return t+e}),0),function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=yt(t);return X((function(e,r){(n?Tt(t,e,n):Tt(t,e)).subscribe(r)}))}(0))};(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=yt(t),r=vt(t),i=zt(t),o=i.args,a=i.keys;if(0===o.length)return jt([],n);var u=new R(Bt(o,n,a?function(t){return Rt(a,t)}:D));return r?u.pipe(it(r)):u})(S("nova"),S("vidjena")).subscribe((function(t){var e=t[0],n=t[1];p.innerHTML=e,d.innerHTML=n,h.innerHTML=n+e}));var x=n(86),O=(new x.Line("#progressBarDiv"),new x.Line(a,{strokeWidth:4,easing:"easeInOut",duration:2500,color:"#7adbfa",trailColor:"#eee",trailWidth:1,svgStyle:{width:"100%",height:"100%"},from:{color:"#6de6e6"},to:{color:"#209696"},step:function(t,e){e.path.setAttribute("stroke",t.color)}}))}fetch("http://localhost:3000/reci").then((function(t){return t.json()})).then((function(t){return t.forEach((function(t){Ut.push(new qt(t.id,t.rec))}))}));var Vt=document.body;Vt.style.height="98vh",Vt.id="celaStrana";var Kt=document.createElement("div");Kt.id="leviDeoStrane",Kt.style.display="none",Vt.appendChild(Kt);var Yt,Zt=document.createElement("div");Zt.id="desniDeoStrane",Zt.style.display="none",Vt.appendChild(Zt),function(){var t=document.createElement("div");t.id="pocetniPrikaz",Vt.appendChild(t);var e=document.createElement("div");t.appendChild(e);var n=document.createElement("label");n.className="labeleNaPocetku",n.innerHTML="Unesite vaš nick name",e.appendChild(n);var r=document.createElement("input");e.appendChild(r);var i=document.createElement("label");i.innerHTML="1. Prilikom startovanja prve igre timer odmah počinje da odbrojava, tako da budite spremni. Potrebno je pronaći ključ na ekranu. Da biste to uspeli potrebno je koristiti krugove sa leve strane koji pomeranjem miša pokazuju vašu udaljenost od ključa. Kada mu se dovoljno približite ključ će postati vidljiv, a potom je potrebno kliknuti na njega, čime će se timer pauzirati i pokrenuti druga igra.",i.className="labeleNaPocetku",t.appendChild(i);var u=document.createElement("label");u.className="labeleNaPocetku",u.innerHTML="2. U drugoj igri je potrebno pamtiti reči koje se prikazuju na ekranu, za svaku reč imate 2.5 sekundi da odgovorite da li je ona već viđena ili nova. Kada utvrdite potrebno je kliknuti na dugme i time će se rezultat za tu igru povećati ili ostati nepromenjen ukoliko ste pogrešili.",t.appendChild(u);var s=document.createElement("label");s.className="labeleNaPocetku",s.innerHTML="3. U trecoj igri je potrebno pamtiti reči koje inje da odbrojava, tako da budite spremni. Potrebno je pronaći ključ na ekranu. Da biste to uspeli potre ona već viđena ili nova. Kada utvrdite potrebno je kliknuti na dugme i time će se rezultat za tu igru povećati ili ostati isti ukoliko ste pogrešili.",t.appendChild(s);var c=document.createElement("label");c.innerHTML='Klikom na dugme "pokreni igru" počeće prva igra, tako da budite spremni!',c.className="labeleNaPocetku",t.appendChild(c);var l=document.createElement("button");l.className="dugmeZaRec",l.innerHTML="Pokreni!",t.appendChild(l),l.onclick=function(e){""!=r.value?(Kt.style.display="flex",Zt.style.display="flex",t.style.display="none",Yt=r.value.toString(),function(t,e,n){var r=[Math.random()*e.offsetWidth|0,Math.random()*e.offsetHeight|0];r[0]<e.offsetWidth/100*40&&(r[0]=e.offsetWidth/100*40+r[0]|0),console.log(r);var i=document.createElement("label");i.innerHTML="Dobro došli "+n,t.appendChild(i);var u=document.createElement("input");u.type="image",u.id="dugmeKljuc",u.src="../src/assets/key.png",u.style.position="absolute",u.style.left=r[0].toString()+"px",u.style.top=r[1].toString()+"px",u.style.display="none",e.appendChild(u);var s=document.createElement("img");s.src="../src/assets/padlock.png",s.width=40,s.style.paddingBottom="10px";var c=document.createElement("div");c.className="krugovi",t.appendChild(c);var l=document.createElement("div");l.className="krug",l.style.backgroundColor="white",c.appendChild(l);var f=document.createElement("div");f.className="krug",f.style.backgroundColor="white",c.appendChild(f);var h=document.createElement("div");h.className="krug",h.style.backgroundColor="white",c.appendChild(h);var p=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=vt(t),r=ft(t);return r.length?new R((function(t){var e=r.map((function(){return[]})),i=r.map((function(){return!1}));t.add((function(){e=i=null}));for(var u=function(u){Z(r[u]).subscribe($(t,(function(r){if(e[u].push(r),e.every((function(t){return t.length}))){var s=e.map((function(t){return t.shift()}));t.next(n?n.apply(void 0,a([],o(s))):s),e.some((function(t,e){return!t.length&&i[e]}))&&t.complete()}}),(function(){i[u]=!0,!e[u].length&&t.complete()})))},s=0;!t.closed&&s<r.length;s++)u(s);return function(){e=i=null}})):ht}(st(document,"mousemove").pipe(tt((function(t){return{x:t.clientX,y:t.clientY}})))).subscribe((function(t){var e=t;e[0].x>r[0]-50&&e[0].x<r[0]+50&&e[0].y>r[1]-50&&e[0].y<r[1]+50?(u.style.display="inline",l.style.backgroundColor="#2dd424",f.style.backgroundColor="#2dd424",h.style.backgroundColor="#2dd424"):e[0].x>r[0]-150&&e[0].x<r[0]+150&&e[0].y>r[1]-150&&e[0].y<r[1]+150?(h.style.backgroundColor="#1861b5",f.style.backgroundColor="#f7e436",l.style.backgroundColor="#db2e3c",u.style.display="none"):e[0].x>r[0]-350&&e[0].x<r[0]+350&&e[0].y>r[1]-350&&e[0].y<r[1]+350?(f.style.backgroundColor="#f7e436",h.style.backgroundColor="white",l.style.backgroundColor="#db2e3c",u.style.display="none"):(l.style.backgroundColor="#db2e3c",f.style.backgroundColor="white",h.style.backgroundColor="white",u.style.display="none")})),d=xt(0,10).subscribe((function(t){var e,n,r,i;y.innerHTML=(i=(e=t)-6e3*(n=Math.floor(e/6e3))-100*(r=Math.floor((e-6e3*n)/100)),n<10&&(n="0"+n),r<10&&(r="0"+r),i<10&&(i="0"+i),n+":"+r+"."+i)})),v=document.createElement("div");t.appendChild(v);var y=document.createElement("label");y.id="timer",v.appendChild(s),v.appendChild(y),v.className="divLeveStraneIgraca",u.addEventListener("click",(function(){p.unsubscribe(),c.style.display="none",u.style.display="none",s.src="../src/assets/padlockOpen.png",d.unsubscribe(),Qt(t,e)}))}(Kt,Zt,Yt)):alert("Morate uneti nick name kako biste pokrenuli igre")}}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,