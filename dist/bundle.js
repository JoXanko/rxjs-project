(()=>{"use strict";var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},e(t,r)};function t(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}function r(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function n(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a}function i(e,t,r){if(r||2===arguments.length)for(var n,i=0,o=t.length;i<o;i++)!n&&i in t||(n||(n=Array.prototype.slice.call(t,0,i)),n[i]=t[i]);return e.concat(n||Array.prototype.slice.call(t))}function o(e){return"function"==typeof e}Object.create,Object.create;var a,s=((a=function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}((function(e){Error.call(e),e.stack=(new Error).stack}))).prototype=Object.create(Error.prototype),a.prototype.constructor=a,a);function u(e,t){if(e){var r=e.indexOf(t);0<=r&&e.splice(r,1)}}var l=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var t;return e.prototype.unsubscribe=function(){var e,t,a,u,l;if(!this.closed){this.closed=!0;var c=this._parentage;if(c)if(this._parentage=null,Array.isArray(c))try{for(var d=r(c),h=d.next();!h.done;h=d.next())h.value.remove(this)}catch(t){e={error:t}}finally{try{h&&!h.done&&(t=d.return)&&t.call(d)}finally{if(e)throw e.error}}else c.remove(this);var f=this.initialTeardown;if(o(f))try{f()}catch(e){l=e instanceof s?e.errors:[e]}var v=this._finalizers;if(v){this._finalizers=null;try{for(var y=r(v),m=y.next();!m.done;m=y.next()){var b=m.value;try{p(b)}catch(e){l=null!=l?l:[],e instanceof s?l=i(i([],n(l)),n(e.errors)):l.push(e)}}}catch(e){a={error:e}}finally{try{m&&!m.done&&(u=y.return)&&u.call(y)}finally{if(a)throw a.error}}}if(l)throw new s(l)}},e.prototype.add=function(t){var r;if(t&&t!==this)if(this.closed)p(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(r=this._finalizers)&&void 0!==r?r:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&u(t,e)},e.prototype.remove=function(t){var r=this._finalizers;r&&u(r,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}();function c(e){return e instanceof l||e&&"closed"in e&&o(e.remove)&&o(e.add)&&o(e.unsubscribe)}function p(e){o(e)?e():e.unsubscribe()}l.EMPTY;var d=function(e){function r(t,r){return e.call(this)||this}return t(r,e),r.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},r}(l),h={setInterval:function(e,t){for(var r=[],o=2;o<arguments.length;o++)r[o-2]=arguments[o];var a=h.delegate;return(null==a?void 0:a.setInterval)?a.setInterval.apply(a,i([e,t],n(r))):setInterval.apply(void 0,i([e,t],n(r)))},clearInterval:function(e){var t=h.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(e)},delegate:void 0},f=function(e){function r(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n.pending=!1,n}return t(r,e),r.prototype.schedule=function(e,t){if(void 0===t&&(t=0),this.closed)return this;this.state=e;var r=this.id,n=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(n,r,t)),this.pending=!0,this.delay=t,this.id=this.id||this.requestAsyncId(n,this.id,t),this},r.prototype.requestAsyncId=function(e,t,r){return void 0===r&&(r=0),h.setInterval(e.flush.bind(e,this),r)},r.prototype.recycleAsyncId=function(e,t,r){if(void 0===r&&(r=0),null!=r&&this.delay===r&&!1===this.pending)return t;h.clearInterval(t)},r.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var r=this._execute(e,t);if(r)return r;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},r.prototype._execute=function(e,t){var r,n=!1;try{this.work(e)}catch(e){n=!0,r=e||new Error("Scheduled action threw falsy error")}if(n)return this.unsubscribe(),r},r.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,r=this.scheduler,n=r.actions;this.work=this.state=this.scheduler=null,this.pending=!1,u(n,this),null!=t&&(this.id=this.recycleAsyncId(r,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},r}(d),v={now:function(){return(v.delegate||Date).now()},delegate:void 0},y=function(){function e(t,r){void 0===r&&(r=e.now),this.schedulerActionCtor=t,this.now=r}return e.prototype.schedule=function(e,t,r){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(r,t)},e.now=v.now,e}(),m=new(function(e){function r(t,r){void 0===r&&(r=y.now);var n=e.call(this,t,r)||this;return n.actions=[],n._active=!1,n._scheduled=void 0,n}return t(r,e),r.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var r;this._active=!0;do{if(r=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,r){for(;e=t.shift();)e.unsubscribe();throw r}}},r}(y))(f),b=m,g=null,k=null,w=void 0,_=!1,j=!1,x={setTimeout:function(e,t){for(var r=[],o=2;o<arguments.length;o++)r[o-2]=arguments[o];var a=x.delegate;return(null==a?void 0:a.setTimeout)?a.setTimeout.apply(a,i([e,t],n(r))):setTimeout.apply(void 0,i([e,t],n(r)))},clearTimeout:function(e){var t=x.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function E(){}var T=P("C",void 0,void 0);function P(e,t,r){return{kind:e,value:t,error:r}}var S=null,C=function(e){function r(t){var r=e.call(this)||this;return r.isStopped=!1,t?(r.destination=t,c(t)&&t.add(r)):r.destination=M,r}return t(r,e),r.create=function(e,t,r){return new z(e,t,r)},r.prototype.next=function(e){this.isStopped?L(function(e){return P("N",e,void 0)}(e),this):this._next(e)},r.prototype.error=function(e){this.isStopped?L(P("E",void 0,e),this):(this.isStopped=!0,this._error(e))},r.prototype.complete=function(){this.isStopped?L(T,this):(this.isStopped=!0,this._complete())},r.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},r.prototype._next=function(e){this.destination.next(e)},r.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},r.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},r}(l),N=Function.prototype.bind;function A(e,t){return N.call(e,t)}var I=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){O(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){O(e)}else O(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){O(e)}},e}(),z=function(e){function r(t,r,n){var i,a,s=e.call(this)||this;return o(t)||!t?i={next:null!=t?t:void 0,error:null!=r?r:void 0,complete:null!=n?n:void 0}:s&&j?((a=Object.create(t)).unsubscribe=function(){return s.unsubscribe()},i={next:t.next&&A(t.next,a),error:t.error&&A(t.error,a),complete:t.complete&&A(t.complete,a)}):i=t,s.destination=new I(i),s}return t(r,e),r}(C);function O(e){var t;_?(t=e,_&&S&&(S.errorThrown=!0,S.error=t)):function(e){x.setTimeout((function(){if(!g)throw e;g(e)}))}(e)}function L(e,t){var r=k;r&&x.setTimeout((function(){return r(e,t)}))}var M={closed:!0,next:E,error:function(e){throw e},complete:E},H="function"==typeof Symbol&&Symbol.observable||"@@observable";function D(e){return e}function K(e){return 0===e.length?D:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}var U=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var r=new e;return r.source=this,r.operator=t,r},e.prototype.subscribe=function(e,t,r){var n,i=this,a=(n=e)&&n instanceof C||function(e){return e&&o(e.next)&&o(e.error)&&o(e.complete)}(n)&&c(n)?e:new z(e,t,r);return function(e){if(_){var t=!S;if(t&&(S={errorThrown:!1,error:null}),e(),t){var r=S,n=r.errorThrown,i=r.error;if(S=null,n)throw i}}else e()}((function(){var e=i,t=e.operator,r=e.source;a.add(t?t.call(a,r):r?i._subscribe(a):i._trySubscribe(a))})),a},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var r=this;return new(t=q(t))((function(t,n){var i=new z({next:function(t){try{e(t)}catch(e){n(e),i.unsubscribe()}},error:n,complete:t});r.subscribe(i)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[H]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return K(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=q(e))((function(e,r){var n;t.subscribe((function(e){return n=e}),(function(e){return r(e)}),(function(){return e(n)}))}))},e.create=function(t){return new e(t)},e}();function q(e){var t;return null!==(t=null!=e?e:w)&&void 0!==t?t:Promise}function R(e,t,r,n,i){var a=document.createElement("div");a.className="divLeveStraneIgraca",e.appendChild(a);var s=document.createElement("input");s.type="number",s.className="nickInput",t.appendChild(s);var u=document.createElement("label");u.innerHTML="Preostalo zivota ",u.className="skorDrugeIgre",a.appendChild(u);var l=document.createElement("img");l.src="../src/assets/heart.png",l.width=40,a.appendChild(l);var c=document.createElement("img");c.src="../src/assets/heart.png",c.width=40,a.appendChild(c);var p,d,h=document.createElement("img");h.src="../src/assets/heart.png",h.width=40,a.appendChild(h),(p=1500,void 0===p&&(p=0),void 0===d&&(d=m),p<0&&(p=0),function(e,t,r){void 0===e&&(e=0),void 0===r&&(r=b);var n,i=-1;return null!=t&&((n=t)&&o(n.schedule)?r=t:i=t),new U((function(t){var n=function(e){return e instanceof Date&&!isNaN(e)}(e)?+e-r.now():e;n<0&&(n=0);var o=0;return r.schedule((function(){t.closed||(t.next(o++),0<=i?this.schedule(void 0,i):t.complete())}),n)}))}(p,p,d)).pipe()}var Y=document.body;Y.style.height="98vh",Y.id="celaStrana";var F=document.createElement("div");F.id="leviDeoStrane",F.style.display="none",Y.appendChild(F);var Z=document.createElement("div");Z.id="desniDeoStrane",Z.style.display="none",Y.appendChild(Z),function(){var e=document.createElement("div");e.id="pocetniPrikaz",Y.appendChild(e);var t=document.createElement("div");e.appendChild(t);var r=document.createElement("div");r.style.display="none",e.appendChild(r);var n=document.createElement("label");n.innerHTML="Prikaži uputstva za igre",n.className="labeleNaPocetku",n.onclick=function(t){n.style.display="none",r.style.display="block",e.style.width="50%"},e.appendChild(n);var i=document.createElement("label");i.className="labeleNaPocetku",i.innerHTML="Nick name: ",i.style.marginRight="15px",t.appendChild(i);var o=document.createElement("input");o.placeholder="unesite nick",o.className="nickInput",t.appendChild(o);var a=document.createElement("label");a.innerHTML="1. Prilikom startovanja prve igre timer odmah počinje da odbrojava, tako da budite spremni. Potrebno je pronaći ključ na ekranu. Da biste to uspeli potrebno je koristiti krugove sa leve strane koji pomeranjem miša pokazuju vašu udaljenost od ključa. Kada mu se dovoljno približite ključ će postati vidljiv, a potom je potrebno kliknuti na njega, čime će se timer pauzirati i pokrenuti druga igra.",a.className="labeleNaPocetku",r.appendChild(a);var s=document.createElement("label");s.className="labeleNaPocetku",s.innerHTML="2. U drugoj igri je potrebno pamtiti reči koje se prikazuju na ekranu, za svaku reč imate 2.5 sekundi da odgovorite da li je ona već viđena ili nova. Kada utvrdite potrebno je kliknuti na dugme i time će se rezultat za tu igru povećati ili ostati nepromenjen ukoliko ste pogrešili.",r.appendChild(s);var u=document.createElement("label");u.className="labeleNaPocetku",u.innerHTML="3. U trecoj igri je potrebno pamtiti reči koje inje da odbrojava, tako da budite spremni. Potrebno je pronaći ključ na ekranu. Da biste to uspeli potre ona već viđena ili nova. Kada utvrdite potrebno je kliknuti na dugme i time će se rezultat za tu igru povećati ili ostati isti ukoliko ste pogrešili.",r.appendChild(u);var l=document.createElement("label");l.innerHTML='Klikom na dugme "pokreni igru" počeće prva igra, tako da budite spremni!',l.className="labeleNaPocetku",r.appendChild(l);var c=document.createElement("button");c.className="dugmeZaRec",c.innerHTML="Pokreni!",e.appendChild(c),c.onclick=function(t){""!=o.value?(F.style.display="flex",Z.style.display="flex",e.style.display="none",o.value.toString(),R(F,Z)):o.classList.toggle("shakeAnimacija")}}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,