/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={534:(t,e,n)=>{var r=n(865),i=n(128),o=function(t,e){this._pathTemplate="M 50,50 m 0,-{radius} a {radius},{radius} 0 1 1 0,{2radius} a {radius},{radius} 0 1 1 0,-{2radius}",this.containerAspectRatio=1,r.apply(this,arguments)};(o.prototype=new r).constructor=o,o.prototype._pathString=function(t){var e=t.strokeWidth;t.trailWidth&&t.trailWidth>t.strokeWidth&&(e=t.trailWidth);var n=50-e/2;return i.render(this._pathTemplate,{radius:n,"2radius":2*n})},o.prototype._trailString=function(t){return this._pathString(t)},t.exports=o},688:(t,e,n)=>{var r=n(865),i=n(128),o=function(t,e){this._pathTemplate="M 0,{center} L 100,{center}",r.apply(this,arguments)};(o.prototype=new r).constructor=o,o.prototype._initializeSvg=function(t,e){t.setAttribute("viewBox","0 0 100 "+e.strokeWidth),t.setAttribute("preserveAspectRatio","none")},o.prototype._pathString=function(t){return i.render(this._pathTemplate,{center:t.strokeWidth/2})},o.prototype._trailString=function(t){return this._pathString(t)},t.exports=o},86:(t,e,n)=>{t.exports={Line:n(688),Circle:n(534),SemiCircle:n(157),Square:n(681),Path:n(888),Shape:n(865),utils:n(128)}},888:(t,e,n)=>{var r=n(350),i=n(128),o=r.Tweenable,a={easeIn:"easeInCubic",easeOut:"easeOutCubic",easeInOut:"easeInOutCubic"},u=function t(e,n){if(!(this instanceof t))throw new Error("Constructor was called without new keyword");var r;n=i.extend({delay:0,duration:800,easing:"linear",from:{},to:{},step:function(){}},n),r=i.isString(e)?document.querySelector(e):e,this.path=r,this._opts=n,this._tweenable=null;var o=this.path.getTotalLength();this.path.style.strokeDasharray=o+" "+o,this.set(0)};u.prototype.value=function(){var t=this._getComputedDashOffset(),e=this.path.getTotalLength();return parseFloat((1-t/e).toFixed(6),10)},u.prototype.set=function(t){this.stop(),this.path.style.strokeDashoffset=this._progressToOffset(t);var e=this._opts.step;if(i.isFunction(e)){var n=this._easing(this._opts.easing);e(this._calculateTo(t,n),this._opts.shape||this,this._opts.attachment)}},u.prototype.stop=function(){this._stopTween(),this.path.style.strokeDashoffset=this._getComputedDashOffset()},u.prototype.animate=function(t,e,n){e=e||{},i.isFunction(e)&&(n=e,e={});var r=i.extend({},e),a=i.extend({},this._opts);e=i.extend(a,e);var u=this._easing(e.easing),s=this._resolveFromAndTo(t,u,r);this.stop(),this.path.getBoundingClientRect();var c=this._getComputedDashOffset(),l=this._progressToOffset(t),f=this;this._tweenable=new o,this._tweenable.tween({from:i.extend({offset:c},s.from),to:i.extend({offset:l},s.to),duration:e.duration,delay:e.delay,easing:u,step:function(t){f.path.style.strokeDashoffset=t.offset;var n=e.shape||f;e.step(t,n,e.attachment)}}).then((function(t){i.isFunction(n)&&n()}))},u.prototype._getComputedDashOffset=function(){var t=window.getComputedStyle(this.path,null);return parseFloat(t.getPropertyValue("stroke-dashoffset"),10)},u.prototype._progressToOffset=function(t){var e=this.path.getTotalLength();return e-t*e},u.prototype._resolveFromAndTo=function(t,e,n){return n.from&&n.to?{from:n.from,to:n.to}:{from:this._calculateFrom(e),to:this._calculateTo(t,e)}},u.prototype._calculateFrom=function(t){return r.interpolate(this._opts.from,this._opts.to,this.value(),t)},u.prototype._calculateTo=function(t,e){return r.interpolate(this._opts.from,this._opts.to,t,e)},u.prototype._stopTween=function(){null!==this._tweenable&&(this._tweenable.stop(),this._tweenable=null)},u.prototype._easing=function(t){return a.hasOwnProperty(t)?a[t]:t},t.exports=u},157:(t,e,n)=>{var r=n(865),i=n(534),o=n(128),a=function(t,e){this._pathTemplate="M 50,50 m -{radius},0 a {radius},{radius} 0 1 1 {2radius},0",this.containerAspectRatio=2,r.apply(this,arguments)};(a.prototype=new r).constructor=a,a.prototype._initializeSvg=function(t,e){t.setAttribute("viewBox","0 0 100 50")},a.prototype._initializeTextContainer=function(t,e,n){t.text.style&&(n.style.top="auto",n.style.bottom="0",t.text.alignToBottom?o.setStyle(n,"transform","translate(-50%, 0)"):o.setStyle(n,"transform","translate(-50%, 50%)"))},a.prototype._pathString=i.prototype._pathString,a.prototype._trailString=i.prototype._trailString,t.exports=a},865:(t,e,n)=>{var r=n(888),i=n(128),o="Object is destroyed",a=function t(e,n){if(!(this instanceof t))throw new Error("Constructor was called without new keyword");if(0!==arguments.length){this._opts=i.extend({color:"#555",strokeWidth:1,trailColor:null,trailWidth:null,fill:null,text:{style:{color:null,position:"absolute",left:"50%",top:"50%",padding:0,margin:0,transform:{prefix:!0,value:"translate(-50%, -50%)"}},autoStyleContainer:!0,alignToBottom:!0,value:null,className:"progressbar-text"},svgStyle:{display:"block",width:"100%"},warnings:!1},n,!0),i.isObject(n)&&void 0!==n.svgStyle&&(this._opts.svgStyle=n.svgStyle),i.isObject(n)&&i.isObject(n.text)&&void 0!==n.text.style&&(this._opts.text.style=n.text.style);var o,a=this._createSvgView(this._opts);if(!(o=i.isString(e)?document.querySelector(e):e))throw new Error("Container does not exist: "+e);this._container=o,this._container.appendChild(a.svg),this._opts.warnings&&this._warnContainerAspectRatio(this._container),this._opts.svgStyle&&i.setStyles(a.svg,this._opts.svgStyle),this.svg=a.svg,this.path=a.path,this.trail=a.trail,this.text=null;var u=i.extend({attachment:void 0,shape:this},this._opts);this._progressPath=new r(a.path,u),i.isObject(this._opts.text)&&null!==this._opts.text.value&&this.setText(this._opts.text.value)}};a.prototype.animate=function(t,e,n){if(null===this._progressPath)throw new Error(o);this._progressPath.animate(t,e,n)},a.prototype.stop=function(){if(null===this._progressPath)throw new Error(o);void 0!==this._progressPath&&this._progressPath.stop()},a.prototype.pause=function(){if(null===this._progressPath)throw new Error(o);void 0!==this._progressPath&&this._progressPath._tweenable&&this._progressPath._tweenable.pause()},a.prototype.resume=function(){if(null===this._progressPath)throw new Error(o);void 0!==this._progressPath&&this._progressPath._tweenable&&this._progressPath._tweenable.resume()},a.prototype.destroy=function(){if(null===this._progressPath)throw new Error(o);this.stop(),this.svg.parentNode.removeChild(this.svg),this.svg=null,this.path=null,this.trail=null,this._progressPath=null,null!==this.text&&(this.text.parentNode.removeChild(this.text),this.text=null)},a.prototype.set=function(t){if(null===this._progressPath)throw new Error(o);this._progressPath.set(t)},a.prototype.value=function(){if(null===this._progressPath)throw new Error(o);return void 0===this._progressPath?0:this._progressPath.value()},a.prototype.setText=function(t){if(null===this._progressPath)throw new Error(o);null===this.text&&(this.text=this._createTextContainer(this._opts,this._container),this._container.appendChild(this.text)),i.isObject(t)?(i.removeChildren(this.text),this.text.appendChild(t)):this.text.innerHTML=t},a.prototype._createSvgView=function(t){var e=document.createElementNS("http://www.w3.org/2000/svg","svg");this._initializeSvg(e,t);var n=null;(t.trailColor||t.trailWidth)&&(n=this._createTrail(t),e.appendChild(n));var r=this._createPath(t);return e.appendChild(r),{svg:e,path:r,trail:n}},a.prototype._initializeSvg=function(t,e){t.setAttribute("viewBox","0 0 100 100")},a.prototype._createPath=function(t){var e=this._pathString(t);return this._createPathElement(e,t)},a.prototype._createTrail=function(t){var e=this._trailString(t),n=i.extend({},t);return n.trailColor||(n.trailColor="#eee"),n.trailWidth||(n.trailWidth=n.strokeWidth),n.color=n.trailColor,n.strokeWidth=n.trailWidth,n.fill=null,this._createPathElement(e,n)},a.prototype._createPathElement=function(t,e){var n=document.createElementNS("http://www.w3.org/2000/svg","path");return n.setAttribute("d",t),n.setAttribute("stroke",e.color),n.setAttribute("stroke-width",e.strokeWidth),e.fill?n.setAttribute("fill",e.fill):n.setAttribute("fill-opacity","0"),n},a.prototype._createTextContainer=function(t,e){var n=document.createElement("div");n.className=t.text.className;var r=t.text.style;return r&&(t.text.autoStyleContainer&&(e.style.position="relative"),i.setStyles(n,r),r.color||(n.style.color=t.color)),this._initializeTextContainer(t,e,n),n},a.prototype._initializeTextContainer=function(t,e,n){},a.prototype._pathString=function(t){throw new Error("Override this function for each progress bar")},a.prototype._trailString=function(t){throw new Error("Override this function for each progress bar")},a.prototype._warnContainerAspectRatio=function(t){if(this.containerAspectRatio){var e=window.getComputedStyle(t,null),n=parseFloat(e.getPropertyValue("width"),10),r=parseFloat(e.getPropertyValue("height"),10);i.floatEquals(this.containerAspectRatio,n/r)||(console.warn("Incorrect aspect ratio of container","#"+t.id,"detected:",e.getPropertyValue("width")+"(width)","/",e.getPropertyValue("height")+"(height)","=",n/r),console.warn("Aspect ratio of should be",this.containerAspectRatio))}},t.exports=a},681:(t,e,n)=>{var r=n(865),i=n(128),o=function(t,e){this._pathTemplate="M 0,{halfOfStrokeWidth} L {width},{halfOfStrokeWidth} L {width},{width} L {halfOfStrokeWidth},{width} L {halfOfStrokeWidth},{strokeWidth}",this._trailTemplate="M {startMargin},{halfOfStrokeWidth} L {width},{halfOfStrokeWidth} L {width},{width} L {halfOfStrokeWidth},{width} L {halfOfStrokeWidth},{halfOfStrokeWidth}",r.apply(this,arguments)};(o.prototype=new r).constructor=o,o.prototype._pathString=function(t){var e=100-t.strokeWidth/2;return i.render(this._pathTemplate,{width:e,strokeWidth:t.strokeWidth,halfOfStrokeWidth:t.strokeWidth/2})},o.prototype._trailString=function(t){var e=100-t.strokeWidth/2;return i.render(this._trailTemplate,{width:e,strokeWidth:t.strokeWidth,halfOfStrokeWidth:t.strokeWidth/2,startMargin:t.strokeWidth/2-t.trailWidth/2})},t.exports=o},128:t=>{var e="Webkit Moz O ms".split(" ");function n(t,n,i){for(var o=t.style,a=0;a<e.length;++a)o[e[a]+r(n)]=i;o[n]=i}function r(t){return t.charAt(0).toUpperCase()+t.slice(1)}function i(t){return!function(t){return"[object Array]"===Object.prototype.toString.call(t)}(t)&&"object"==typeof t&&!!t}function o(t,e){for(var n in t)t.hasOwnProperty(n)&&e(t[n],n)}t.exports={extend:function t(e,n,r){for(var o in e=e||{},r=r||!1,n=n||{})if(n.hasOwnProperty(o)){var a=e[o],u=n[o];r&&i(a)&&i(u)?e[o]=t(a,u,r):e[o]=u}return e},render:function(t,e){var n=t;for(var r in e)if(e.hasOwnProperty(r)){var i=e[r],o=new RegExp("\\{"+r+"\\}","g");n=n.replace(o,i)}return n},setStyle:n,setStyles:function(t,e){o(e,(function(e,r){null!=e&&(i(e)&&!0===e.prefix?n(t,r,e.value):t.style[r]=e)}))},capitalize:r,isString:function(t){return"string"==typeof t||t instanceof String},isFunction:function(t){return"function"==typeof t},isObject:i,forEachObject:o,floatEquals:function(t,e){return Math.abs(t-e)<.001},removeChildren:function(t){for(;t.firstChild;)t.removeChild(t.firstChild)}}},350:t=>{self,t.exports=function(){"use strict";var t={720:function(t,e,n){n.r(e),n.d(e,{Scene:function(){return $t},Tweenable:function(){return gt},interpolate:function(){return Yt},processTweens:function(){return ct},setBezierFunction:function(){return Jt},shouldScheduleUpdate:function(){return ht},tween:function(){return mt},unsetBezierFunction:function(){return te}});var r={};n.r(r),n.d(r,{bounce:function(){return F},bouncePast:function(){return L},easeFrom:function(){return N},easeFromTo:function(){return D},easeInBack:function(){return P},easeInCirc:function(){return k},easeInCubic:function(){return c},easeInExpo:function(){return w},easeInOutBack:function(){return j},easeInOutCirc:function(){return E},easeInOutCubic:function(){return f},easeInOutExpo:function(){return x},easeInOutQuad:function(){return s},easeInOutQuart:function(){return d},easeInOutQuint:function(){return g},easeInOutSine:function(){return _},easeInQuad:function(){return a},easeInQuart:function(){return h},easeInQuint:function(){return v},easeInSine:function(){return m},easeOutBack:function(){return T},easeOutBounce:function(){return C},easeOutCirc:function(){return O},easeOutCubic:function(){return l},easeOutExpo:function(){return S},easeOutQuad:function(){return u},easeOutQuart:function(){return p},easeOutQuint:function(){return y},easeOutSine:function(){return b},easeTo:function(){return z},elastic:function(){return A},linear:function(){return o},swingFrom:function(){return M},swingFromTo:function(){return I},swingTo:function(){return W}});var i={};n.r(i),n.d(i,{afterTween:function(){return Bt},beforeTween:function(){return Rt},doesApply:function(){return Nt},tweenCreated:function(){return zt}});var o=function(t){return t},a=function(t){return Math.pow(t,2)},u=function(t){return-(Math.pow(t-1,2)-1)},s=function(t){return(t/=.5)<1?.5*Math.pow(t,2):-.5*((t-=2)*t-2)},c=function(t){return Math.pow(t,3)},l=function(t){return Math.pow(t-1,3)+1},f=function(t){return(t/=.5)<1?.5*Math.pow(t,3):.5*(Math.pow(t-2,3)+2)},h=function(t){return Math.pow(t,4)},p=function(t){return-(Math.pow(t-1,4)-1)},d=function(t){return(t/=.5)<1?.5*Math.pow(t,4):-.5*((t-=2)*Math.pow(t,3)-2)},v=function(t){return Math.pow(t,5)},y=function(t){return Math.pow(t-1,5)+1},g=function(t){return(t/=.5)<1?.5*Math.pow(t,5):.5*(Math.pow(t-2,5)+2)},m=function(t){return 1-Math.cos(t*(Math.PI/2))},b=function(t){return Math.sin(t*(Math.PI/2))},_=function(t){return-.5*(Math.cos(Math.PI*t)-1)},w=function(t){return 0===t?0:Math.pow(2,10*(t-1))},S=function(t){return 1===t?1:1-Math.pow(2,-10*t)},x=function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*--t))},k=function(t){return-(Math.sqrt(1-t*t)-1)},O=function(t){return Math.sqrt(1-Math.pow(t-1,2))},E=function(t){return(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},C=function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},P=function(t){var e=1.70158;return t*t*((e+1)*t-e)},T=function(t){var e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},j=function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},A=function(t){return-1*Math.pow(4,-8*t)*Math.sin((6*t-1)*(2*Math.PI)/2)+1},I=function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},M=function(t){var e=1.70158;return t*t*((e+1)*t-e)},W=function(t){var e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},F=function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},L=function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?2-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?2-(7.5625*(t-=2.25/2.75)*t+.9375):2-(7.5625*(t-=2.625/2.75)*t+.984375)},D=function(t){return(t/=.5)<1?.5*Math.pow(t,4):-.5*((t-=2)*Math.pow(t,3)-2)},N=function(t){return Math.pow(t,4)},z=function(t){return Math.pow(t,.25)};function R(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function B(t){return(B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function q(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function H(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?q(Object(n),!0).forEach((function(e){Q(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):q(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Q(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var V,U,Y,Z="linear",G="undefined"!=typeof window?window:n.g,K="afterTween",X="afterTweenEnd",$="beforeTween",J="tweenCreated",tt="function",et="string",nt=G.requestAnimationFrame||G.webkitRequestAnimationFrame||G.oRequestAnimationFrame||G.msRequestAnimationFrame||G.mozCancelRequestAnimationFrame&&G.mozRequestAnimationFrame||setTimeout,rt=function(){},it=null,ot=null,at=H({},r),ut=function(t,e,n,r,i,o,a){var u,s,c,l=t<o?0:(t-o)/i,f=!1;for(var h in a&&a.call&&(f=!0,u=a(l)),e)f||(u=((s=a[h]).call?s:at[s])(l)),c=n[h],e[h]=c+(r[h]-c)*u;return e},st=function(t,e){var n=t._timestamp,r=t._currentState,i=t._delay;if(!(e<n+i)){var o=t._duration,a=t._targetState,u=n+i+o,s=e>u?u:e;t._hasEnded=s>=u;var c=o-(u-s),l=t._filters.length>0;if(t._hasEnded)return t._render(a,t._data,c),t.stop(!0);l&&t._applyFilter($),s<n+i?n=o=s=1:n+=i,ut(s,r,t._originalState,a,o,n,t._easing),l&&t._applyFilter(K),t._render(r,t._data,c)}},ct=function(){for(var t,e=gt.now(),n=it;n;)t=n._next,st(n,e),n=t},lt=Date.now||function(){return+new Date},ft=!1,ht=function(t){t&&ft||(ft=t,t&&pt())},pt=function t(){V=lt(),ft&&nt.call(G,t,16.666666666666668),ct()},dt=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Z,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=B(e);if(at[e])return at[e];if(r===et||r===tt)for(var i in t)n[i]=e;else for(var o in t)n[o]=e[o]||Z;return n},vt=function(t){t===it?(it=t._next)?it._previous=null:ot=null:t===ot?(ot=t._previous)?ot._next=null:it=null:(U=t._previous,Y=t._next,U._next=Y,Y._previous=U),t._previous=t._next=null},yt="function"==typeof Promise?Promise:null,gt=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;R(this,t),this._config={},this._data={},this._delay=0,this._filters=[],this._next=null,this._previous=null,this._timestamp=null,this._hasEnded=!1,this._resolve=null,this._reject=null,this._currentState=e||{},this._originalState={},this._targetState={},this._start=rt,this._render=rt,this._promiseCtor=yt,n&&this.setConfig(n)}var e;return(e=[{key:"_applyFilter",value:function(t){for(var e=this._filters.length;e>0;e--){var n=this._filters[e-e][t];n&&n(this)}}},{key:"tween",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;return this._isPlaying&&this.stop(),!e&&this._config||this.setConfig(e),this._pausedAtTime=null,this._timestamp=t.now(),this._start(this.get(),this._data),this._delay&&this._render(this._currentState,this._data,0),this._resume(this._timestamp)}},{key:"setConfig",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=this._config;for(var r in e)n[r]=e[r];var i=n.promise,o=void 0===i?this._promiseCtor:i,a=n.start,u=void 0===a?rt:a,s=n.finish,c=n.render,l=void 0===c?this._config.step||rt:c,f=n.step,h=void 0===f?rt:f;this._data=n.data||n.attachment||this._data,this._isPlaying=!1,this._pausedAtTime=null,this._scheduleId=null,this._delay=e.delay||0,this._start=u,this._render=l||h,this._duration=n.duration||500,this._promiseCtor=o,s&&(this._resolve=s);var p=e.from,d=e.to,v=void 0===d?{}:d,y=this._currentState,g=this._originalState,m=this._targetState;for(var b in p)y[b]=p[b];var _=!1;for(var w in y){var S=y[w];_||B(S)!==et||(_=!0),g[w]=S,m[w]=v.hasOwnProperty(w)?v[w]:S}if(this._easing=dt(this._currentState,n.easing,this._easing),this._filters.length=0,_){for(var x in t.filters)t.filters[x].doesApply(this)&&this._filters.push(t.filters[x]);this._applyFilter(J)}return this}},{key:"then",value:function(t,e){var n=this;return this._promise=new this._promiseCtor((function(t,e){n._resolve=t,n._reject=e})),this._promise.then(t,e)}},{key:"catch",value:function(t){return this.then().catch(t)}},{key:"get",value:function(){return H({},this._currentState)}},{key:"set",value:function(t){this._currentState=t}},{key:"pause",value:function(){if(this._isPlaying)return this._pausedAtTime=t.now(),this._isPlaying=!1,vt(this),this}},{key:"resume",value:function(){return this._resume()}},{key:"_resume",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t.now();return null===this._timestamp?this.tween():this._isPlaying?this._promise:(this._pausedAtTime&&(this._timestamp+=e-this._pausedAtTime,this._pausedAtTime=null),this._isPlaying=!0,null===it?(it=this,ot=this):(this._previous=ot,ot._next=this,ot=this),this)}},{key:"seek",value:function(e){e=Math.max(e,0);var n=t.now();return this._timestamp+e===0||(this._timestamp=n-e,st(this,n)),this}},{key:"stop",value:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!this._isPlaying)return this;this._isPlaying=!1,vt(this);var e=this._filters.length>0;return t&&(e&&this._applyFilter($),ut(1,this._currentState,this._originalState,this._targetState,1,0,this._easing),e&&(this._applyFilter(K),this._applyFilter(X))),this._resolve&&this._resolve({data:this._data,state:this._currentState,tweenable:this}),this._resolve=null,this._reject=null,this}},{key:"cancel",value:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=this._currentState,n=this._data;return this._isPlaying?(this._reject&&this._reject({data:n,state:e,tweenable:this}),this._resolve=null,this._reject=null,this.stop(t)):this}},{key:"isPlaying",value:function(){return this._isPlaying}},{key:"hasEnded",value:function(){return this._hasEnded}},{key:"setScheduleFunction",value:function(e){t.setScheduleFunction(e)}},{key:"data",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return t&&(this._data=H({},t)),this._data}},{key:"dispose",value:function(){for(var t in this)delete this[t]}}])&&function(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}(t.prototype,e),t}();function mt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=new gt;return e.tween(t),e.tweenable=e,e}Q(gt,"now",(function(){return V})),Q(gt,"setScheduleFunction",(function(t){return nt=t})),Q(gt,"filters",{}),Q(gt,"formulas",at),ht(!0);var bt,_t,wt=/(\d|-|\.)/,St=/([^\-0-9.]+)/g,xt=/[0-9.-]+/g,kt=(bt=xt.source,_t=/,\s*/.source,new RegExp("rgba?\\(".concat(bt).concat(_t).concat(bt).concat(_t).concat(bt,"(").concat(_t).concat(bt,")?\\)"),"g")),Ot=/^.*\(/,Et=/#([0-9]|[a-f]){3,6}/gi,Ct="VAL",Pt=function(t,e){return t.map((function(t,n){return"_".concat(e,"_").concat(n)}))};function Tt(t){return parseInt(t,16)}var jt=function(t){return"rgb(".concat((e=t,3===(e=e.replace(/#/,"")).length&&(e=(e=e.split(""))[0]+e[0]+e[1]+e[1]+e[2]+e[2]),[Tt(e.substr(0,2)),Tt(e.substr(2,2)),Tt(e.substr(4,2))]).join(","),")");var e},At=function(t,e,n){var r=e.match(t),i=e.replace(t,Ct);return r&&r.forEach((function(t){return i=i.replace(Ct,n(t))})),i},It=function(t){for(var e in t){var n=t[e];"string"==typeof n&&n.match(Et)&&(t[e]=At(Et,n,jt))}},Mt=function(t){var e=t.match(xt),n=e.slice(0,3).map(Math.floor),r=t.match(Ot)[0];if(3===e.length)return"".concat(r).concat(n.join(","),")");if(4===e.length)return"".concat(r).concat(n.join(","),",").concat(e[3],")");throw new Error("Invalid rgbChunk: ".concat(t))},Wt=function(t){return t.match(xt)},Ft=function(t,e){var n={};return e.forEach((function(e){n[e]=t[e],delete t[e]})),n},Lt=function(t,e){return e.map((function(e){return t[e]}))},Dt=function(t,e){return e.forEach((function(e){return t=t.replace(Ct,+e.toFixed(4))})),t},Nt=function(t){for(var e in t._currentState)if("string"==typeof t._currentState[e])return!0;return!1};function zt(t){var e=t._currentState;[e,t._originalState,t._targetState].forEach(It),t._tokenData=function(t){var e,n,r={};for(var i in t){var o=t[i];"string"==typeof o&&(r[i]={formatString:(e=o,n=void 0,n=e.match(St),n?(1===n.length||e.charAt(0).match(wt))&&n.unshift(""):n=["",""],n.join(Ct)),chunkNames:Pt(Wt(o),i)})}return r}(e)}function Rt(t){var e=t._currentState,n=t._originalState,r=t._targetState,i=t._easing,o=t._tokenData;!function(t,e){var n=function(n){var r=e[n].chunkNames,i=t[n];if("string"==typeof i){var o=i.split(" "),a=o[o.length-1];r.forEach((function(e,n){return t[e]=o[n]||a}))}else r.forEach((function(e){return t[e]=i}));delete t[n]};for(var r in e)n(r)}(i,o),[e,n,r].forEach((function(t){return function(t,e){var n=function(n){Wt(t[n]).forEach((function(r,i){return t[e[n].chunkNames[i]]=+r})),delete t[n]};for(var r in e)n(r)}(t,o)}))}function Bt(t){var e=t._currentState,n=t._originalState,r=t._targetState,i=t._easing,o=t._tokenData;[e,n,r].forEach((function(t){return function(t,e){for(var n in e){var r=e[n],i=r.chunkNames,o=r.formatString,a=Dt(o,Lt(Ft(t,i),i));t[n]=At(kt,a,Mt)}}(t,o)})),function(t,e){for(var n in e){var r=e[n].chunkNames,i=t[r[0]];t[n]="string"==typeof i?r.map((function(e){var n=t[e];return delete t[e],n})).join(" "):i}}(i,o)}function qt(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Ht(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?qt(Object(n),!0).forEach((function(e){Qt(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):qt(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Qt(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Vt=new gt,Ut=gt.filters,Yt=function(t,e,n,r){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,o=Ht({},t),a=dt(t,r);for(var u in Vt._filters.length=0,Vt.set({}),Vt._currentState=o,Vt._originalState=t,Vt._targetState=e,Vt._easing=a,Ut)Ut[u].doesApply(Vt)&&Vt._filters.push(Ut[u]);Vt._applyFilter("tweenCreated"),Vt._applyFilter("beforeTween");var s=ut(n,o,t,e,1,i,a);return Vt._applyFilter("afterTween"),s};function Zt(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Gt(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Kt(t,e){var n=e.get(t);if(!n)throw new TypeError("attempted to get private field on non-instance");return n.get?n.get.call(t):n.value}var Xt=new WeakMap,$t=function(){function t(){Gt(this,t),Xt.set(this,{writable:!0,value:[]});for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];n.forEach(this.add.bind(this))}var e;return(e=[{key:"add",value:function(t){return Kt(this,Xt).push(t),t}},{key:"remove",value:function(t){var e=Kt(this,Xt).indexOf(t);return~e&&Kt(this,Xt).splice(e,1),t}},{key:"empty",value:function(){return this.tweenables.map(this.remove.bind(this))}},{key:"isPlaying",value:function(){return Kt(this,Xt).some((function(t){return t.isPlaying()}))}},{key:"play",value:function(){return Kt(this,Xt).forEach((function(t){return t.tween()})),this}},{key:"pause",value:function(){return Kt(this,Xt).forEach((function(t){return t.pause()})),this}},{key:"resume",value:function(){return Kt(this,Xt).forEach((function(t){return t.resume()})),this}},{key:"stop",value:function(t){return Kt(this,Xt).forEach((function(e){return e.stop(t)})),this}},{key:"tweenables",get:function(){return function(t){if(Array.isArray(t))return Zt(t)}(t=Kt(this,Xt))||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return Zt(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Zt(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();var t}},{key:"promises",get:function(){return Kt(this,Xt).map((function(t){return t.then()}))}}])&&function(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}(t.prototype,e),t}(),Jt=function(t,e,n,r,i){var o=function(t,e,n,r){return function(i){return l=0,f=0,h=0,p=function(t){return((l*t+f)*t+h)*t},d=function(t){return(3*l*t+2*f)*t+h},v=function(t){return t>=0?t:0-t},l=1-(h=3*(o=t))-(f=3*(n-o)-h),u=1-(c=3*(a=e))-(s=3*(r-a)-c),function(t){return((u*t+s)*t+c)*t}(function(t,e){var n,r,i,o,a,u;for(i=t,u=0;u<8;u++){if(o=p(i)-t,v(o)<.005)return i;if(a=d(i),v(a)<1e-6)break;i-=o/a}if((i=t)<(n=0))return n;if(i>(r=1))return r;for(;n<r;){if(o=p(i),v(o-t)<.005)return i;t>o?n=i:r=i,i=.5*(r-n)+n}return i}(i));var o,a,u,s,c,l,f,h,p,d,v}}(e,n,r,i);return o.displayName=t,o.x1=e,o.y1=n,o.x2=r,o.y2=i,gt.formulas[t]=o},te=function(t){return delete gt.formulas[t]};gt.filters.token=i}},e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}return n.d=function(t,e){for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(720)}()}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}(()=>{"use strict";var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};function e(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function r(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}}function i(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function a(t,e,n){if(n||2===arguments.length)for(var r,i=0,o=e.length;i<o;i++)!r&&i in e||(r||(r=Array.prototype.slice.call(e,0,i)),r[i]=e[i]);return t.concat(r||Array.prototype.slice.call(e))}function u(t){return this instanceof u?(this.v=t,this):new u(t)}function s(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(t){i[t]&&(r[t]=function(e){return new Promise((function(n,r){o.push([t,e,n,r])>1||s(t,e)}))})}function s(t,e){try{(n=i[t](e)).value instanceof u?Promise.resolve(n.value.v).then(c,l):f(o[0][2],n)}catch(t){f(o[0][3],t)}var n}function c(t){s("next",t)}function l(t){s("throw",t)}function f(t,e){t(e),o.shift(),o.length&&s(o[0][0],o[0][1])}}Object.create,Object.create;var c=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function l(t){return"function"==typeof t}function f(t){return l(null==t?void 0:t.then)}var h,p=((h=function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}((function(t){Error.call(t),t.stack=(new Error).stack}))).prototype=Object.create(Error.prototype),h.prototype.constructor=h,h);function d(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var v=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}return t.prototype.unsubscribe=function(){var t,e,n,r,u;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var c=i(s),f=c.next();!f.done;f=c.next())f.value.remove(this)}catch(e){t={error:e}}finally{try{f&&!f.done&&(e=c.return)&&e.call(c)}finally{if(t)throw t.error}}else s.remove(this);var h=this.initialTeardown;if(l(h))try{h()}catch(t){u=t instanceof p?t.errors:[t]}var d=this._finalizers;if(d){this._finalizers=null;try{for(var v=i(d),y=v.next();!y.done;y=v.next()){var m=y.value;try{g(m)}catch(t){u=null!=u?u:[],t instanceof p?u=a(a([],o(u)),o(t.errors)):u.push(t)}}}catch(t){n={error:t}}finally{try{y&&!y.done&&(r=v.return)&&r.call(v)}finally{if(n)throw n.error}}}if(u)throw new p(u)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)g(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&d(e,t)},t.prototype.remove=function(e){var n=this._finalizers;n&&d(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t;var e}();function y(t){return t instanceof v||t&&"closed"in t&&l(t.remove)&&l(t.add)&&l(t.unsubscribe)}function g(t){l(t)?t():t.unsubscribe()}v.EMPTY;var m=null,b=null,_=void 0,w=!1,S=!1,x={setTimeout:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=x.delegate;return(null==i?void 0:i.setTimeout)?i.setTimeout.apply(i,a([t,e],o(n))):setTimeout.apply(void 0,a([t,e],o(n)))},clearTimeout:function(t){var e=x.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function k(t){x.setTimeout((function(){if(!m)throw t;m(t)}))}function O(){}var E=C("C",void 0,void 0);function C(t,e,n){return{kind:t,value:e,error:n}}var P=null,T=function(t){function n(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,y(e)&&e.add(n)):n.destination=L,n}return e(n,t),n.create=function(t,e,n){return new M(t,e,n)},n.prototype.next=function(t){this.isStopped?F(function(t){return C("N",t,void 0)}(t),this):this._next(t)},n.prototype.error=function(t){this.isStopped?F(C("E",void 0,t),this):(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped?F(E,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(v),j=Function.prototype.bind;function A(t,e){return j.call(t,e)}var I=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){W(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){W(t)}else W(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){W(t)}},t}(),M=function(t){function n(e,n,r){var i,o,a=t.call(this)||this;return l(e)||!e?i={next:null!=e?e:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:a&&S?((o=Object.create(e)).unsubscribe=function(){return a.unsubscribe()},i={next:e.next&&A(e.next,o),error:e.error&&A(e.error,o),complete:e.complete&&A(e.complete,o)}):i=e,a.destination=new I(i),a}return e(n,t),n}(T);function W(t){var e;w?(e=t,w&&P&&(P.errorThrown=!0,P.error=e)):k(t)}function F(t,e){var n=b;n&&x.setTimeout((function(){return n(t,e)}))}var L={closed:!0,next:O,error:function(t){throw t},complete:O},D="function"==typeof Symbol&&Symbol.observable||"@@observable";function N(t){return t}function z(t){return 0===t.length?N:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var R=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,i=this,o=(r=t)&&r instanceof T||function(t){return t&&l(t.next)&&l(t.error)&&l(t.complete)}(r)&&y(r)?t:new M(t,e,n);return function(t){if(w){var e=!P;if(e&&(P={errorThrown:!1,error:null}),t(),e){var n=P,r=n.errorThrown,i=n.error;if(P=null,r)throw i}}else t()}((function(){var t=i,e=t.operator,n=t.source;o.add(e?e.call(o,n):n?i._subscribe(o):i._trySubscribe(o))})),o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=B(e))((function(e,r){var i=new M({next:function(e){try{t(e)}catch(t){r(t),i.unsubscribe()}},error:r,complete:e});n.subscribe(i)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[D]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return z(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=B(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function B(t){var e;return null!==(e=null!=t?t:_)&&void 0!==e?e:Promise}function q(t){return l(t[D])}function H(t){return Symbol.asyncIterator&&l(null==t?void 0:t[Symbol.asyncIterator])}function Q(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var V="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function U(t){return l(null==t?void 0:t[V])}function Y(t){return s(this,arguments,(function(){var e,n,i;return r(this,(function(r){switch(r.label){case 0:e=t.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,u(e.read())];case 3:return n=r.sent(),i=n.value,n.done?[4,u(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,u(i)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function Z(t){return l(null==t?void 0:t.getReader)}function G(t){if(t instanceof R)return t;if(null!=t){if(q(t))return o=t,new R((function(t){var e=o[D]();if(l(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(c(t))return r=t,new R((function(t){for(var e=0;e<r.length&&!t.closed;e++)t.next(r[e]);t.complete()}));if(f(t))return n=t,new R((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,k)}));if(H(t))return K(t);if(U(t))return e=t,new R((function(t){var n,r;try{for(var o=i(e),a=o.next();!a.done;a=o.next()){var u=a.value;if(t.next(u),t.closed)return}}catch(t){n={error:t}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}t.complete()}));if(Z(t))return K(Y(t))}var e,n,r,o;throw Q(t)}function K(t){return new R((function(e){(function(t,e){var n,o,a,u,s,c,l,f;return s=this,c=void 0,f=function(){var s,c;return r(this,(function(r){switch(r.label){case 0:r.trys.push([0,5,6,11]),n=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=i(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,i,(e=t[n](e)).done,e.value)}))}}}(t),r.label=1;case 1:return[4,n.next()];case 2:if((o=r.sent()).done)return[3,4];if(s=o.value,e.next(s),e.closed)return[2];r.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return c=r.sent(),a={error:c},[3,11];case 6:return r.trys.push([6,,9,10]),o&&!o.done&&(u=n.return)?[4,u.call(n)]:[3,8];case 7:r.sent(),r.label=8;case 8:return[3,10];case 9:if(a)throw a.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,e){function n(t){try{i(f.next(t))}catch(t){e(t)}}function r(t){try{i(f.throw(t))}catch(t){e(t)}}function i(e){var i;e.done?t(e.value):(i=e.value,i instanceof l?i:new l((function(t){t(i)}))).then(n,r)}i((f=f.apply(s,c||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function X(t){return function(e){if(function(t){return l(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function $(t,e,n,r,i){return new J(t,e,n,r,i)}var J=function(t){function n(e,n,r,i,o,a){var u=t.call(this,e)||this;return u.onFinalize=o,u.shouldUnsubscribe=a,u._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,u._error=i?function(t){try{i(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return e(n,t),n.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},n}(T);function tt(t,e){return X((function(n,r){var i=0;n.subscribe($(r,(function(n){r.next(t.call(e,n,i++))})))}))}function et(t,e,n,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=e.schedule((function(){n(),i?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(o),!i)return o}function nt(t,e,n){return void 0===n&&(n=1/0),l(e)?nt((function(n,r){return tt((function(t,i){return e(n,t,r,i)}))(G(t(n,r)))}),n):("number"==typeof e&&(n=e),X((function(e,r){return function(t,e,n,r,i,o,a,u){var s=[],c=0,l=0,f=!1,h=function(){!f||s.length||c||e.complete()},p=function(t){return c<r?d(t):s.push(t)},d=function(t){c++;var i=!1;G(n(t,l++)).subscribe($(e,(function(t){e.next(t)}),(function(){i=!0}),void 0,(function(){if(i)try{c--;for(;s.length&&c<r;)t=void 0,t=s.shift(),d(t);h()}catch(t){e.error(t)}var t})))};return t.subscribe($(e,p,(function(){f=!0,h()}))),function(){}}(e,r,t,n)})))}var rt=Array.isArray;var it=["addListener","removeListener"],ot=["addEventListener","removeEventListener"],at=["on","off"];function ut(t,e){return function(n){return function(r){return t[n](e,r)}}}var st=Array.isArray;function ct(t){return 1===t.length&&st(t[0])?t[0]:t}var lt=new R((function(t){return t.complete()}));function ft(t){return t&&l(t.schedule)}function ht(t){return t[t.length-1]}function pt(t){return l(ht(t))?t.pop():void 0}function dt(t){return ft(ht(t))?t.pop():void 0}var vt=function(t){function n(e,n){return t.call(this)||this}return e(n,t),n.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},n}(v),yt={setInterval:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=yt.delegate;return(null==i?void 0:i.setInterval)?i.setInterval.apply(i,a([t,e],o(n))):setInterval.apply(void 0,a([t,e],o(n)))},clearInterval:function(t){var e=yt.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},gt=function(t){function n(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return e(n,t),n.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},n.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),yt.setInterval(t.flush.bind(t,this),n)},n.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return e;yt.clearInterval(e)},n.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,e){var n,r=!1;try{this.work(t)}catch(t){r=!0,n=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},n.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,d(r,this),null!=e&&(this.id=this.recycleAsyncId(n,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},n}(vt),mt={now:function(){return(mt.delegate||Date).now()},delegate:void 0},bt=function(){function t(e,n){void 0===n&&(n=t.now),this.schedulerActionCtor=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(n,e)},t.now=mt.now,t}(),_t=new(function(t){function n(e,n){void 0===n&&(n=bt.now);var r=t.call(this,e,n)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return e(n,t),n.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var n;this._active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},n}(bt))(gt),wt=_t;function St(t,e,n){void 0===t&&(t=0),void 0===n&&(n=wt);var r=-1;return null!=e&&(ft(e)?n=e:r=e),new R((function(e){var i,o=(i=t)instanceof Date&&!isNaN(i)?+t-n.now():t;o<0&&(o=0);var a=0;return n.schedule((function(){e.closed||(e.next(a++),0<=r?this.schedule(void 0,r):e.complete())}),o)}))}function xt(t,e){return void 0===e&&(e=0),X((function(n,r){n.subscribe($(r,(function(n){return et(r,t,(function(){return r.next(n)}),e)}),(function(){return et(r,t,(function(){return r.complete()}),e)}),(function(n){return et(r,t,(function(){return r.error(n)}),e)})))}))}function kt(t,e){return void 0===e&&(e=0),X((function(n,r){r.add(t.schedule((function(){return n.subscribe(r)}),e))}))}function Ot(t,e){if(!t)throw new Error("Iterable cannot be null");return new R((function(n){et(n,e,(function(){var r=t[Symbol.asyncIterator]();et(n,e,(function(){r.next().then((function(t){t.done?n.complete():n.next(t.value)}))}),0,!0)}))}))}function Et(t,e){return e?function(t,e){if(null!=t){if(q(t))return function(t,e){return G(t).pipe(kt(e),xt(e))}(t,e);if(c(t))return function(t,e){return new R((function(n){var r=0;return e.schedule((function(){r===t.length?n.complete():(n.next(t[r++]),n.closed||this.schedule())}))}))}(t,e);if(f(t))return function(t,e){return G(t).pipe(kt(e),xt(e))}(t,e);if(H(t))return Ot(t,e);if(U(t))return function(t,e){return new R((function(n){var r;return et(n,e,(function(){r=t[V](),et(n,e,(function(){var t,e,i;try{e=(t=r.next()).value,i=t.done}catch(t){return void n.error(t)}i?n.complete():n.next(e)}),0,!0)})),function(){return l(null==r?void 0:r.return)&&r.return()}}))}(t,e);if(Z(t))return function(t,e){return Ot(Y(t),e)}(t,e)}throw Q(t)}(t,e):G(t)}function Ct(){return void 0===(t=1)&&(t=1/0),nt(N,t);var t}function Pt(t){return t<=0?function(){return lt}:X((function(e,n){var r=0;e.subscribe($(n,(function(e){++r<=t&&(n.next(e),t<=r&&n.complete())})))}))}function Tt(t,e){return e?function(n){return function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return Ct()(Et(t,dt(t)))}(e.pipe(Pt(1),X((function(t,e){t.subscribe($(e,O))}))),n.pipe(Tt(t)))}:nt((function(e,n){return t(e,n).pipe(Pt(1),function(t){return tt((function(){return t}))}(e))}))}var jt=document.body;jt.style.height="98vh",jt.id="celaStrana";var At=document.createElement("div");At.id="leviDeoStrane",jt.appendChild(At);var It=document.createElement("div");It.id="desniDeoStrane",jt.appendChild(It);var Mt=[Math.random()*It.offsetWidth|0,Math.random()*It.offsetHeight|0];Mt[0]<It.offsetWidth/100*40&&(Mt[0]=It.offsetWidth/100*40+Mt[0]|0),console.log(Mt);var Wt=document.createElement("input");Wt.type="image",Wt.id="dugmeKljuc",Wt.src="/Images/key.png",Wt.style.position="absolute",Wt.style.left=Mt[0].toString()+"px",Wt.style.top=Mt[1].toString()+"px",Wt.style.display="none",Wt.innerHTML="Pokreni Igru",It.appendChild(Wt);var Ft=document.createElement("img");Ft.src="/Images/padlock.png",Ft.width=40,Ft.style.paddingBottom="10px";var Lt=document.createElement("div");Lt.className="krugovi",At.appendChild(Lt);var Dt=document.createElement("div");Dt.className="krug",Dt.style.backgroundColor="white",Lt.appendChild(Dt);var Nt=document.createElement("div");Nt.className="krug",Nt.style.backgroundColor="white",Lt.appendChild(Nt);var zt=document.createElement("div");zt.className="krug",zt.style.backgroundColor="white",Lt.appendChild(zt);var Rt=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=pt(t),r=ct(t);return r.length?new R((function(t){var e=r.map((function(){return[]})),i=r.map((function(){return!1}));t.add((function(){e=i=null}));for(var u=function(u){G(r[u]).subscribe($(t,(function(r){if(e[u].push(r),e.every((function(t){return t.length}))){var s=e.map((function(t){return t.shift()}));t.next(n?n.apply(void 0,a([],o(s))):s),e.some((function(t,e){return!t.length&&i[e]}))&&t.complete()}}),(function(){i[u]=!0,!e[u].length&&t.complete()})))},s=0;!t.closed&&s<r.length;s++)u(s);return function(){e=i=null}})):lt}(("mousemove",function t(e,n,r,i){if(l(r)&&(i=r,r=void 0),i)return t(e,n,r).pipe((u=i,tt((function(t){return function(t,e){return rt(e)?t.apply(void 0,a([],o(e))):t(e)}(u,t)}))));var u,s=o(function(t){return l(t.addEventListener)&&l(t.removeEventListener)}(e)?ot.map((function(t){return function(i){return e[t](n,i,r)}})):function(t){return l(t.addListener)&&l(t.removeListener)}(e)?it.map(ut(e,n)):function(t){return l(t.on)&&l(t.off)}(e)?at.map(ut(e,n)):[],2),f=s[0],h=s[1];if(!f&&c(e))return nt((function(e){return t(e,n,r)}))(G(e));if(!f)throw new TypeError("Invalid event target");return new R((function(t){var e=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.next(1<e.length?e:e[0])};return f(e),function(){return h(e)}}))}(document,"mousemove").pipe(tt((function(t){return{x:t.clientX,y:t.clientY}}))))).subscribe((function(t){var e=t;e[0].x>Mt[0]-50&&e[0].x<Mt[0]+50&&e[0].y>Mt[1]-50&&e[0].y<Mt[1]+50?(Wt.style.display="inline",Dt.style.backgroundColor="#2dd424",Nt.style.backgroundColor="#2dd424",zt.style.backgroundColor="#2dd424"):e[0].x>Mt[0]-150&&e[0].x<Mt[0]+150&&e[0].y>Mt[1]-150&&e[0].y<Mt[1]+150?(zt.style.backgroundColor="#1861b5",Nt.style.backgroundColor="#f7e436",Dt.style.backgroundColor="#db2e3c",Wt.style.display="none"):e[0].x>Mt[0]-350&&e[0].x<Mt[0]+350&&e[0].y>Mt[1]-350&&e[0].y<Mt[1]+350?(Nt.style.backgroundColor="#f7e436",zt.style.backgroundColor="white",Dt.style.backgroundColor="#db2e3c",Wt.style.display="none"):(Dt.style.backgroundColor="#db2e3c",Nt.style.backgroundColor="white",zt.style.backgroundColor="white",Wt.style.display="none")})),Bt=St(0,10).subscribe((function(t){return Ht.innerHTML=(e=t,n=Math.floor(e/6e3),r=Math.floor((e-6e3*n)/100),i=e-6e3*n-100*r,n<10&&(n="0"+n),r<10&&(r="0"+r),i<10&&(i="0"+i),n+":"+r+"."+i);var e,n,r,i})),qt=document.createElement("div");At.appendChild(qt);var Ht=document.createElement("label");Ht.id="timer",qt.appendChild(Ft),qt.appendChild(Ht),qt.className="divLeveStraneIgraca",Wt.addEventListener("click",(function(){Rt.unsubscribe(),Lt.style.display="none",Wt.style.display="none",Ft.src="/Images/padlockOpen.png",Bt.unsubscribe(),Gt.style.display="inline",Kt.style.display="inline",Ut.style.display="inline",function(){var t=document.createElement("div");At.appendChild(t);var e=document.createElement("label");e.className="divLeveStraneIgraca",e.id="skorDrugeIgre",e.innerHTML="Broj pogodaka",t.appendChild(e);for(var r,i,o,a,u=0,s=[],c=[],f=0,h=0;h<12;)s[h]=Vt[20*Math.random()|0],h++;for(h=0;h<3;)s[12*Math.random()|0]=s[12*Math.random()|0],h++;console.log(s),Et(s).pipe((o=function(t){return function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=dt(t);return Et(t,n)}(t).pipe(function(t,e){void 0===e&&(e=_t);var n=St(500,e);return Tt((function(){return n}))}())},l(a)?nt(o,a,1):nt(o,1)),(i=function(){Yt.style.display="none",Zt.style.display="none",Ut.innerHTML="",function(){var t=document.createElement("div");t.className="divLeveStraneIgraca",At.appendChild(t);var e=document.createElement("img");e.src="/Images/heart.png",e.width=40,e.style.paddingBottom="10px",t.appendChild(e);var n=document.createElement("img");n.src="/Images/heart.png",n.width=40,n.style.paddingBottom="10px",t.appendChild(n);var r=document.createElement("img");r.src="/Images/heart.png",r.width=40,r.style.paddingBottom="10px",t.appendChild(r)}()},X((function(t,e){try{t.subscribe(e)}finally{e.add(i)}})))).subscribe((function(t){Yt.style.display="inline",Zt.style.display="inline",d.set(0),Ut.innerHTML=t.rec,c[u]=t,u++,r=!1;for(var e=0;e<c.length-1;e++)c[e]==t&&(r=!0);Gt.disabled=!1,Kt.disabled=!1,d.animate(1)})),Kt.addEventListener("click",(function(){r||f++,e.innerHTML="Broj pogodaka: "+f.toString(),Gt.disabled=!0,Kt.disabled=!0})),Gt.addEventListener("click",(function(){r&&f++,e.innerHTML="Broj pogodaka: "+f.toString(),Gt.disabled=!0,Kt.disabled=!0}));var p=n(86),d=(new p.Line("#progressBarDiv"),new p.Line(Yt,{strokeWidth:4,easing:"easeInOut",duration:2500,color:"#7adbfa",trailColor:"#eee",trailWidth:1,svgStyle:{width:"100%",height:"100%"},from:{color:"#6de6e6"},to:{color:"#209696"},step:function(t,e){e.path.setAttribute("stroke",t.color)}}))}()}));var Qt=function(t,e){this.id=t,this.rec=e},Vt=[];fetch("http://localhost:3000/reci").then((function(t){return t.json()})).then((function(t){return t.forEach((function(t){Vt.push(new Qt(t.id,t.rec))}))}));var Ut=document.createElement("label");Ut.id="labelaZaReci",Ut.style.display="none",Ut.innerHTML="Druga igra pocinje ubrzo",It.appendChild(Ut);var Yt=document.createElement("div");Yt.style.display="none",Yt.id="progressBarDiv",It.appendChild(Yt);var Zt=document.createElement("div");Zt.style.display="none",It.appendChild(Zt);var Gt=document.createElement("button");Gt.innerHTML="Vidjena",Gt.className="dugmeZaRec",Gt.disabled=!0,Gt.style.display="none",Zt.appendChild(Gt);var Kt=document.createElement("button");Kt.innerHTML="Nova",Kt.className="dugmeZaRec",Kt.disabled=!0,Kt.style.display="none",Zt.appendChild(Kt)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,