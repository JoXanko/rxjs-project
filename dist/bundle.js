/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={534:(t,e,n)=>{var r=n(865),i=n(128),o=function(t,e){this._pathTemplate="M 50,50 m 0,-{radius} a {radius},{radius} 0 1 1 0,{2radius} a {radius},{radius} 0 1 1 0,-{2radius}",this.containerAspectRatio=1,r.apply(this,arguments)};(o.prototype=new r).constructor=o,o.prototype._pathString=function(t){var e=t.strokeWidth;t.trailWidth&&t.trailWidth>t.strokeWidth&&(e=t.trailWidth);var n=50-e/2;return i.render(this._pathTemplate,{radius:n,"2radius":2*n})},o.prototype._trailString=function(t){return this._pathString(t)},t.exports=o},688:(t,e,n)=>{var r=n(865),i=n(128),o=function(t,e){this._pathTemplate="M 0,{center} L 100,{center}",r.apply(this,arguments)};(o.prototype=new r).constructor=o,o.prototype._initializeSvg=function(t,e){t.setAttribute("viewBox","0 0 100 "+e.strokeWidth),t.setAttribute("preserveAspectRatio","none")},o.prototype._pathString=function(t){return i.render(this._pathTemplate,{center:t.strokeWidth/2})},o.prototype._trailString=function(t){return this._pathString(t)},t.exports=o},86:(t,e,n)=>{t.exports={Line:n(688),Circle:n(534),SemiCircle:n(157),Square:n(681),Path:n(888),Shape:n(865),utils:n(128)}},888:(t,e,n)=>{var r=n(350),i=n(128),o=r.Tweenable,a={easeIn:"easeInCubic",easeOut:"easeOutCubic",easeInOut:"easeInOutCubic"},u=function t(e,n){if(!(this instanceof t))throw new Error("Constructor was called without new keyword");var r;n=i.extend({delay:0,duration:800,easing:"linear",from:{},to:{},step:function(){}},n),r=i.isString(e)?document.querySelector(e):e,this.path=r,this._opts=n,this._tweenable=null;var o=this.path.getTotalLength();this.path.style.strokeDasharray=o+" "+o,this.set(0)};u.prototype.value=function(){var t=this._getComputedDashOffset(),e=this.path.getTotalLength();return parseFloat((1-t/e).toFixed(6),10)},u.prototype.set=function(t){this.stop(),this.path.style.strokeDashoffset=this._progressToOffset(t);var e=this._opts.step;if(i.isFunction(e)){var n=this._easing(this._opts.easing);e(this._calculateTo(t,n),this._opts.shape||this,this._opts.attachment)}},u.prototype.stop=function(){this._stopTween(),this.path.style.strokeDashoffset=this._getComputedDashOffset()},u.prototype.animate=function(t,e,n){e=e||{},i.isFunction(e)&&(n=e,e={});var r=i.extend({},e),a=i.extend({},this._opts);e=i.extend(a,e);var u=this._easing(e.easing),s=this._resolveFromAndTo(t,u,r);this.stop(),this.path.getBoundingClientRect();var c=this._getComputedDashOffset(),l=this._progressToOffset(t),f=this;this._tweenable=new o,this._tweenable.tween({from:i.extend({offset:c},s.from),to:i.extend({offset:l},s.to),duration:e.duration,delay:e.delay,easing:u,step:function(t){f.path.style.strokeDashoffset=t.offset;var n=e.shape||f;e.step(t,n,e.attachment)}}).then((function(t){i.isFunction(n)&&n()}))},u.prototype._getComputedDashOffset=function(){var t=window.getComputedStyle(this.path,null);return parseFloat(t.getPropertyValue("stroke-dashoffset"),10)},u.prototype._progressToOffset=function(t){var e=this.path.getTotalLength();return e-t*e},u.prototype._resolveFromAndTo=function(t,e,n){return n.from&&n.to?{from:n.from,to:n.to}:{from:this._calculateFrom(e),to:this._calculateTo(t,e)}},u.prototype._calculateFrom=function(t){return r.interpolate(this._opts.from,this._opts.to,this.value(),t)},u.prototype._calculateTo=function(t,e){return r.interpolate(this._opts.from,this._opts.to,t,e)},u.prototype._stopTween=function(){null!==this._tweenable&&(this._tweenable.stop(),this._tweenable=null)},u.prototype._easing=function(t){return a.hasOwnProperty(t)?a[t]:t},t.exports=u},157:(t,e,n)=>{var r=n(865),i=n(534),o=n(128),a=function(t,e){this._pathTemplate="M 50,50 m -{radius},0 a {radius},{radius} 0 1 1 {2radius},0",this.containerAspectRatio=2,r.apply(this,arguments)};(a.prototype=new r).constructor=a,a.prototype._initializeSvg=function(t,e){t.setAttribute("viewBox","0 0 100 50")},a.prototype._initializeTextContainer=function(t,e,n){t.text.style&&(n.style.top="auto",n.style.bottom="0",t.text.alignToBottom?o.setStyle(n,"transform","translate(-50%, 0)"):o.setStyle(n,"transform","translate(-50%, 50%)"))},a.prototype._pathString=i.prototype._pathString,a.prototype._trailString=i.prototype._trailString,t.exports=a},865:(t,e,n)=>{var r=n(888),i=n(128),o="Object is destroyed",a=function t(e,n){if(!(this instanceof t))throw new Error("Constructor was called without new keyword");if(0!==arguments.length){this._opts=i.extend({color:"#555",strokeWidth:1,trailColor:null,trailWidth:null,fill:null,text:{style:{color:null,position:"absolute",left:"50%",top:"50%",padding:0,margin:0,transform:{prefix:!0,value:"translate(-50%, -50%)"}},autoStyleContainer:!0,alignToBottom:!0,value:null,className:"progressbar-text"},svgStyle:{display:"block",width:"100%"},warnings:!1},n,!0),i.isObject(n)&&void 0!==n.svgStyle&&(this._opts.svgStyle=n.svgStyle),i.isObject(n)&&i.isObject(n.text)&&void 0!==n.text.style&&(this._opts.text.style=n.text.style);var o,a=this._createSvgView(this._opts);if(!(o=i.isString(e)?document.querySelector(e):e))throw new Error("Container does not exist: "+e);this._container=o,this._container.appendChild(a.svg),this._opts.warnings&&this._warnContainerAspectRatio(this._container),this._opts.svgStyle&&i.setStyles(a.svg,this._opts.svgStyle),this.svg=a.svg,this.path=a.path,this.trail=a.trail,this.text=null;var u=i.extend({attachment:void 0,shape:this},this._opts);this._progressPath=new r(a.path,u),i.isObject(this._opts.text)&&null!==this._opts.text.value&&this.setText(this._opts.text.value)}};a.prototype.animate=function(t,e,n){if(null===this._progressPath)throw new Error(o);this._progressPath.animate(t,e,n)},a.prototype.stop=function(){if(null===this._progressPath)throw new Error(o);void 0!==this._progressPath&&this._progressPath.stop()},a.prototype.pause=function(){if(null===this._progressPath)throw new Error(o);void 0!==this._progressPath&&this._progressPath._tweenable&&this._progressPath._tweenable.pause()},a.prototype.resume=function(){if(null===this._progressPath)throw new Error(o);void 0!==this._progressPath&&this._progressPath._tweenable&&this._progressPath._tweenable.resume()},a.prototype.destroy=function(){if(null===this._progressPath)throw new Error(o);this.stop(),this.svg.parentNode.removeChild(this.svg),this.svg=null,this.path=null,this.trail=null,this._progressPath=null,null!==this.text&&(this.text.parentNode.removeChild(this.text),this.text=null)},a.prototype.set=function(t){if(null===this._progressPath)throw new Error(o);this._progressPath.set(t)},a.prototype.value=function(){if(null===this._progressPath)throw new Error(o);return void 0===this._progressPath?0:this._progressPath.value()},a.prototype.setText=function(t){if(null===this._progressPath)throw new Error(o);null===this.text&&(this.text=this._createTextContainer(this._opts,this._container),this._container.appendChild(this.text)),i.isObject(t)?(i.removeChildren(this.text),this.text.appendChild(t)):this.text.innerHTML=t},a.prototype._createSvgView=function(t){var e=document.createElementNS("http://www.w3.org/2000/svg","svg");this._initializeSvg(e,t);var n=null;(t.trailColor||t.trailWidth)&&(n=this._createTrail(t),e.appendChild(n));var r=this._createPath(t);return e.appendChild(r),{svg:e,path:r,trail:n}},a.prototype._initializeSvg=function(t,e){t.setAttribute("viewBox","0 0 100 100")},a.prototype._createPath=function(t){var e=this._pathString(t);return this._createPathElement(e,t)},a.prototype._createTrail=function(t){var e=this._trailString(t),n=i.extend({},t);return n.trailColor||(n.trailColor="#eee"),n.trailWidth||(n.trailWidth=n.strokeWidth),n.color=n.trailColor,n.strokeWidth=n.trailWidth,n.fill=null,this._createPathElement(e,n)},a.prototype._createPathElement=function(t,e){var n=document.createElementNS("http://www.w3.org/2000/svg","path");return n.setAttribute("d",t),n.setAttribute("stroke",e.color),n.setAttribute("stroke-width",e.strokeWidth),e.fill?n.setAttribute("fill",e.fill):n.setAttribute("fill-opacity","0"),n},a.prototype._createTextContainer=function(t,e){var n=document.createElement("div");n.className=t.text.className;var r=t.text.style;return r&&(t.text.autoStyleContainer&&(e.style.position="relative"),i.setStyles(n,r),r.color||(n.style.color=t.color)),this._initializeTextContainer(t,e,n),n},a.prototype._initializeTextContainer=function(t,e,n){},a.prototype._pathString=function(t){throw new Error("Override this function for each progress bar")},a.prototype._trailString=function(t){throw new Error("Override this function for each progress bar")},a.prototype._warnContainerAspectRatio=function(t){if(this.containerAspectRatio){var e=window.getComputedStyle(t,null),n=parseFloat(e.getPropertyValue("width"),10),r=parseFloat(e.getPropertyValue("height"),10);i.floatEquals(this.containerAspectRatio,n/r)||(console.warn("Incorrect aspect ratio of container","#"+t.id,"detected:",e.getPropertyValue("width")+"(width)","/",e.getPropertyValue("height")+"(height)","=",n/r),console.warn("Aspect ratio of should be",this.containerAspectRatio))}},t.exports=a},681:(t,e,n)=>{var r=n(865),i=n(128),o=function(t,e){this._pathTemplate="M 0,{halfOfStrokeWidth} L {width},{halfOfStrokeWidth} L {width},{width} L {halfOfStrokeWidth},{width} L {halfOfStrokeWidth},{strokeWidth}",this._trailTemplate="M {startMargin},{halfOfStrokeWidth} L {width},{halfOfStrokeWidth} L {width},{width} L {halfOfStrokeWidth},{width} L {halfOfStrokeWidth},{halfOfStrokeWidth}",r.apply(this,arguments)};(o.prototype=new r).constructor=o,o.prototype._pathString=function(t){var e=100-t.strokeWidth/2;return i.render(this._pathTemplate,{width:e,strokeWidth:t.strokeWidth,halfOfStrokeWidth:t.strokeWidth/2})},o.prototype._trailString=function(t){var e=100-t.strokeWidth/2;return i.render(this._trailTemplate,{width:e,strokeWidth:t.strokeWidth,halfOfStrokeWidth:t.strokeWidth/2,startMargin:t.strokeWidth/2-t.trailWidth/2})},t.exports=o},128:t=>{var e="Webkit Moz O ms".split(" ");function n(t,n,i){for(var o=t.style,a=0;a<e.length;++a)o[e[a]+r(n)]=i;o[n]=i}function r(t){return t.charAt(0).toUpperCase()+t.slice(1)}function i(t){return!function(t){return"[object Array]"===Object.prototype.toString.call(t)}(t)&&"object"==typeof t&&!!t}function o(t,e){for(var n in t)t.hasOwnProperty(n)&&e(t[n],n)}t.exports={extend:function t(e,n,r){for(var o in e=e||{},r=r||!1,n=n||{})if(n.hasOwnProperty(o)){var a=e[o],u=n[o];r&&i(a)&&i(u)?e[o]=t(a,u,r):e[o]=u}return e},render:function(t,e){var n=t;for(var r in e)if(e.hasOwnProperty(r)){var i=e[r],o=new RegExp("\\{"+r+"\\}","g");n=n.replace(o,i)}return n},setStyle:n,setStyles:function(t,e){o(e,(function(e,r){null!=e&&(i(e)&&!0===e.prefix?n(t,r,e.value):t.style[r]=e)}))},capitalize:r,isString:function(t){return"string"==typeof t||t instanceof String},isFunction:function(t){return"function"==typeof t},isObject:i,forEachObject:o,floatEquals:function(t,e){return Math.abs(t-e)<.001},removeChildren:function(t){for(;t.firstChild;)t.removeChild(t.firstChild)}}},350:t=>{self,t.exports=function(){"use strict";var t={720:function(t,e,n){n.r(e),n.d(e,{Scene:function(){return Zt},Tweenable:function(){return mt},interpolate:function(){return Qt},processTweens:function(){return ct},setBezierFunction:function(){return $t},shouldScheduleUpdate:function(){return ht},tween:function(){return bt},unsetBezierFunction:function(){return te}});var r={};n.r(r),n.d(r,{bounce:function(){return W},bouncePast:function(){return D},easeFrom:function(){return z},easeFromTo:function(){return N},easeInBack:function(){return O},easeInCirc:function(){return x},easeInCubic:function(){return c},easeInExpo:function(){return _},easeInOutBack:function(){return P},easeInOutCirc:function(){return T},easeInOutCubic:function(){return f},easeInOutExpo:function(){return S},easeInOutQuad:function(){return s},easeInOutQuart:function(){return d},easeInOutQuint:function(){return m},easeInOutSine:function(){return w},easeInQuad:function(){return a},easeInQuart:function(){return h},easeInQuint:function(){return v},easeInSine:function(){return b},easeOutBack:function(){return C},easeOutBounce:function(){return j},easeOutCirc:function(){return E},easeOutCubic:function(){return l},easeOutExpo:function(){return k},easeOutQuad:function(){return u},easeOutQuart:function(){return p},easeOutQuint:function(){return y},easeOutSine:function(){return g},easeTo:function(){return H},elastic:function(){return M},linear:function(){return o},swingFrom:function(){return A},swingFromTo:function(){return L},swingTo:function(){return I}});var i={};n.r(i),n.d(i,{afterTween:function(){return Bt},beforeTween:function(){return Ft},doesApply:function(){return zt},tweenCreated:function(){return Ht}});var o=function(t){return t},a=function(t){return Math.pow(t,2)},u=function(t){return-(Math.pow(t-1,2)-1)},s=function(t){return(t/=.5)<1?.5*Math.pow(t,2):-.5*((t-=2)*t-2)},c=function(t){return Math.pow(t,3)},l=function(t){return Math.pow(t-1,3)+1},f=function(t){return(t/=.5)<1?.5*Math.pow(t,3):.5*(Math.pow(t-2,3)+2)},h=function(t){return Math.pow(t,4)},p=function(t){return-(Math.pow(t-1,4)-1)},d=function(t){return(t/=.5)<1?.5*Math.pow(t,4):-.5*((t-=2)*Math.pow(t,3)-2)},v=function(t){return Math.pow(t,5)},y=function(t){return Math.pow(t-1,5)+1},m=function(t){return(t/=.5)<1?.5*Math.pow(t,5):.5*(Math.pow(t-2,5)+2)},b=function(t){return 1-Math.cos(t*(Math.PI/2))},g=function(t){return Math.sin(t*(Math.PI/2))},w=function(t){return-.5*(Math.cos(Math.PI*t)-1)},_=function(t){return 0===t?0:Math.pow(2,10*(t-1))},k=function(t){return 1===t?1:1-Math.pow(2,-10*t)},S=function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*--t))},x=function(t){return-(Math.sqrt(1-t*t)-1)},E=function(t){return Math.sqrt(1-Math.pow(t-1,2))},T=function(t){return(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},j=function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},O=function(t){var e=1.70158;return t*t*((e+1)*t-e)},C=function(t){var e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},P=function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},M=function(t){return-1*Math.pow(4,-8*t)*Math.sin((6*t-1)*(2*Math.PI)/2)+1},L=function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},A=function(t){var e=1.70158;return t*t*((e+1)*t-e)},I=function(t){var e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},W=function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},D=function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?2-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?2-(7.5625*(t-=2.25/2.75)*t+.9375):2-(7.5625*(t-=2.625/2.75)*t+.984375)},N=function(t){return(t/=.5)<1?.5*Math.pow(t,4):-.5*((t-=2)*Math.pow(t,3)-2)},z=function(t){return Math.pow(t,4)},H=function(t){return Math.pow(t,.25)};function F(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function B(t){return(B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function V(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function R(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?V(Object(n),!0).forEach((function(e){G(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):V(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function G(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var q,U,Q,Y="linear",K="undefined"!=typeof window?window:n.g,J="afterTween",X="afterTweenEnd",Z="beforeTween",$="tweenCreated",tt="function",et="string",nt=K.requestAnimationFrame||K.webkitRequestAnimationFrame||K.oRequestAnimationFrame||K.msRequestAnimationFrame||K.mozCancelRequestAnimationFrame&&K.mozRequestAnimationFrame||setTimeout,rt=function(){},it=null,ot=null,at=R({},r),ut=function(t,e,n,r,i,o,a){var u,s,c,l=t<o?0:(t-o)/i,f=!1;for(var h in a&&a.call&&(f=!0,u=a(l)),e)f||(u=((s=a[h]).call?s:at[s])(l)),c=n[h],e[h]=c+(r[h]-c)*u;return e},st=function(t,e){var n=t._timestamp,r=t._currentState,i=t._delay;if(!(e<n+i)){var o=t._duration,a=t._targetState,u=n+i+o,s=e>u?u:e;t._hasEnded=s>=u;var c=o-(u-s),l=t._filters.length>0;if(t._hasEnded)return t._render(a,t._data,c),t.stop(!0);l&&t._applyFilter(Z),s<n+i?n=o=s=1:n+=i,ut(s,r,t._originalState,a,o,n,t._easing),l&&t._applyFilter(J),t._render(r,t._data,c)}},ct=function(){for(var t,e=mt.now(),n=it;n;)t=n._next,st(n,e),n=t},lt=Date.now||function(){return+new Date},ft=!1,ht=function(t){t&&ft||(ft=t,t&&pt())},pt=function t(){q=lt(),ft&&nt.call(K,t,16.666666666666668),ct()},dt=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Y,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=B(e);if(at[e])return at[e];if(r===et||r===tt)for(var i in t)n[i]=e;else for(var o in t)n[o]=e[o]||Y;return n},vt=function(t){t===it?(it=t._next)?it._previous=null:ot=null:t===ot?(ot=t._previous)?ot._next=null:it=null:(U=t._previous,Q=t._next,U._next=Q,Q._previous=U),t._previous=t._next=null},yt="function"==typeof Promise?Promise:null,mt=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;F(this,t),this._config={},this._data={},this._delay=0,this._filters=[],this._next=null,this._previous=null,this._timestamp=null,this._hasEnded=!1,this._resolve=null,this._reject=null,this._currentState=e||{},this._originalState={},this._targetState={},this._start=rt,this._render=rt,this._promiseCtor=yt,n&&this.setConfig(n)}var e;return(e=[{key:"_applyFilter",value:function(t){for(var e=this._filters.length;e>0;e--){var n=this._filters[e-e][t];n&&n(this)}}},{key:"tween",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;return this._isPlaying&&this.stop(),!e&&this._config||this.setConfig(e),this._pausedAtTime=null,this._timestamp=t.now(),this._start(this.get(),this._data),this._delay&&this._render(this._currentState,this._data,0),this._resume(this._timestamp)}},{key:"setConfig",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=this._config;for(var r in e)n[r]=e[r];var i=n.promise,o=void 0===i?this._promiseCtor:i,a=n.start,u=void 0===a?rt:a,s=n.finish,c=n.render,l=void 0===c?this._config.step||rt:c,f=n.step,h=void 0===f?rt:f;this._data=n.data||n.attachment||this._data,this._isPlaying=!1,this._pausedAtTime=null,this._scheduleId=null,this._delay=e.delay||0,this._start=u,this._render=l||h,this._duration=n.duration||500,this._promiseCtor=o,s&&(this._resolve=s);var p=e.from,d=e.to,v=void 0===d?{}:d,y=this._currentState,m=this._originalState,b=this._targetState;for(var g in p)y[g]=p[g];var w=!1;for(var _ in y){var k=y[_];w||B(k)!==et||(w=!0),m[_]=k,b[_]=v.hasOwnProperty(_)?v[_]:k}if(this._easing=dt(this._currentState,n.easing,this._easing),this._filters.length=0,w){for(var S in t.filters)t.filters[S].doesApply(this)&&this._filters.push(t.filters[S]);this._applyFilter($)}return this}},{key:"then",value:function(t,e){var n=this;return this._promise=new this._promiseCtor((function(t,e){n._resolve=t,n._reject=e})),this._promise.then(t,e)}},{key:"catch",value:function(t){return this.then().catch(t)}},{key:"get",value:function(){return R({},this._currentState)}},{key:"set",value:function(t){this._currentState=t}},{key:"pause",value:function(){if(this._isPlaying)return this._pausedAtTime=t.now(),this._isPlaying=!1,vt(this),this}},{key:"resume",value:function(){return this._resume()}},{key:"_resume",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t.now();return null===this._timestamp?this.tween():this._isPlaying?this._promise:(this._pausedAtTime&&(this._timestamp+=e-this._pausedAtTime,this._pausedAtTime=null),this._isPlaying=!0,null===it?(it=this,ot=this):(this._previous=ot,ot._next=this,ot=this),this)}},{key:"seek",value:function(e){e=Math.max(e,0);var n=t.now();return this._timestamp+e===0||(this._timestamp=n-e,st(this,n)),this}},{key:"stop",value:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!this._isPlaying)return this;this._isPlaying=!1,vt(this);var e=this._filters.length>0;return t&&(e&&this._applyFilter(Z),ut(1,this._currentState,this._originalState,this._targetState,1,0,this._easing),e&&(this._applyFilter(J),this._applyFilter(X))),this._resolve&&this._resolve({data:this._data,state:this._currentState,tweenable:this}),this._resolve=null,this._reject=null,this}},{key:"cancel",value:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=this._currentState,n=this._data;return this._isPlaying?(this._reject&&this._reject({data:n,state:e,tweenable:this}),this._resolve=null,this._reject=null,this.stop(t)):this}},{key:"isPlaying",value:function(){return this._isPlaying}},{key:"hasEnded",value:function(){return this._hasEnded}},{key:"setScheduleFunction",value:function(e){t.setScheduleFunction(e)}},{key:"data",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return t&&(this._data=R({},t)),this._data}},{key:"dispose",value:function(){for(var t in this)delete this[t]}}])&&function(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}(t.prototype,e),t}();function bt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=new mt;return e.tween(t),e.tweenable=e,e}G(mt,"now",(function(){return q})),G(mt,"setScheduleFunction",(function(t){return nt=t})),G(mt,"filters",{}),G(mt,"formulas",at),ht(!0);var gt,wt,_t=/(\d|-|\.)/,kt=/([^\-0-9.]+)/g,St=/[0-9.-]+/g,xt=(gt=St.source,wt=/,\s*/.source,new RegExp("rgba?\\(".concat(gt).concat(wt).concat(gt).concat(wt).concat(gt,"(").concat(wt).concat(gt,")?\\)"),"g")),Et=/^.*\(/,Tt=/#([0-9]|[a-f]){3,6}/gi,jt="VAL",Ot=function(t,e){return t.map((function(t,n){return"_".concat(e,"_").concat(n)}))};function Ct(t){return parseInt(t,16)}var Pt=function(t){return"rgb(".concat((e=t,3===(e=e.replace(/#/,"")).length&&(e=(e=e.split(""))[0]+e[0]+e[1]+e[1]+e[2]+e[2]),[Ct(e.substr(0,2)),Ct(e.substr(2,2)),Ct(e.substr(4,2))]).join(","),")");var e},Mt=function(t,e,n){var r=e.match(t),i=e.replace(t,jt);return r&&r.forEach((function(t){return i=i.replace(jt,n(t))})),i},Lt=function(t){for(var e in t){var n=t[e];"string"==typeof n&&n.match(Tt)&&(t[e]=Mt(Tt,n,Pt))}},At=function(t){var e=t.match(St),n=e.slice(0,3).map(Math.floor),r=t.match(Et)[0];if(3===e.length)return"".concat(r).concat(n.join(","),")");if(4===e.length)return"".concat(r).concat(n.join(","),",").concat(e[3],")");throw new Error("Invalid rgbChunk: ".concat(t))},It=function(t){return t.match(St)},Wt=function(t,e){var n={};return e.forEach((function(e){n[e]=t[e],delete t[e]})),n},Dt=function(t,e){return e.map((function(e){return t[e]}))},Nt=function(t,e){return e.forEach((function(e){return t=t.replace(jt,+e.toFixed(4))})),t},zt=function(t){for(var e in t._currentState)if("string"==typeof t._currentState[e])return!0;return!1};function Ht(t){var e=t._currentState;[e,t._originalState,t._targetState].forEach(Lt),t._tokenData=function(t){var e,n,r={};for(var i in t){var o=t[i];"string"==typeof o&&(r[i]={formatString:(e=o,n=void 0,n=e.match(kt),n?(1===n.length||e.charAt(0).match(_t))&&n.unshift(""):n=["",""],n.join(jt)),chunkNames:Ot(It(o),i)})}return r}(e)}function Ft(t){var e=t._currentState,n=t._originalState,r=t._targetState,i=t._easing,o=t._tokenData;!function(t,e){var n=function(n){var r=e[n].chunkNames,i=t[n];if("string"==typeof i){var o=i.split(" "),a=o[o.length-1];r.forEach((function(e,n){return t[e]=o[n]||a}))}else r.forEach((function(e){return t[e]=i}));delete t[n]};for(var r in e)n(r)}(i,o),[e,n,r].forEach((function(t){return function(t,e){var n=function(n){It(t[n]).forEach((function(r,i){return t[e[n].chunkNames[i]]=+r})),delete t[n]};for(var r in e)n(r)}(t,o)}))}function Bt(t){var e=t._currentState,n=t._originalState,r=t._targetState,i=t._easing,o=t._tokenData;[e,n,r].forEach((function(t){return function(t,e){for(var n in e){var r=e[n],i=r.chunkNames,o=r.formatString,a=Nt(o,Dt(Wt(t,i),i));t[n]=Mt(xt,a,At)}}(t,o)})),function(t,e){for(var n in e){var r=e[n].chunkNames,i=t[r[0]];t[n]="string"==typeof i?r.map((function(e){var n=t[e];return delete t[e],n})).join(" "):i}}(i,o)}function Vt(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Rt(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Vt(Object(n),!0).forEach((function(e){Gt(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Vt(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Gt(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var qt=new mt,Ut=mt.filters,Qt=function(t,e,n,r){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,o=Rt({},t),a=dt(t,r);for(var u in qt._filters.length=0,qt.set({}),qt._currentState=o,qt._originalState=t,qt._targetState=e,qt._easing=a,Ut)Ut[u].doesApply(qt)&&qt._filters.push(Ut[u]);qt._applyFilter("tweenCreated"),qt._applyFilter("beforeTween");var s=ut(n,o,t,e,1,i,a);return qt._applyFilter("afterTween"),s};function Yt(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Kt(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Jt(t,e){var n=e.get(t);if(!n)throw new TypeError("attempted to get private field on non-instance");return n.get?n.get.call(t):n.value}var Xt=new WeakMap,Zt=function(){function t(){Kt(this,t),Xt.set(this,{writable:!0,value:[]});for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];n.forEach(this.add.bind(this))}var e;return(e=[{key:"add",value:function(t){return Jt(this,Xt).push(t),t}},{key:"remove",value:function(t){var e=Jt(this,Xt).indexOf(t);return~e&&Jt(this,Xt).splice(e,1),t}},{key:"empty",value:function(){return this.tweenables.map(this.remove.bind(this))}},{key:"isPlaying",value:function(){return Jt(this,Xt).some((function(t){return t.isPlaying()}))}},{key:"play",value:function(){return Jt(this,Xt).forEach((function(t){return t.tween()})),this}},{key:"pause",value:function(){return Jt(this,Xt).forEach((function(t){return t.pause()})),this}},{key:"resume",value:function(){return Jt(this,Xt).forEach((function(t){return t.resume()})),this}},{key:"stop",value:function(t){return Jt(this,Xt).forEach((function(e){return e.stop(t)})),this}},{key:"tweenables",get:function(){return function(t){if(Array.isArray(t))return Yt(t)}(t=Jt(this,Xt))||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return Yt(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Yt(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();var t}},{key:"promises",get:function(){return Jt(this,Xt).map((function(t){return t.then()}))}}])&&function(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}(t.prototype,e),t}(),$t=function(t,e,n,r,i){var o=function(t,e,n,r){return function(i){return l=0,f=0,h=0,p=function(t){return((l*t+f)*t+h)*t},d=function(t){return(3*l*t+2*f)*t+h},v=function(t){return t>=0?t:0-t},l=1-(h=3*(o=t))-(f=3*(n-o)-h),u=1-(c=3*(a=e))-(s=3*(r-a)-c),function(t){return((u*t+s)*t+c)*t}(function(t,e){var n,r,i,o,a,u;for(i=t,u=0;u<8;u++){if(o=p(i)-t,v(o)<.005)return i;if(a=d(i),v(a)<1e-6)break;i-=o/a}if((i=t)<(n=0))return n;if(i>(r=1))return r;for(;n<r;){if(o=p(i),v(o-t)<.005)return i;t>o?n=i:r=i,i=.5*(r-n)+n}return i}(i));var o,a,u,s,c,l,f,h,p,d,v}}(e,n,r,i);return o.displayName=t,o.x1=e,o.y1=n,o.x2=r,o.y2=i,mt.formulas[t]=o},te=function(t){return delete mt.formulas[t]};mt.filters.token=i}},e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}return n.d=function(t,e){for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(720)}()}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}(()=>{"use strict";var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};function e(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}var r=function(){return r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},r.apply(this,arguments)};function i(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}}function o(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function a(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function u(t,e,n){if(n||2===arguments.length)for(var r,i=0,o=e.length;i<o;i++)!r&&i in e||(r||(r=Array.prototype.slice.call(e,0,i)),r[i]=e[i]);return t.concat(r||Array.prototype.slice.call(e))}function s(t){return this instanceof s?(this.v=t,this):new s(t)}function c(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(t){i[t]&&(r[t]=function(e){return new Promise((function(n,r){o.push([t,e,n,r])>1||u(t,e)}))})}function u(t,e){try{(n=i[t](e)).value instanceof s?Promise.resolve(n.value.v).then(c,l):f(o[0][2],n)}catch(t){f(o[0][3],t)}var n}function c(t){u("next",t)}function l(t){u("throw",t)}function f(t,e){t(e),o.shift(),o.length&&u(o[0][0],o[0][1])}}Object.create,Object.create;var l=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function f(t){return"function"==typeof t}function h(t){return f(null==t?void 0:t.then)}var p,d=((p=function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}((function(t){Error.call(t),t.stack=(new Error).stack}))).prototype=Object.create(Error.prototype),p.prototype.constructor=p,p);function v(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var y=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}return t.prototype.unsubscribe=function(){var t,e,n,r,i;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var c=o(s),l=c.next();!l.done;l=c.next())l.value.remove(this)}catch(e){t={error:e}}finally{try{l&&!l.done&&(e=c.return)&&e.call(c)}finally{if(t)throw t.error}}else s.remove(this);var h=this.initialTeardown;if(f(h))try{h()}catch(t){i=t instanceof d?t.errors:[t]}var p=this._finalizers;if(p){this._finalizers=null;try{for(var v=o(p),y=v.next();!y.done;y=v.next()){var m=y.value;try{b(m)}catch(t){i=null!=i?i:[],t instanceof d?i=u(u([],a(i)),a(t.errors)):i.push(t)}}}catch(t){n={error:t}}finally{try{y&&!y.done&&(r=v.return)&&r.call(v)}finally{if(n)throw n.error}}}if(i)throw new d(i)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)b(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&v(e,t)},t.prototype.remove=function(e){var n=this._finalizers;n&&v(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t;var e}();function m(t){return t instanceof y||t&&"closed"in t&&f(t.remove)&&f(t.add)&&f(t.unsubscribe)}function b(t){f(t)?t():t.unsubscribe()}y.EMPTY;var g=null,w=null,_=void 0,k=!1,S=!1,x={setTimeout:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=x.delegate;return(null==i?void 0:i.setTimeout)?i.setTimeout.apply(i,u([t,e],a(n))):setTimeout.apply(void 0,u([t,e],a(n)))},clearTimeout:function(t){var e=x.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function E(t){x.setTimeout((function(){if(!g)throw t;g(t)}))}function T(){}var j=O("C",void 0,void 0);function O(t,e,n){return{kind:t,value:e,error:n}}var C=null,P=function(t){function n(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,m(e)&&e.add(n)):n.destination=N,n}return e(n,t),n.create=function(t,e,n){return new I(t,e,n)},n.prototype.next=function(t){this.isStopped?D(function(t){return O("N",t,void 0)}(t),this):this._next(t)},n.prototype.error=function(t){this.isStopped?D(O("E",void 0,t),this):(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped?D(j,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(y),M=Function.prototype.bind;function L(t,e){return M.call(t,e)}var A=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){W(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){W(t)}else W(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){W(t)}},t}(),I=function(t){function n(e,n,r){var i,o,a=t.call(this)||this;return f(e)||!e?i={next:null!=e?e:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:a&&S?((o=Object.create(e)).unsubscribe=function(){return a.unsubscribe()},i={next:e.next&&L(e.next,o),error:e.error&&L(e.error,o),complete:e.complete&&L(e.complete,o)}):i=e,a.destination=new A(i),a}return e(n,t),n}(P);function W(t){var e;k?(e=t,k&&C&&(C.errorThrown=!0,C.error=e)):E(t)}function D(t,e){var n=w;n&&x.setTimeout((function(){return n(t,e)}))}var N={closed:!0,next:T,error:function(t){throw t},complete:T},z="function"==typeof Symbol&&Symbol.observable||"@@observable";function H(t){return t}function F(t){return 0===t.length?H:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var B=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,i=this,o=(r=t)&&r instanceof P||function(t){return t&&f(t.next)&&f(t.error)&&f(t.complete)}(r)&&m(r)?t:new I(t,e,n);return function(t){if(k){var e=!C;if(e&&(C={errorThrown:!1,error:null}),t(),e){var n=C,r=n.errorThrown,i=n.error;if(C=null,r)throw i}}else t()}((function(){var t=i,e=t.operator,n=t.source;o.add(e?e.call(o,n):n?i._subscribe(o):i._trySubscribe(o))})),o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=V(e))((function(e,r){var i=new I({next:function(e){try{t(e)}catch(t){r(t),i.unsubscribe()}},error:r,complete:e});n.subscribe(i)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[z]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return F(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=V(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function V(t){var e;return null!==(e=null!=t?t:_)&&void 0!==e?e:Promise}function R(t){return f(t[z])}function G(t){return Symbol.asyncIterator&&f(null==t?void 0:t[Symbol.asyncIterator])}function q(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var U="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function Q(t){return f(null==t?void 0:t[U])}function Y(t){return c(this,arguments,(function(){var e,n,r;return i(this,(function(i){switch(i.label){case 0:e=t.getReader(),i.label=1;case 1:i.trys.push([1,,9,10]),i.label=2;case 2:return[4,s(e.read())];case 3:return n=i.sent(),r=n.value,n.done?[4,s(void 0)]:[3,5];case 4:return[2,i.sent()];case 5:return[4,s(r)];case 6:return[4,i.sent()];case 7:return i.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function K(t){return f(null==t?void 0:t.getReader)}function J(t){if(t instanceof B)return t;if(null!=t){if(R(t))return i=t,new B((function(t){var e=i[z]();if(f(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(l(t))return r=t,new B((function(t){for(var e=0;e<r.length&&!t.closed;e++)t.next(r[e]);t.complete()}));if(h(t))return n=t,new B((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,E)}));if(G(t))return X(t);if(Q(t))return e=t,new B((function(t){var n,r;try{for(var i=o(e),a=i.next();!a.done;a=i.next()){var u=a.value;if(t.next(u),t.closed)return}}catch(t){n={error:t}}finally{try{a&&!a.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}t.complete()}));if(K(t))return X(Y(t))}var e,n,r,i;throw q(t)}function X(t){return new B((function(e){(function(t,e){var n,r,a,u,s,c,l,f;return s=this,c=void 0,f=function(){var s,c;return i(this,(function(i){switch(i.label){case 0:i.trys.push([0,5,6,11]),n=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=o(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,i,(e=t[n](e)).done,e.value)}))}}}(t),i.label=1;case 1:return[4,n.next()];case 2:if((r=i.sent()).done)return[3,4];if(s=r.value,e.next(s),e.closed)return[2];i.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return c=i.sent(),a={error:c},[3,11];case 6:return i.trys.push([6,,9,10]),r&&!r.done&&(u=n.return)?[4,u.call(n)]:[3,8];case 7:i.sent(),i.label=8;case 8:return[3,10];case 9:if(a)throw a.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,e){function n(t){try{i(f.next(t))}catch(t){e(t)}}function r(t){try{i(f.throw(t))}catch(t){e(t)}}function i(e){var i;e.done?t(e.value):(i=e.value,i instanceof l?i:new l((function(t){t(i)}))).then(n,r)}i((f=f.apply(s,c||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function Z(t){return function(e){if(function(t){return f(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function $(t,e,n,r,i){return new tt(t,e,n,r,i)}var tt=function(t){function n(e,n,r,i,o,a){var u=t.call(this,e)||this;return u.onFinalize=o,u.shouldUnsubscribe=a,u._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,u._error=i?function(t){try{i(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return e(n,t),n.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},n}(P);function et(t,e){return Z((function(n,r){var i=0;n.subscribe($(r,(function(n){r.next(t.call(e,n,i++))})))}))}function nt(t,e,n,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=e.schedule((function(){n(),i?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(o),!i)return o}function rt(t,e,n){return void 0===n&&(n=1/0),f(e)?rt((function(n,r){return et((function(t,i){return e(n,t,r,i)}))(J(t(n,r)))}),n):("number"==typeof e&&(n=e),Z((function(e,r){return function(t,e,n,r,i,o,a,u){var s=[],c=0,l=0,f=!1,h=function(){!f||s.length||c||e.complete()},p=function(t){return c<r?d(t):s.push(t)},d=function(t){c++;var i=!1;J(n(t,l++)).subscribe($(e,(function(t){e.next(t)}),(function(){i=!0}),void 0,(function(){if(i)try{c--;for(;s.length&&c<r;)t=void 0,t=s.shift(),d(t);h()}catch(t){e.error(t)}var t})))};return t.subscribe($(e,p,(function(){f=!0,h()}))),function(){}}(e,r,t,n)})))}var it=Array.isArray;function ot(t){return et((function(e){return function(t,e){return it(e)?t.apply(void 0,u([],a(e))):t(e)}(t,e)}))}var at=["addListener","removeListener"],ut=["addEventListener","removeEventListener"],st=["on","off"];function ct(t,e,n,r){if(f(n)&&(r=n,n=void 0),r)return ct(t,e,n).pipe(ot(r));var i=a(function(t){return f(t.addEventListener)&&f(t.removeEventListener)}(t)?ut.map((function(r){return function(i){return t[r](e,i,n)}})):function(t){return f(t.addListener)&&f(t.removeListener)}(t)?at.map(lt(t,e)):function(t){return f(t.on)&&f(t.off)}(t)?st.map(lt(t,e)):[],2),o=i[0],u=i[1];if(!o&&l(t))return rt((function(t){return ct(t,e,n)}))(J(t));if(!o)throw new TypeError("Invalid event target");return new B((function(t){var e=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.next(1<e.length?e:e[0])};return o(e),function(){return u(e)}}))}function lt(t,e){return function(n){return function(r){return t[n](e,r)}}}var ft=Array.isArray;function ht(t){return 1===t.length&&ft(t[0])?t[0]:t}var pt=new B((function(t){return t.complete()}));function dt(t){return t&&f(t.schedule)}function vt(t){return t[t.length-1]}function yt(t){return f(vt(t))?t.pop():void 0}function mt(t){return dt(vt(t))?t.pop():void 0}var bt=function(t){function n(e,n){return t.call(this)||this}return e(n,t),n.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},n}(y),gt={setInterval:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=gt.delegate;return(null==i?void 0:i.setInterval)?i.setInterval.apply(i,u([t,e],a(n))):setInterval.apply(void 0,u([t,e],a(n)))},clearInterval:function(t){var e=gt.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},wt=function(t){function n(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return e(n,t),n.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},n.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),gt.setInterval(t.flush.bind(t,this),n)},n.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return e;gt.clearInterval(e)},n.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,e){var n,r=!1;try{this.work(t)}catch(t){r=!0,n=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},n.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,v(r,this),null!=e&&(this.id=this.recycleAsyncId(n,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},n}(bt),_t={now:function(){return(_t.delegate||Date).now()},delegate:void 0},kt=function(){function t(e,n){void 0===n&&(n=t.now),this.schedulerActionCtor=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(n,e)},t.now=_t.now,t}(),St=new(function(t){function n(e,n){void 0===n&&(n=kt.now);var r=t.call(this,e,n)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return e(n,t),n.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var n;this._active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},n}(kt))(wt),xt=St;function Et(t,e,n){void 0===t&&(t=0),void 0===n&&(n=xt);var r=-1;return null!=e&&(dt(e)?n=e:r=e),new B((function(e){var i,o=(i=t)instanceof Date&&!isNaN(i)?+t-n.now():t;o<0&&(o=0);var a=0;return n.schedule((function(){e.closed||(e.next(a++),0<=r?this.schedule(void 0,r):e.complete())}),o)}))}function Tt(t,e){return void 0===e&&(e=0),Z((function(n,r){n.subscribe($(r,(function(n){return nt(r,t,(function(){return r.next(n)}),e)}),(function(){return nt(r,t,(function(){return r.complete()}),e)}),(function(n){return nt(r,t,(function(){return r.error(n)}),e)})))}))}function jt(t,e){return void 0===e&&(e=0),Z((function(n,r){r.add(t.schedule((function(){return n.subscribe(r)}),e))}))}function Ot(t,e){if(!t)throw new Error("Iterable cannot be null");return new B((function(n){nt(n,e,(function(){var r=t[Symbol.asyncIterator]();nt(n,e,(function(){r.next().then((function(t){t.done?n.complete():n.next(t.value)}))}),0,!0)}))}))}function Ct(t,e){return e?function(t,e){if(null!=t){if(R(t))return function(t,e){return J(t).pipe(jt(e),Tt(e))}(t,e);if(l(t))return function(t,e){return new B((function(n){var r=0;return e.schedule((function(){r===t.length?n.complete():(n.next(t[r++]),n.closed||this.schedule())}))}))}(t,e);if(h(t))return function(t,e){return J(t).pipe(jt(e),Tt(e))}(t,e);if(G(t))return Ot(t,e);if(Q(t))return function(t,e){return new B((function(n){var r;return nt(n,e,(function(){r=t[U](),nt(n,e,(function(){var t,e,i;try{e=(t=r.next()).value,i=t.done}catch(t){return void n.error(t)}i?n.complete():n.next(e)}),0,!0)})),function(){return f(null==r?void 0:r.return)&&r.return()}}))}(t,e);if(K(t))return function(t,e){return Ot(Y(t),e)}(t,e)}throw q(t)}(t,e):J(t)}function Pt(){return void 0===(t=1)&&(t=1/0),rt(H,t);var t}function Mt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return Pt()(Ct(t,mt(t)))}function Lt(t){return t<=0?function(){return pt}:Z((function(e,n){var r=0;e.subscribe($(n,(function(e){++r<=t&&(n.next(e),t<=r&&n.complete())})))}))}function At(t){return et((function(){return t}))}function It(t,e){return e?function(n){return Mt(e.pipe(Lt(1),Z((function(t,e){t.subscribe($(e,T))}))),n.pipe(It(t)))}:rt((function(e,n){return t(e,n).pipe(Lt(1),At(e))}))}function Wt(t,e){void 0===e&&(e=St);var n=Et(t,e);return It((function(){return n}))}function Dt(t,e,n){var r=f(t)||e||n?{next:t,error:e,complete:n}:t;return r?Z((function(t,e){var n;null===(n=r.subscribe)||void 0===n||n.call(r);var i=!0;t.subscribe($(e,(function(t){var n;null===(n=r.next)||void 0===n||n.call(r,t),e.next(t)}),(function(){var t;i=!1,null===(t=r.complete)||void 0===t||t.call(r),e.complete()}),(function(t){var n;i=!1,null===(n=r.error)||void 0===n||n.call(r,t),e.error(t)}),(function(){var t,e;i&&(null===(t=r.unsubscribe)||void 0===t||t.call(r)),null===(e=r.finalize)||void 0===e||e.call(r)})))})):H}function Nt(t,e,n,r,i){return function(o,a){var u=n,s=e,c=0;o.subscribe($(a,(function(e){var n=c++;s=u?t(s,e,n):(u=!0,e),r&&a.next(s)}),i&&function(){u&&a.next(s),a.complete()}))}}var zt=Array.isArray,Ht=Object.getPrototypeOf,Ft=Object.prototype,Bt=Object.keys;function Vt(t){if(1===t.length){var e=t[0];if(zt(e))return{args:e,keys:null};if((r=e)&&"object"==typeof r&&Ht(r)===Ft){var n=Bt(e);return{args:n.map((function(t){return e[t]})),keys:n}}}var r;return{args:t,keys:null}}function Rt(t,e){return t.reduce((function(t,n,r){return t[n]=e[r],t}),{})}function Gt(t,e,n){return void 0===n&&(n=H),function(r){qt(e,(function(){for(var i=t.length,o=new Array(i),a=i,u=i,s=function(i){qt(e,(function(){var s=Ct(t[i],e),c=!1;s.subscribe($(r,(function(t){o[i]=t,c||(c=!0,u--),u||r.next(n(o.slice()))}),(function(){--a||r.complete()})))}),r)},c=0;c<i;c++)s(c)}),r)}}function qt(t,e,n){t?nt(n,t,e):e()}var Ut=function(t,e,n,r,i){this.nickName=t,this.firstGameTimerValue=e,this.secondGameScoreValue=n,this.thirdGameScoreValue=r,this.datePlayed=i};var Qt,Yt,Kt="http://localhost:3000/";function Jt(t,e,n,i,o,a){!function(t){var e,n,r,i;e=this,n=void 0,i=function(){return function(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}}(this,(function(e){switch(e.label){case 0:return[4,fetch(Kt+"users",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})];case 1:return[2,e.sent().json()]}}))},new((r=void 0)||(r=Promise))((function(t,o){function a(t){try{s(i.next(t))}catch(t){o(t)}}function u(t){try{s(i.throw(t))}catch(t){o(t)}}function s(e){var n;e.done?t(e.value):(n=e.value,n instanceof r?n:new r((function(t){t(n)}))).then(a,u)}s((i=i.apply(e,n||[])).next())}))}(Qt=new Ut(n,i,o,a,(new Date).toLocaleString()));var u,s=function(t,e){void 0===e&&(e={});var n=e.selector,i=function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n}(e,["selector"]);return new B((function(e){var o=new AbortController,a=o.signal,u=!0,s=i.signal;if(s)if(s.aborted)o.abort();else{var c=function(){a.aborted||o.abort()};s.addEventListener("abort",c),e.add((function(){return s.removeEventListener("abort",c)}))}var l=r(r({},i),{signal:a}),f=function(t){u=!1,e.error(t)};return fetch(t,l).then((function(t){n?J(n(t)).subscribe($(e,void 0,(function(){u=!1,e.complete()}),f)):(u=!1,e.next(t),e.complete())})).catch(f),function(){u&&o.abort()}}))}(Kt+"users").pipe((u=function(t){if(t.ok)return t.json()},Z((function(t,e){var n=null,r=!1,i=function(){return r&&!n&&e.complete()};t.subscribe($(e,(function(t){null==n||n.unsubscribe();0;J(u(t)).subscribe(n=$(e,(function(t){return e.next(t)}),(function(){n=null,i()})))}),(function(){r=!0,i()})))}))));s.subscribe((function(t){return Yt=t.length})),s.subscribe((function(t){return Yt=t.length})),s.pipe(et((function(t){return t.filter((function(t){return t.firstGameTimerValue>=Qt.firstGameTimerValue}))}))).subscribe({next:function(t){Xt(t,e,1)}}),s.pipe(et((function(t){return t.filter((function(t){return t.secondGameScoreValue<=Qt.secondGameScoreValue}))}))).subscribe({next:function(t){Xt(t,e,2)}}),s.pipe(et((function(t){return t.filter((function(t){return t.thirdGameScoreValue<=Qt.thirdGameScoreValue}))}))).subscribe({next:function(t){Xt(t,e,3)}})}function Xt(t,e,n){var r=document.createElement("label");r.style.fontSize="20px",e.appendChild(r);var i=document.createElement("table");e.appendChild(i);var o=document.createElement("tr");i.appendChild(o);var a=document.createElement("th");a.innerHTML="Nick Name",o.appendChild(a);var u=document.createElement("th");u.innerHTML="Vreme prve igre",o.appendChild(u);var s=document.createElement("th");s.innerHTML="Skor druge igre",o.appendChild(s);var c=document.createElement("th");c.innerHTML="Skor treće igre",o.appendChild(c);var l=document.createElement("th");l.innerHTML="Datum igranja",o.appendChild(l),t.reverse(),1==n?(t.sort((function(t,e){return t.firstGameTimerValue-e.firstGameTimerValue})),r.innerHTML="Tabela za prikaz igrača sortiranih po prvoj igri"):2==n?(t.sort((function(t,e){return e.secondGameScoreValue-t.secondGameScoreValue})),r.innerHTML="Tabela za prikaz igrača sortiranih po drugoj igri"):(t.sort((function(t,e){return e.thirdGameScoreValue-t.thirdGameScoreValue})),r.innerHTML="Tabela za prikaz igrača sortiranih po trećoj igri"),t.slice(0,5).forEach((function(t){var e=document.createElement("tr");i.appendChild(e),console.log(Yt),t.id==Yt&&(e.style.background="#97ccc2");var n=document.createElement("td");n.innerHTML=t.nickName,e.appendChild(n);var r,o,a,u,s=document.createElement("td");s.innerHTML=(r=t.firstGameTimerValue,o=Math.floor(r/6e3),a=Math.floor((r-6*o*1e3)/100),u=r-6*o*1e3-100*a,o<10&&(o="0"+o),a<10&&(a="0"+a),u<10&&(u="0"+u),o+":"+a+"."+u),e.appendChild(s);var c=document.createElement("td");c.innerHTML=t.secondGameScoreValue.toString(),e.appendChild(c);var l=document.createElement("td");l.innerHTML=t.thirdGameScoreValue.toString(),e.appendChild(l);var f=document.createElement("td");f.innerHTML=t.datePlayed,e.appendChild(f)}))}var Zt,$t,te=function(t,e){this.id=t,this.word=e},ee=0,ne=0,re=[];function ie(t,e,r,i){var o,a=0,u=[],s=[],c=0,l=0,h="25px",p=document.createElement("label");p.className="numbersAndWords",p.innerHTML="Druga igra pocinje ubrzo",e.appendChild(p);var d=document.createElement("div");d.style.display="none",d.id="progressBarDiv",e.appendChild(d);var v=document.createElement("div");v.style.display="none",e.appendChild(v);var y=document.createElement("button");y.innerHTML="Vidjena",y.className="styledButton",y.id="seenWord",y.disabled=!0,v.appendChild(y);var m=document.createElement("button");m.innerHTML="Nova",m.className="styledButton",m.id="newWord",m.disabled=!0,v.appendChild(m);var b=document.createElement("div");b.id="leftSideScoresDiv",t.appendChild(b);var g=document.createElement("label");g.className="leftSideScoresDiv",g.id="skorDrugeIgre",g.innerHTML="Broj pogodaka",b.appendChild(g);var w=document.createElement("label");w.className="leftSideScoresDiv",w.style.fontSize=h,w.id="vidjene",w.innerHTML="Broj pogodaka",b.appendChild(w);var _=document.createElement("label");_.className="leftSideScoresDiv",_.style.fontSize=h,_.id="nove",_.innerHTML="Broj pogodaka",b.appendChild(_);var k=document.createElement("label");for(k.className="leftSideScoresDiv",k.style.fontSize=h,k.id="tries",k.innerHTML="Broj pogodaka",b.appendChild(k);l<13;)u[l]=re[Math.random()*re.length|0],l++;for(l=0;l<3;)u[12*Math.random()|0]=u[12*Math.random()|0],l++;var S,x,E,T=Et(0,1e3).subscribe((function(t){p.innerHTML="Druga igra počinje za: "+(3-t).toString()+" sekundi"})),j=Ct(u).pipe((x=function(t){return function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=mt(t);return Ct(t,n)}(t).pipe(Wt(2500),Dt((function(){return T.unsubscribe()})))},f(E)?rt(x,E,1):rt(x,1)),(S=function(){d.style.display="none",v.style.display="none",p.innerHTML="",C.unsubscribe(),j.unsubscribe(),function(t,e,r,i,o){var a=4,u="a",s=0,c=0,l=8e3,f=!1,h=document.createElement("div");h.className="leftSideScoresDiv",t.appendChild(h);var p=document.createElement("label");p.className="numbersAndWords",e.appendChild(p);var d=document.createElement("div");d.id="progressBarDiv",e.appendChild(d);var v=document.createElement("input");v.disabled=!0,v.type="number",v.className="styledInput",v.style.width="25rem",e.appendChild(v);var y=document.createElement("label");y.style.display="block",y.style.fontSize="32px",t.appendChild(y);var m=document.createElement("img");m.src="../src/assets/heart.png",m.id="heart1",m.width=50,h.appendChild(m);var b=document.createElement("img");b.src="../src/assets/heart.png",b.id="heart2",b.width=50,h.appendChild(b);var g=document.createElement("img");g.src="../src/assets/heart.png",g.id="heart3",g.width=50,h.appendChild(g);var w,_,k=Et(0,1e3).subscribe((function(t){p.innerHTML="Treća igra počinje za: "+(l/1e3-t).toString()+" sekundi"})),S=(w=l,void 0===w&&(w=0),void 0===_&&(_=St),w<0&&(w=0),Et(w,w,_)).pipe(Dt((function(){k.unsubscribe(),v.value==u||f?f||(y.innerHTML="Broj pogodaka: "+(++c).toString()):4!=a?x():a--,f=!1,s%5==0&&(l+=l/2),T.animate(1),v.value="",s++,function(){u="";for(var t=0;t<s;t++)u+=10*Math.random()|0}(),console.log(u),p.innerHTML=u,v.disabled=!0})),Wt(l/2),Dt((function(){T.animate(0),p.innerHTML="Unesite broj",v.disabled=!1,v.focus()}))).subscribe();function x(){var t=document.getElementById("heart"+a);a--,t.src="../src/assets/heartBroken.png",0==a&&(S.unsubscribe(),p.style.display="none",d.style.display="none",v.style.display="none",Jt(0,e,r,i,o,c))}v.addEventListener("keydown",(function(t){"Enter"===t.key&&(v.value!=u?x():y.innerHTML="Broj pogodaka: "+(++c).toString(),f=!0,v.disabled=!0,p.innerHTML="Sačekajte sledeći broj")}));var E=n(86),T=(new E.Line("#progressBarDiv"),new E.Line(d,{strokeWidth:4,easing:"easeInOut",duration:l/2,color:"#7adbfa",trailColor:"#eee",trailWidth:1,svgStyle:{width:"100%",height:"100%"},from:{color:"#6de6e6"},to:{color:"#209696"},step:function(t,e){e.path.setAttribute("stroke",t.color)}}))}(t,e,r,i,Zt)},Z((function(t,e){try{t.subscribe(e)}finally{e.add(S)}})))).subscribe((function(t){d.style.display="inline",v.style.display="inline",M.set(0),p.innerHTML=t.word,s[a]=t,a++,o=!1;for(var e=0;e<s.length-1;e++)s[e]==t&&(o=!0);y.disabled=!1,m.disabled=!1,M.animate(1),Zt=c}));m.addEventListener("click",(function(){o||(c++,ne++),g.innerHTML="Broj pogodaka: "+c.toString(),y.disabled=!0,m.disabled=!0})),y.addEventListener("click",(function(){o&&(c++,ee++),g.innerHTML="Broj pogodaka: "+c.toString(),y.disabled=!0,m.disabled=!0}));var O=function(t){return ct(document.getElementById(t),"click").pipe(At(1),function(t,e){return Z(Nt(t,e,arguments.length>=2,!0))}((function(t,e){return t+e}),0),function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=mt(t);return Z((function(e,r){(n?Mt(t,e,n):Mt(t,e)).subscribe(r)}))}(0))},C=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=mt(t),r=yt(t),i=Vt(t),o=i.args,a=i.keys;if(0===o.length)return Ct([],n);var u=new B(Gt(o,n,a?function(t){return Rt(a,t)}:H));return r?u.pipe(ot(r)):u}(O("newWord"),O("seenWord")).subscribe((function(t){var e=t[0],n=t[1];w.innerHTML="Viđene: od "+n+" pokušaja, "+ee+" je tačnih",_.innerHTML="Nove: od "+e+" pokušaja, "+ne+" je tačnih",k.innerHTML="Ukupno pokušaja: "+(e+n)})),P=n(86),M=(new P.Line("#progressBarDiv"),new P.Line(d,{strokeWidth:4,easing:"easeInOut",duration:2500,color:"#7adbfa",trailColor:"#eee",trailWidth:1,svgStyle:{width:"100%",height:"100%"},from:{color:"#6de6e6"},to:{color:"#209696"},step:function(t,e){e.path.setAttribute("stroke",t.color)}}))}fetch(Kt+"words").then((function(t){return t.json()})).then((function(t){return t.forEach((function(t){re.push(new te(t.id,t.word))}))}));var oe="#f7ec52",ae="#c94747",ue="#49c947",se="#ffffff",ce=150,le=350;var fe=document.body;fe.style.height="98vh",fe.id="wholePage";var he=document.createElement("div");he.id="pageLeftSide",he.style.display="none",fe.appendChild(he);var pe,de=document.createElement("div");de.id="pageRightSide",de.style.display="none",fe.appendChild(de);var ve=document.createElement("div");ve.id="welcomeDiv",fe.appendChild(ve);var ye=document.createElement("div");ve.appendChild(ye);var me=document.createElement("div");me.style.display="none",ve.appendChild(me);var be=document.createElement("label");be.innerHTML="Prikaži uputstva za igre",be.className="gameDescLabels",be.onclick=function(t){be.style.display="none",me.style.display="block",ve.style.width="50%"},ve.appendChild(be);var ge=document.createElement("label");ge.className="gameDescLabels",ge.innerHTML="Nick name: ",ge.style.marginRight="15px",ye.appendChild(ge);var we=document.createElement("input");we.placeholder="Unesite nick",we.style.letterSpacing="0",we.className="styledInput",ye.appendChild(we);var _e=document.createElement("label");_e.innerHTML="1. Prilikom startovanja prve igre timer odmah počinje da odbrojava, tako da budite spremni. Potrebno je pronaći ključ na ekranu. Da biste to uspeli potrebno je koristiti krugove sa leve strane, koji pomeranjem miša pokazuju vašu udaljenost od ključa. Kada mu se dovoljno približite ključ će postati vidljiv, a potom je potrebno kliknuti na njega, čime će se timer pauzirati, katacan otključati i pokrenuti druga igra.",_e.className="gameDescLabels",me.appendChild(_e);var ke=document.createElement("label");ke.className="gameDescLabels",ke.innerHTML="2. U drugoj igri je potrebno pamtiti reči koje se prikazuju na ekranu. Za svaku reč imate 2.5 sekunde da odgovorite da li je ona već viđena ili nova. Kada utvrdite potrebno je kliknuti na dugme i time će se rezultat za tu igru povećati ili ostati nepromenjen ukoliko ste pogrešili. Biće vam prikazane 12 reči",me.appendChild(ke);var Se=document.createElement("label");Se.className="gameDescLabels",Se.innerHTML="3. U trećoj igri imate 3 života, i igra traje dokle god imate barem jedan preostali život. Životi su predstavljeni sličicom srca sa leve strane, i svakim pogrešnim unosom gubite po jedan život. Do 5 brojeva imate po 4 sekundi da zapamtite i po 4 sekundi da odgovorite, a posle toga se vreme produžava za po polovinu prethodnog vremena na svakih 5 dodatnih brojeva.",me.appendChild(Se);var xe=document.createElement("label");xe.innerHTML='Klikom na dugme "Pokreni" počeće prva igra, tako da budite spremni!',xe.className="gameDescLabels",me.appendChild(xe);var Ee=document.createElement("button");Ee.className="styledButton",Ee.innerHTML="Pokreni!",ve.appendChild(Ee),Ee.onclick=function(t){""!=we.value?(he.style.display="flex",de.style.display="flex",ve.style.display="none",pe=we.value.toString(),function(t,e,n){var r=[Math.random()*e.offsetWidth|0,Math.random()*e.offsetHeight|0];r[0]<e.offsetWidth/100*40&&(r[0]=e.offsetWidth/100*40+r[0]|0),console.log(r);var i=document.createElement("label");i.className="nickDisplay",i.style.marginLeft="0px",i.style.marginTop="20px",i.innerHTML="Vaš nick name: "+n,t.appendChild(i);var o=document.createElement("input");o.type="image",o.id="keyButton",o.src="../src/assets/key.png",o.style.position="absolute",o.style.left=r[0].toString()+"px",o.style.top=r[1].toString()+"px",o.style.display="none",e.appendChild(o);var s=document.createElement("img");s.src="../src/assets/padlock.png",s.width=40,s.style.paddingBottom="10px";var c=document.createElement("div");c.className="circles",t.appendChild(c);var l=document.createElement("div");l.className="circle",l.style.backgroundColor="white",c.appendChild(l);var f=document.createElement("div");f.className="circle",f.style.backgroundColor="white",c.appendChild(f);var h=document.createElement("div");h.className="circle",h.style.backgroundColor="white",c.appendChild(h);var p,d=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=yt(t),r=ht(t);return r.length?new B((function(t){var e=r.map((function(){return[]})),i=r.map((function(){return!1}));t.add((function(){e=i=null}));for(var o=function(o){J(r[o]).subscribe($(t,(function(r){if(e[o].push(r),e.every((function(t){return t.length}))){var s=e.map((function(t){return t.shift()}));t.next(n?n.apply(void 0,u([],a(s))):s),e.some((function(t,e){return!t.length&&i[e]}))&&t.complete()}}),(function(){i[o]=!0,!e[o].length&&t.complete()})))},s=0;!t.closed&&s<r.length;s++)o(s);return function(){e=i=null}})):pt}(ct(document,"mousemove").pipe(et((function(t){return{x:t.clientX,y:t.clientY}})),(p=function(t){return t.x>=e.offsetWidth/100*40},Z((function(t,e){var n=0;t.subscribe($(e,(function(t){return p.call(void 0,t,n++)&&e.next(t)})))}))))).subscribe((function(t){var e=t;e[0].x>r[0]-50&&e[0].x<r[0]+50&&e[0].y>r[1]-50&&e[0].y<r[1]+50?(o.style.display="inline",l.style.backgroundColor=ue,f.style.backgroundColor=ue,h.style.backgroundColor=ue):e[0].x>r[0]-ce&&e[0].x<r[0]+ce&&e[0].y>r[1]-ce&&e[0].y<r[1]+ce?(h.style.backgroundColor="#4788c9",f.style.backgroundColor=oe,l.style.backgroundColor=ae,o.style.display="none"):e[0].x>r[0]-le&&e[0].x<r[0]+le&&e[0].y>r[1]-le&&e[0].y<r[1]+le?(f.style.backgroundColor=oe,h.style.backgroundColor=se,l.style.backgroundColor=ae,o.style.display="none"):(l.style.backgroundColor=ae,f.style.backgroundColor=se,h.style.backgroundColor=se,o.style.display="none")})),v=Et(0,10).subscribe((function(t){var e,n,r,i;m.innerHTML=(i=(e=t)-6*(n=Math.floor(e/6e3))*1e3-100*(r=Math.floor((e-6*n*1e3)/100)),n<10&&(n="0"+n),r<10&&(r="0"+r),i<10&&(i="0"+i),n+":"+r+"."+i),$t=t})),y=document.createElement("div");t.appendChild(y);var m=document.createElement("label");m.id="timer",y.appendChild(s),y.appendChild(m),y.className="leftSideScoresDiv",o.addEventListener("click",(function(){d.unsubscribe(),c.style.display="none",o.style.display="none",s.src="../src/assets/padlockOpen.png",v.unsubscribe(),ie(t,e,n,$t)}))}(he,de,pe)):(we.classList.toggle("shakeAnimacija"),we.placeholder="Nick ne sme biti prazan")},we.addEventListener("keydown",(function(t){"Enter"===t.key&&Ee.click()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,