(()=>{"use strict";var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};function e(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(t,e){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=e.call(t,u)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}function r(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return u}function i(t,e,n){if(n||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))}function u(t){return this instanceof u?(this.v=t,this):new u(t)}function c(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(t,e||[]),i=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(t){o[t]&&(r[t]=function(e){return new Promise((function(n,r){i.push([t,e,n,r])>1||a(t,e)}))})}function a(t,e){try{(n=o[t](e)).value instanceof u?Promise.resolve(n.value.v).then(s,l):f(i[0][2],n)}catch(t){f(i[0][3],t)}var n}function s(t){a("next",t)}function l(t){a("throw",t)}function f(t,e){t(e),i.shift(),i.length&&a(i[0][0],i[0][1])}}Object.create,Object.create;var a=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function s(t){return"function"==typeof t}var l,f=((l=function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}((function(t){Error.call(t),t.stack=(new Error).stack}))).prototype=Object.create(Error.prototype),l.prototype.constructor=l,l);function h(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var d=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}return t.prototype.unsubscribe=function(){var t,e,n,u,c;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var l=r(a),h=l.next();!h.done;h=l.next())h.value.remove(this)}catch(e){t={error:e}}finally{try{h&&!h.done&&(e=l.return)&&e.call(l)}finally{if(t)throw t.error}}else a.remove(this);var d=this.initialTeardown;if(s(d))try{d()}catch(t){c=t instanceof f?t.errors:[t]}var p=this._finalizers;if(p){this._finalizers=null;try{for(var y=r(p),b=y.next();!b.done;b=y.next()){var m=b.value;try{v(m)}catch(t){c=null!=c?c:[],t instanceof f?c=i(i([],o(c)),o(t.errors)):c.push(t)}}}catch(t){n={error:t}}finally{try{b&&!b.done&&(u=y.return)&&u.call(y)}finally{if(n)throw n.error}}}if(c)throw new f(c)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)v(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&h(e,t)},t.prototype.remove=function(e){var n=this._finalizers;n&&h(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t;var e}();function p(t){return t instanceof d||t&&"closed"in t&&s(t.remove)&&s(t.add)&&s(t.unsubscribe)}function v(t){s(t)?t():t.unsubscribe()}d.EMPTY;var y=null,b=null,m=void 0,w=!1,g=!1,x={setTimeout:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var u=x.delegate;return(null==u?void 0:u.setTimeout)?u.setTimeout.apply(u,i([t,e],o(n))):setTimeout.apply(void 0,i([t,e],o(n)))},clearTimeout:function(t){var e=x.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function _(t){x.setTimeout((function(){if(!y)throw t;y(t)}))}function S(){}var k=E("C",void 0,void 0);function E(t,e,n){return{kind:t,value:e,error:n}}var I=null,T=function(t){function n(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,p(e)&&e.add(n)):n.destination=z,n}return e(n,t),n.create=function(t,e,n){return new O(t,e,n)},n.prototype.next=function(t){this.isStopped?L(function(t){return E("N",t,void 0)}(t),this):this._next(t)},n.prototype.error=function(t){this.isStopped?L(E("E",void 0,t),this):(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped?L(k,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(d),C=Function.prototype.bind;function A(t,e){return C.call(t,e)}var P=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){j(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){j(t)}else j(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){j(t)}},t}(),O=function(t){function n(e,n,r){var o,i,u=t.call(this)||this;return s(e)||!e?o={next:null!=e?e:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:u&&g?((i=Object.create(e)).unsubscribe=function(){return u.unsubscribe()},o={next:e.next&&A(e.next,i),error:e.error&&A(e.error,i),complete:e.complete&&A(e.complete,i)}):o=e,u.destination=new P(o),u}return e(n,t),n}(T);function j(t){var e;w?(e=t,w&&I&&(I.errorThrown=!0,I.error=e)):_(t)}function L(t,e){var n=b;n&&x.setTimeout((function(){return n(t,e)}))}var z={closed:!0,next:S,error:function(t){throw t},complete:S},M="function"==typeof Symbol&&Symbol.observable||"@@observable";function N(t){return t}function U(t){return 0===t.length?N:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var Y=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,o=this,i=(r=t)&&r instanceof T||function(t){return t&&s(t.next)&&s(t.error)&&s(t.complete)}(r)&&p(r)?t:new O(t,e,n);return function(t){if(w){var e=!I;if(e&&(I={errorThrown:!1,error:null}),t(),e){var n=I,r=n.errorThrown,o=n.error;if(I=null,r)throw o}}else t()}((function(){var t=o,e=t.operator,n=t.source;i.add(e?e.call(i,n):n?o._subscribe(i):o._trySubscribe(i))})),i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=D(e))((function(e,r){var o=new O({next:function(e){try{t(e)}catch(t){r(t),o.unsubscribe()}},error:r,complete:e});n.subscribe(o)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[M]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return U(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=D(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function D(t){var e;return null!==(e=null!=t?t:m)&&void 0!==e?e:Promise}var F="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function H(t){if(t instanceof Y)return t;if(null!=t){if(function(t){return s(t[M])}(t))return f=t,new Y((function(t){var e=f[M]();if(s(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(a(t))return l=t,new Y((function(t){for(var e=0;e<l.length&&!t.closed;e++)t.next(l[e]);t.complete()}));if(s(null==(i=t)?void 0:i.then))return o=t,new Y((function(t){o.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,_)}));if(function(t){return Symbol.asyncIterator&&s(null==t?void 0:t[Symbol.asyncIterator])}(t))return R(t);if(function(t){return s(null==t?void 0:t[F])}(t))return e=t,new Y((function(t){var n,o;try{for(var i=r(e),u=i.next();!u.done;u=i.next()){var c=u.value;if(t.next(c),t.closed)return}}catch(t){n={error:t}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}t.complete()}));if(function(t){return s(null==t?void 0:t.getReader)}(t))return R(function(t){return c(this,arguments,(function(){var e,r,o;return n(this,(function(n){switch(n.label){case 0:e=t.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,u(e.read())];case 3:return r=n.sent(),o=r.value,r.done?[4,u(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,u(o)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}(t))}var e,o,i,l,f;throw function(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}(t)}function R(t){return new Y((function(e){(function(t,e){var o,i,u,c,a,s,l,f;return a=this,s=void 0,f=function(){var a,s;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),o=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=r(t),e={},o("next"),o("throw"),o("return"),e[Symbol.asyncIterator]=function(){return this},e);function o(n){e[n]=t[n]&&function(e){return new Promise((function(r,o){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,o,(e=t[n](e)).done,e.value)}))}}}(t),n.label=1;case 1:return[4,o.next()];case 2:if((i=n.sent()).done)return[3,4];if(a=i.value,e.next(a),e.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=n.sent(),u={error:s},[3,11];case 6:return n.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,e){function n(t){try{o(f.next(t))}catch(t){e(t)}}function r(t){try{o(f.throw(t))}catch(t){e(t)}}function o(e){var o;e.done?t(e.value):(o=e.value,o instanceof l?o:new l((function(t){t(o)}))).then(n,r)}o((f=f.apply(a,s||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function W(t){return function(e){if(function(t){return s(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function q(t,e,n,r,o){return new B(t,e,n,r,o)}var B=function(t){function n(e,n,r,o,i,u){var c=t.call(this,e)||this;return c.onFinalize=i,c.shouldUnsubscribe=u,c._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,c._error=o?function(t){try{o(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,c._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,c}return e(n,t),n.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},n}(T);function G(t,e){return W((function(n,r){var o=0;n.subscribe(q(r,(function(n){r.next(t.call(e,n,o++))})))}))}function K(t,e,n){return void 0===n&&(n=1/0),s(e)?K((function(n,r){return G((function(t,o){return e(n,t,r,o)}))(H(t(n,r)))}),n):("number"==typeof e&&(n=e),W((function(e,r){return function(t,e,n,r,o,i,u,c){var a=[],s=0,l=0,f=!1,h=function(){!f||a.length||s||e.complete()},d=function(t){return s<r?p(t):a.push(t)},p=function(t){s++;var o=!1;H(n(t,l++)).subscribe(q(e,(function(t){e.next(t)}),(function(){o=!0}),void 0,(function(){if(o)try{s--;for(var t=function(){var t=a.shift();p(t)};a.length&&s<r;)t();h()}catch(t){e.error(t)}})))};return t.subscribe(q(e,d,(function(){f=!0,h()}))),function(){}}(e,r,t,n)})))}var V=Array.isArray;var X=["addListener","removeListener"],J=["addEventListener","removeEventListener"],Q=["on","off"];function Z(t,e){return function(n){return function(r){return t[n](e,r)}}}var $=Array.isArray;function tt(t){return 1===t.length&&$(t[0])?t[0]:t}var et=new Y((function(t){return t.complete()}));function nt(t){return s((e=t)[e.length-1])?t.pop():void 0;var e}var rt=function(t){function n(e,n){return t.call(this)||this}return e(n,t),n.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},n}(d),ot={setInterval:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var u=ot.delegate;return(null==u?void 0:u.setInterval)?u.setInterval.apply(u,i([t,e],o(n))):setInterval.apply(void 0,i([t,e],o(n)))},clearInterval:function(t){var e=ot.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},it=function(t){function n(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return e(n,t),n.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},n.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),ot.setInterval(t.flush.bind(t,this),n)},n.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return e;ot.clearInterval(e)},n.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,e){var n,r=!1;try{this.work(t)}catch(t){r=!0,n=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},n.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,h(r,this),null!=e&&(this.id=this.recycleAsyncId(n,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},n}(rt),ut={now:function(){return(ut.delegate||Date).now()},delegate:void 0},ct=function(){function t(e,n){void 0===n&&(n=t.now),this.schedulerActionCtor=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(n,e)},t.now=ut.now,t}(),at=new(function(t){function n(e,n){void 0===n&&(n=ct.now);var r=t.call(this,e,n)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return e(n,t),n.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var n;this._active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},n}(ct))(it),st=document.body;st.style.height="98vh",st.id="celaStrana";var lt=document.createElement("div");lt.id="leviDeoStrane",st.appendChild(lt);var ft=document.createElement("div");ft.id="desniDeoStrane",st.appendChild(ft);var ht=[Math.random()*ft.clientWidth|0,Math.random()*ft.clientHeight|0];ht[0]<ft.clientWidth/100*40&&(ht[0]=ft.clientWidth/100*40+ht[0]),console.log(ht);var dt=document.createElement("input");dt.type="image",dt.id="dugmeKljuc",dt.src="/Images/key.png",dt.style.position="absolute",dt.style.left=ht[0].toString()+"px",dt.style.top=ht[1].toString()+"px",dt.style.display="none",dt.innerHTML="Pokreni Igru",ft.appendChild(dt);var pt=document.createElement("img");pt.src="/Images/padlock.png",pt.width=40,pt.style.paddingBottom="10px";var vt=document.createElement("div");vt.className="krugovi",lt.appendChild(vt);var yt=document.createElement("div");yt.className="krug",vt.appendChild(yt);var bt=document.createElement("div");bt.className="krug",vt.appendChild(bt);var mt=document.createElement("div");mt.className="krug",vt.appendChild(mt);var wt=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=nt(t),r=tt(t);return r.length?new Y((function(t){var e=r.map((function(){return[]})),u=r.map((function(){return!1}));t.add((function(){e=u=null}));for(var c=function(c){H(r[c]).subscribe(q(t,(function(r){if(e[c].push(r),e.every((function(t){return t.length}))){var a=e.map((function(t){return t.shift()}));t.next(n?n.apply(void 0,i([],o(a))):a),e.some((function(t,e){return!t.length&&u[e]}))&&t.complete()}}),(function(){u[c]=!0,!e[c].length&&t.complete()})))},a=0;!t.closed&&a<r.length;a++)c(a);return function(){e=u=null}})):et}(("mousemove",function t(e,n,r,u){if(s(r)&&(u=r,r=void 0),u)return t(e,n,r).pipe((c=u,G((function(t){return function(t,e){return V(e)?t.apply(void 0,i([],o(e))):t(e)}(c,t)}))));var c,l=o(function(t){return s(t.addEventListener)&&s(t.removeEventListener)}(e)?J.map((function(t){return function(o){return e[t](n,o,r)}})):function(t){return s(t.addListener)&&s(t.removeListener)}(e)?X.map(Z(e,n)):function(t){return s(t.on)&&s(t.off)}(e)?Q.map(Z(e,n)):[],2),f=l[0],h=l[1];if(!f&&a(e))return K((function(e){return t(e,n,r)}))(H(e));if(!f)throw new TypeError("Invalid event target");return new Y((function(t){var e=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.next(1<e.length?e:e[0])};return f(e),function(){return h(e)}}))}(document,"mousemove").pipe(G((function(t){return{x:t.clientX,y:t.clientY}}))))).subscribe((function(t){var e=t;e[0].x>ht[0]-50&&e[0].x<ht[0]+50&&e[0].y>ht[1]-50&&e[0].y<ht[1]+50?(dt.style.display="inline",yt.style.backgroundColor="#2dd424",bt.style.backgroundColor="#2dd424",mt.style.backgroundColor="#2dd424"):e[0].x>ht[0]-150&&e[0].x<ht[0]+150&&e[0].y>ht[1]-150&&e[0].y<ht[1]+150?(mt.style.backgroundColor="#1861b5",bt.style.backgroundColor="#f7e436",yt.style.backgroundColor="#db2e3c",dt.style.display="none"):e[0].x>ht[0]-350&&e[0].x<ht[0]+350&&e[0].y>ht[1]-350&&e[0].y<ht[1]+350?(bt.style.backgroundColor="#f7e436",mt.style.backgroundColor="white",yt.style.backgroundColor="#db2e3c",dt.style.display="none"):(yt.style.backgroundColor="#db2e3c",bt.style.backgroundColor="white",mt.style.backgroundColor="white",dt.style.display="none")})),gt=function(t,e,n){void 0===t&&(t=0),void 0===n&&(n=at);var r=-1;return e&&s(1e3.schedule)?n=e:r=e,new Y((function(e){var o=function(t){return t instanceof Date&&!isNaN(t)}(t)?+t-n.now():t;o<0&&(o=0);var i=0;return n.schedule((function(){e.closed||(e.next(i++),0<=r?this.schedule(void 0,r):e.complete())}),o)}))}(0,1e3).subscribe((function(t){return _t.innerHTML=(e=t,n=Math.floor(e/3600),r=Math.floor((e-3600*n)/60),o=e-3600*n-60*r,n<10&&(n="0"+n),r<10&&(r="0"+r),o<10&&(o="0"+o),n+":"+r+":"+o);var e,n,r,o})),xt=document.createElement("div");lt.appendChild(xt);var _t=document.createElement("label");_t.id="timer",xt.appendChild(pt),xt.appendChild(_t),xt.id="divVremena",dt.addEventListener("click",(function(){wt.unsubscribe(),vt.style.display="none",dt.style.display="none",pt.src="/Images/padlockOpen.png",gt.unsubscribe()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,