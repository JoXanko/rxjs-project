/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={534:(t,e,n)=>{var r=n(865),i=n(128),o=function(t,e){this._pathTemplate="M 50,50 m 0,-{radius} a {radius},{radius} 0 1 1 0,{2radius} a {radius},{radius} 0 1 1 0,-{2radius}",this.containerAspectRatio=1,r.apply(this,arguments)};(o.prototype=new r).constructor=o,o.prototype._pathString=function(t){var e=t.strokeWidth;t.trailWidth&&t.trailWidth>t.strokeWidth&&(e=t.trailWidth);var n=50-e/2;return i.render(this._pathTemplate,{radius:n,"2radius":2*n})},o.prototype._trailString=function(t){return this._pathString(t)},t.exports=o},688:(t,e,n)=>{var r=n(865),i=n(128),o=function(t,e){this._pathTemplate="M 0,{center} L 100,{center}",r.apply(this,arguments)};(o.prototype=new r).constructor=o,o.prototype._initializeSvg=function(t,e){t.setAttribute("viewBox","0 0 100 "+e.strokeWidth),t.setAttribute("preserveAspectRatio","none")},o.prototype._pathString=function(t){return i.render(this._pathTemplate,{center:t.strokeWidth/2})},o.prototype._trailString=function(t){return this._pathString(t)},t.exports=o},86:(t,e,n)=>{t.exports={Line:n(688),Circle:n(534),SemiCircle:n(157),Square:n(681),Path:n(888),Shape:n(865),utils:n(128)}},888:(t,e,n)=>{var r=n(350),i=n(128),o=r.Tweenable,a={easeIn:"easeInCubic",easeOut:"easeOutCubic",easeInOut:"easeInOutCubic"},u=function t(e,n){if(!(this instanceof t))throw new Error("Constructor was called without new keyword");var r;n=i.extend({delay:0,duration:800,easing:"linear",from:{},to:{},step:function(){}},n),r=i.isString(e)?document.querySelector(e):e,this.path=r,this._opts=n,this._tweenable=null;var o=this.path.getTotalLength();this.path.style.strokeDasharray=o+" "+o,this.set(0)};u.prototype.value=function(){var t=this._getComputedDashOffset(),e=this.path.getTotalLength();return parseFloat((1-t/e).toFixed(6),10)},u.prototype.set=function(t){this.stop(),this.path.style.strokeDashoffset=this._progressToOffset(t);var e=this._opts.step;if(i.isFunction(e)){var n=this._easing(this._opts.easing);e(this._calculateTo(t,n),this._opts.shape||this,this._opts.attachment)}},u.prototype.stop=function(){this._stopTween(),this.path.style.strokeDashoffset=this._getComputedDashOffset()},u.prototype.animate=function(t,e,n){e=e||{},i.isFunction(e)&&(n=e,e={});var r=i.extend({},e),a=i.extend({},this._opts);e=i.extend(a,e);var u=this._easing(e.easing),s=this._resolveFromAndTo(t,u,r);this.stop(),this.path.getBoundingClientRect();var c=this._getComputedDashOffset(),l=this._progressToOffset(t),f=this;this._tweenable=new o,this._tweenable.tween({from:i.extend({offset:c},s.from),to:i.extend({offset:l},s.to),duration:e.duration,delay:e.delay,easing:u,step:function(t){f.path.style.strokeDashoffset=t.offset;var n=e.shape||f;e.step(t,n,e.attachment)}}).then((function(t){i.isFunction(n)&&n()}))},u.prototype._getComputedDashOffset=function(){var t=window.getComputedStyle(this.path,null);return parseFloat(t.getPropertyValue("stroke-dashoffset"),10)},u.prototype._progressToOffset=function(t){var e=this.path.getTotalLength();return e-t*e},u.prototype._resolveFromAndTo=function(t,e,n){return n.from&&n.to?{from:n.from,to:n.to}:{from:this._calculateFrom(e),to:this._calculateTo(t,e)}},u.prototype._calculateFrom=function(t){return r.interpolate(this._opts.from,this._opts.to,this.value(),t)},u.prototype._calculateTo=function(t,e){return r.interpolate(this._opts.from,this._opts.to,t,e)},u.prototype._stopTween=function(){null!==this._tweenable&&(this._tweenable.stop(),this._tweenable=null)},u.prototype._easing=function(t){return a.hasOwnProperty(t)?a[t]:t},t.exports=u},157:(t,e,n)=>{var r=n(865),i=n(534),o=n(128),a=function(t,e){this._pathTemplate="M 50,50 m -{radius},0 a {radius},{radius} 0 1 1 {2radius},0",this.containerAspectRatio=2,r.apply(this,arguments)};(a.prototype=new r).constructor=a,a.prototype._initializeSvg=function(t,e){t.setAttribute("viewBox","0 0 100 50")},a.prototype._initializeTextContainer=function(t,e,n){t.text.style&&(n.style.top="auto",n.style.bottom="0",t.text.alignToBottom?o.setStyle(n,"transform","translate(-50%, 0)"):o.setStyle(n,"transform","translate(-50%, 50%)"))},a.prototype._pathString=i.prototype._pathString,a.prototype._trailString=i.prototype._trailString,t.exports=a},865:(t,e,n)=>{var r=n(888),i=n(128),o="Object is destroyed",a=function t(e,n){if(!(this instanceof t))throw new Error("Constructor was called without new keyword");if(0!==arguments.length){this._opts=i.extend({color:"#555",strokeWidth:1,trailColor:null,trailWidth:null,fill:null,text:{style:{color:null,position:"absolute",left:"50%",top:"50%",padding:0,margin:0,transform:{prefix:!0,value:"translate(-50%, -50%)"}},autoStyleContainer:!0,alignToBottom:!0,value:null,className:"progressbar-text"},svgStyle:{display:"block",width:"100%"},warnings:!1},n,!0),i.isObject(n)&&void 0!==n.svgStyle&&(this._opts.svgStyle=n.svgStyle),i.isObject(n)&&i.isObject(n.text)&&void 0!==n.text.style&&(this._opts.text.style=n.text.style);var o,a=this._createSvgView(this._opts);if(!(o=i.isString(e)?document.querySelector(e):e))throw new Error("Container does not exist: "+e);this._container=o,this._container.appendChild(a.svg),this._opts.warnings&&this._warnContainerAspectRatio(this._container),this._opts.svgStyle&&i.setStyles(a.svg,this._opts.svgStyle),this.svg=a.svg,this.path=a.path,this.trail=a.trail,this.text=null;var u=i.extend({attachment:void 0,shape:this},this._opts);this._progressPath=new r(a.path,u),i.isObject(this._opts.text)&&null!==this._opts.text.value&&this.setText(this._opts.text.value)}};a.prototype.animate=function(t,e,n){if(null===this._progressPath)throw new Error(o);this._progressPath.animate(t,e,n)},a.prototype.stop=function(){if(null===this._progressPath)throw new Error(o);void 0!==this._progressPath&&this._progressPath.stop()},a.prototype.pause=function(){if(null===this._progressPath)throw new Error(o);void 0!==this._progressPath&&this._progressPath._tweenable&&this._progressPath._tweenable.pause()},a.prototype.resume=function(){if(null===this._progressPath)throw new Error(o);void 0!==this._progressPath&&this._progressPath._tweenable&&this._progressPath._tweenable.resume()},a.prototype.destroy=function(){if(null===this._progressPath)throw new Error(o);this.stop(),this.svg.parentNode.removeChild(this.svg),this.svg=null,this.path=null,this.trail=null,this._progressPath=null,null!==this.text&&(this.text.parentNode.removeChild(this.text),this.text=null)},a.prototype.set=function(t){if(null===this._progressPath)throw new Error(o);this._progressPath.set(t)},a.prototype.value=function(){if(null===this._progressPath)throw new Error(o);return void 0===this._progressPath?0:this._progressPath.value()},a.prototype.setText=function(t){if(null===this._progressPath)throw new Error(o);null===this.text&&(this.text=this._createTextContainer(this._opts,this._container),this._container.appendChild(this.text)),i.isObject(t)?(i.removeChildren(this.text),this.text.appendChild(t)):this.text.innerHTML=t},a.prototype._createSvgView=function(t){var e=document.createElementNS("http://www.w3.org/2000/svg","svg");this._initializeSvg(e,t);var n=null;(t.trailColor||t.trailWidth)&&(n=this._createTrail(t),e.appendChild(n));var r=this._createPath(t);return e.appendChild(r),{svg:e,path:r,trail:n}},a.prototype._initializeSvg=function(t,e){t.setAttribute("viewBox","0 0 100 100")},a.prototype._createPath=function(t){var e=this._pathString(t);return this._createPathElement(e,t)},a.prototype._createTrail=function(t){var e=this._trailString(t),n=i.extend({},t);return n.trailColor||(n.trailColor="#eee"),n.trailWidth||(n.trailWidth=n.strokeWidth),n.color=n.trailColor,n.strokeWidth=n.trailWidth,n.fill=null,this._createPathElement(e,n)},a.prototype._createPathElement=function(t,e){var n=document.createElementNS("http://www.w3.org/2000/svg","path");return n.setAttribute("d",t),n.setAttribute("stroke",e.color),n.setAttribute("stroke-width",e.strokeWidth),e.fill?n.setAttribute("fill",e.fill):n.setAttribute("fill-opacity","0"),n},a.prototype._createTextContainer=function(t,e){var n=document.createElement("div");n.className=t.text.className;var r=t.text.style;return r&&(t.text.autoStyleContainer&&(e.style.position="relative"),i.setStyles(n,r),r.color||(n.style.color=t.color)),this._initializeTextContainer(t,e,n),n},a.prototype._initializeTextContainer=function(t,e,n){},a.prototype._pathString=function(t){throw new Error("Override this function for each progress bar")},a.prototype._trailString=function(t){throw new Error("Override this function for each progress bar")},a.prototype._warnContainerAspectRatio=function(t){if(this.containerAspectRatio){var e=window.getComputedStyle(t,null),n=parseFloat(e.getPropertyValue("width"),10),r=parseFloat(e.getPropertyValue("height"),10);i.floatEquals(this.containerAspectRatio,n/r)||(console.warn("Incorrect aspect ratio of container","#"+t.id,"detected:",e.getPropertyValue("width")+"(width)","/",e.getPropertyValue("height")+"(height)","=",n/r),console.warn("Aspect ratio of should be",this.containerAspectRatio))}},t.exports=a},681:(t,e,n)=>{var r=n(865),i=n(128),o=function(t,e){this._pathTemplate="M 0,{halfOfStrokeWidth} L {width},{halfOfStrokeWidth} L {width},{width} L {halfOfStrokeWidth},{width} L {halfOfStrokeWidth},{strokeWidth}",this._trailTemplate="M {startMargin},{halfOfStrokeWidth} L {width},{halfOfStrokeWidth} L {width},{width} L {halfOfStrokeWidth},{width} L {halfOfStrokeWidth},{halfOfStrokeWidth}",r.apply(this,arguments)};(o.prototype=new r).constructor=o,o.prototype._pathString=function(t){var e=100-t.strokeWidth/2;return i.render(this._pathTemplate,{width:e,strokeWidth:t.strokeWidth,halfOfStrokeWidth:t.strokeWidth/2})},o.prototype._trailString=function(t){var e=100-t.strokeWidth/2;return i.render(this._trailTemplate,{width:e,strokeWidth:t.strokeWidth,halfOfStrokeWidth:t.strokeWidth/2,startMargin:t.strokeWidth/2-t.trailWidth/2})},t.exports=o},128:t=>{var e="Webkit Moz O ms".split(" ");function n(t,n,i){for(var o=t.style,a=0;a<e.length;++a)o[e[a]+r(n)]=i;o[n]=i}function r(t){return t.charAt(0).toUpperCase()+t.slice(1)}function i(t){return!function(t){return"[object Array]"===Object.prototype.toString.call(t)}(t)&&"object"==typeof t&&!!t}function o(t,e){for(var n in t)t.hasOwnProperty(n)&&e(t[n],n)}t.exports={extend:function t(e,n,r){for(var o in e=e||{},r=r||!1,n=n||{})if(n.hasOwnProperty(o)){var a=e[o],u=n[o];r&&i(a)&&i(u)?e[o]=t(a,u,r):e[o]=u}return e},render:function(t,e){var n=t;for(var r in e)if(e.hasOwnProperty(r)){var i=e[r],o=new RegExp("\\{"+r+"\\}","g");n=n.replace(o,i)}return n},setStyle:n,setStyles:function(t,e){o(e,(function(e,r){null!=e&&(i(e)&&!0===e.prefix?n(t,r,e.value):t.style[r]=e)}))},capitalize:r,isString:function(t){return"string"==typeof t||t instanceof String},isFunction:function(t){return"function"==typeof t},isObject:i,forEachObject:o,floatEquals:function(t,e){return Math.abs(t-e)<.001},removeChildren:function(t){for(;t.firstChild;)t.removeChild(t.firstChild)}}},350:t=>{self,t.exports=function(){"use strict";var t={720:function(t,e,n){n.r(e),n.d(e,{Scene:function(){return $t},Tweenable:function(){return mt},interpolate:function(){return Yt},processTweens:function(){return ct},setBezierFunction:function(){return Xt},shouldScheduleUpdate:function(){return ht},tween:function(){return bt},unsetBezierFunction:function(){return te}});var r={};n.r(r),n.d(r,{bounce:function(){return F},bouncePast:function(){return W},easeFrom:function(){return N},easeFromTo:function(){return z},easeInBack:function(){return E},easeInCirc:function(){return x},easeInCubic:function(){return c},easeInExpo:function(){return w},easeInOutBack:function(){return C},easeInOutCirc:function(){return T},easeInOutCubic:function(){return f},easeInOutExpo:function(){return k},easeInOutQuad:function(){return s},easeInOutQuart:function(){return d},easeInOutQuint:function(){return m},easeInOutSine:function(){return _},easeInQuad:function(){return a},easeInQuart:function(){return h},easeInQuint:function(){return v},easeInSine:function(){return b},easeOutBack:function(){return P},easeOutBounce:function(){return j},easeOutCirc:function(){return O},easeOutCubic:function(){return l},easeOutExpo:function(){return S},easeOutQuad:function(){return u},easeOutQuart:function(){return p},easeOutQuint:function(){return y},easeOutSine:function(){return g},easeTo:function(){return D},elastic:function(){return M},linear:function(){return o},swingFrom:function(){return A},swingFromTo:function(){return I},swingTo:function(){return L}});var i={};n.r(i),n.d(i,{afterTween:function(){return Rt},beforeTween:function(){return Ht},doesApply:function(){return Nt},tweenCreated:function(){return Dt}});var o=function(t){return t},a=function(t){return Math.pow(t,2)},u=function(t){return-(Math.pow(t-1,2)-1)},s=function(t){return(t/=.5)<1?.5*Math.pow(t,2):-.5*((t-=2)*t-2)},c=function(t){return Math.pow(t,3)},l=function(t){return Math.pow(t-1,3)+1},f=function(t){return(t/=.5)<1?.5*Math.pow(t,3):.5*(Math.pow(t-2,3)+2)},h=function(t){return Math.pow(t,4)},p=function(t){return-(Math.pow(t-1,4)-1)},d=function(t){return(t/=.5)<1?.5*Math.pow(t,4):-.5*((t-=2)*Math.pow(t,3)-2)},v=function(t){return Math.pow(t,5)},y=function(t){return Math.pow(t-1,5)+1},m=function(t){return(t/=.5)<1?.5*Math.pow(t,5):.5*(Math.pow(t-2,5)+2)},b=function(t){return 1-Math.cos(t*(Math.PI/2))},g=function(t){return Math.sin(t*(Math.PI/2))},_=function(t){return-.5*(Math.cos(Math.PI*t)-1)},w=function(t){return 0===t?0:Math.pow(2,10*(t-1))},S=function(t){return 1===t?1:1-Math.pow(2,-10*t)},k=function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*--t))},x=function(t){return-(Math.sqrt(1-t*t)-1)},O=function(t){return Math.sqrt(1-Math.pow(t-1,2))},T=function(t){return(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},j=function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},E=function(t){var e=1.70158;return t*t*((e+1)*t-e)},P=function(t){var e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},C=function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},M=function(t){return-1*Math.pow(4,-8*t)*Math.sin((6*t-1)*(2*Math.PI)/2)+1},I=function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},A=function(t){var e=1.70158;return t*t*((e+1)*t-e)},L=function(t){var e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},F=function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},W=function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?2-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?2-(7.5625*(t-=2.25/2.75)*t+.9375):2-(7.5625*(t-=2.625/2.75)*t+.984375)},z=function(t){return(t/=.5)<1?.5*Math.pow(t,4):-.5*((t-=2)*Math.pow(t,3)-2)},N=function(t){return Math.pow(t,4)},D=function(t){return Math.pow(t,.25)};function H(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function R(t){return(R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function B(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function q(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?B(Object(n),!0).forEach((function(e){U(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):B(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function U(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Q,V,Y,K="linear",G="undefined"!=typeof window?window:n.g,Z="afterTween",J="afterTweenEnd",$="beforeTween",X="tweenCreated",tt="function",et="string",nt=G.requestAnimationFrame||G.webkitRequestAnimationFrame||G.oRequestAnimationFrame||G.msRequestAnimationFrame||G.mozCancelRequestAnimationFrame&&G.mozRequestAnimationFrame||setTimeout,rt=function(){},it=null,ot=null,at=q({},r),ut=function(t,e,n,r,i,o,a){var u,s,c,l=t<o?0:(t-o)/i,f=!1;for(var h in a&&a.call&&(f=!0,u=a(l)),e)f||(u=((s=a[h]).call?s:at[s])(l)),c=n[h],e[h]=c+(r[h]-c)*u;return e},st=function(t,e){var n=t._timestamp,r=t._currentState,i=t._delay;if(!(e<n+i)){var o=t._duration,a=t._targetState,u=n+i+o,s=e>u?u:e;t._hasEnded=s>=u;var c=o-(u-s),l=t._filters.length>0;if(t._hasEnded)return t._render(a,t._data,c),t.stop(!0);l&&t._applyFilter($),s<n+i?n=o=s=1:n+=i,ut(s,r,t._originalState,a,o,n,t._easing),l&&t._applyFilter(Z),t._render(r,t._data,c)}},ct=function(){for(var t,e=mt.now(),n=it;n;)t=n._next,st(n,e),n=t},lt=Date.now||function(){return+new Date},ft=!1,ht=function(t){t&&ft||(ft=t,t&&pt())},pt=function t(){Q=lt(),ft&&nt.call(G,t,16.666666666666668),ct()},dt=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:K,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=R(e);if(at[e])return at[e];if(r===et||r===tt)for(var i in t)n[i]=e;else for(var o in t)n[o]=e[o]||K;return n},vt=function(t){t===it?(it=t._next)?it._previous=null:ot=null:t===ot?(ot=t._previous)?ot._next=null:it=null:(V=t._previous,Y=t._next,V._next=Y,Y._previous=V),t._previous=t._next=null},yt="function"==typeof Promise?Promise:null,mt=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;H(this,t),this._config={},this._data={},this._delay=0,this._filters=[],this._next=null,this._previous=null,this._timestamp=null,this._hasEnded=!1,this._resolve=null,this._reject=null,this._currentState=e||{},this._originalState={},this._targetState={},this._start=rt,this._render=rt,this._promiseCtor=yt,n&&this.setConfig(n)}var e;return(e=[{key:"_applyFilter",value:function(t){for(var e=this._filters.length;e>0;e--){var n=this._filters[e-e][t];n&&n(this)}}},{key:"tween",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;return this._isPlaying&&this.stop(),!e&&this._config||this.setConfig(e),this._pausedAtTime=null,this._timestamp=t.now(),this._start(this.get(),this._data),this._delay&&this._render(this._currentState,this._data,0),this._resume(this._timestamp)}},{key:"setConfig",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=this._config;for(var r in e)n[r]=e[r];var i=n.promise,o=void 0===i?this._promiseCtor:i,a=n.start,u=void 0===a?rt:a,s=n.finish,c=n.render,l=void 0===c?this._config.step||rt:c,f=n.step,h=void 0===f?rt:f;this._data=n.data||n.attachment||this._data,this._isPlaying=!1,this._pausedAtTime=null,this._scheduleId=null,this._delay=e.delay||0,this._start=u,this._render=l||h,this._duration=n.duration||500,this._promiseCtor=o,s&&(this._resolve=s);var p=e.from,d=e.to,v=void 0===d?{}:d,y=this._currentState,m=this._originalState,b=this._targetState;for(var g in p)y[g]=p[g];var _=!1;for(var w in y){var S=y[w];_||R(S)!==et||(_=!0),m[w]=S,b[w]=v.hasOwnProperty(w)?v[w]:S}if(this._easing=dt(this._currentState,n.easing,this._easing),this._filters.length=0,_){for(var k in t.filters)t.filters[k].doesApply(this)&&this._filters.push(t.filters[k]);this._applyFilter(X)}return this}},{key:"then",value:function(t,e){var n=this;return this._promise=new this._promiseCtor((function(t,e){n._resolve=t,n._reject=e})),this._promise.then(t,e)}},{key:"catch",value:function(t){return this.then().catch(t)}},{key:"get",value:function(){return q({},this._currentState)}},{key:"set",value:function(t){this._currentState=t}},{key:"pause",value:function(){if(this._isPlaying)return this._pausedAtTime=t.now(),this._isPlaying=!1,vt(this),this}},{key:"resume",value:function(){return this._resume()}},{key:"_resume",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t.now();return null===this._timestamp?this.tween():this._isPlaying?this._promise:(this._pausedAtTime&&(this._timestamp+=e-this._pausedAtTime,this._pausedAtTime=null),this._isPlaying=!0,null===it?(it=this,ot=this):(this._previous=ot,ot._next=this,ot=this),this)}},{key:"seek",value:function(e){e=Math.max(e,0);var n=t.now();return this._timestamp+e===0||(this._timestamp=n-e,st(this,n)),this}},{key:"stop",value:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!this._isPlaying)return this;this._isPlaying=!1,vt(this);var e=this._filters.length>0;return t&&(e&&this._applyFilter($),ut(1,this._currentState,this._originalState,this._targetState,1,0,this._easing),e&&(this._applyFilter(Z),this._applyFilter(J))),this._resolve&&this._resolve({data:this._data,state:this._currentState,tweenable:this}),this._resolve=null,this._reject=null,this}},{key:"cancel",value:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=this._currentState,n=this._data;return this._isPlaying?(this._reject&&this._reject({data:n,state:e,tweenable:this}),this._resolve=null,this._reject=null,this.stop(t)):this}},{key:"isPlaying",value:function(){return this._isPlaying}},{key:"hasEnded",value:function(){return this._hasEnded}},{key:"setScheduleFunction",value:function(e){t.setScheduleFunction(e)}},{key:"data",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return t&&(this._data=q({},t)),this._data}},{key:"dispose",value:function(){for(var t in this)delete this[t]}}])&&function(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}(t.prototype,e),t}();function bt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=new mt;return e.tween(t),e.tweenable=e,e}U(mt,"now",(function(){return Q})),U(mt,"setScheduleFunction",(function(t){return nt=t})),U(mt,"filters",{}),U(mt,"formulas",at),ht(!0);var gt,_t,wt=/(\d|-|\.)/,St=/([^\-0-9.]+)/g,kt=/[0-9.-]+/g,xt=(gt=kt.source,_t=/,\s*/.source,new RegExp("rgba?\\(".concat(gt).concat(_t).concat(gt).concat(_t).concat(gt,"(").concat(_t).concat(gt,")?\\)"),"g")),Ot=/^.*\(/,Tt=/#([0-9]|[a-f]){3,6}/gi,jt="VAL",Et=function(t,e){return t.map((function(t,n){return"_".concat(e,"_").concat(n)}))};function Pt(t){return parseInt(t,16)}var Ct=function(t){return"rgb(".concat((e=t,3===(e=e.replace(/#/,"")).length&&(e=(e=e.split(""))[0]+e[0]+e[1]+e[1]+e[2]+e[2]),[Pt(e.substr(0,2)),Pt(e.substr(2,2)),Pt(e.substr(4,2))]).join(","),")");var e},Mt=function(t,e,n){var r=e.match(t),i=e.replace(t,jt);return r&&r.forEach((function(t){return i=i.replace(jt,n(t))})),i},It=function(t){for(var e in t){var n=t[e];"string"==typeof n&&n.match(Tt)&&(t[e]=Mt(Tt,n,Ct))}},At=function(t){var e=t.match(kt),n=e.slice(0,3).map(Math.floor),r=t.match(Ot)[0];if(3===e.length)return"".concat(r).concat(n.join(","),")");if(4===e.length)return"".concat(r).concat(n.join(","),",").concat(e[3],")");throw new Error("Invalid rgbChunk: ".concat(t))},Lt=function(t){return t.match(kt)},Ft=function(t,e){var n={};return e.forEach((function(e){n[e]=t[e],delete t[e]})),n},Wt=function(t,e){return e.map((function(e){return t[e]}))},zt=function(t,e){return e.forEach((function(e){return t=t.replace(jt,+e.toFixed(4))})),t},Nt=function(t){for(var e in t._currentState)if("string"==typeof t._currentState[e])return!0;return!1};function Dt(t){var e=t._currentState;[e,t._originalState,t._targetState].forEach(It),t._tokenData=function(t){var e,n,r={};for(var i in t){var o=t[i];"string"==typeof o&&(r[i]={formatString:(e=o,n=void 0,n=e.match(St),n?(1===n.length||e.charAt(0).match(wt))&&n.unshift(""):n=["",""],n.join(jt)),chunkNames:Et(Lt(o),i)})}return r}(e)}function Ht(t){var e=t._currentState,n=t._originalState,r=t._targetState,i=t._easing,o=t._tokenData;!function(t,e){var n=function(n){var r=e[n].chunkNames,i=t[n];if("string"==typeof i){var o=i.split(" "),a=o[o.length-1];r.forEach((function(e,n){return t[e]=o[n]||a}))}else r.forEach((function(e){return t[e]=i}));delete t[n]};for(var r in e)n(r)}(i,o),[e,n,r].forEach((function(t){return function(t,e){var n=function(n){Lt(t[n]).forEach((function(r,i){return t[e[n].chunkNames[i]]=+r})),delete t[n]};for(var r in e)n(r)}(t,o)}))}function Rt(t){var e=t._currentState,n=t._originalState,r=t._targetState,i=t._easing,o=t._tokenData;[e,n,r].forEach((function(t){return function(t,e){for(var n in e){var r=e[n],i=r.chunkNames,o=r.formatString,a=zt(o,Wt(Ft(t,i),i));t[n]=Mt(xt,a,At)}}(t,o)})),function(t,e){for(var n in e){var r=e[n].chunkNames,i=t[r[0]];t[n]="string"==typeof i?r.map((function(e){var n=t[e];return delete t[e],n})).join(" "):i}}(i,o)}function Bt(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function qt(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Bt(Object(n),!0).forEach((function(e){Ut(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Bt(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Ut(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Qt=new mt,Vt=mt.filters,Yt=function(t,e,n,r){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,o=qt({},t),a=dt(t,r);for(var u in Qt._filters.length=0,Qt.set({}),Qt._currentState=o,Qt._originalState=t,Qt._targetState=e,Qt._easing=a,Vt)Vt[u].doesApply(Qt)&&Qt._filters.push(Vt[u]);Qt._applyFilter("tweenCreated"),Qt._applyFilter("beforeTween");var s=ut(n,o,t,e,1,i,a);return Qt._applyFilter("afterTween"),s};function Kt(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Gt(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Zt(t,e){var n=e.get(t);if(!n)throw new TypeError("attempted to get private field on non-instance");return n.get?n.get.call(t):n.value}var Jt=new WeakMap,$t=function(){function t(){Gt(this,t),Jt.set(this,{writable:!0,value:[]});for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];n.forEach(this.add.bind(this))}var e;return(e=[{key:"add",value:function(t){return Zt(this,Jt).push(t),t}},{key:"remove",value:function(t){var e=Zt(this,Jt).indexOf(t);return~e&&Zt(this,Jt).splice(e,1),t}},{key:"empty",value:function(){return this.tweenables.map(this.remove.bind(this))}},{key:"isPlaying",value:function(){return Zt(this,Jt).some((function(t){return t.isPlaying()}))}},{key:"play",value:function(){return Zt(this,Jt).forEach((function(t){return t.tween()})),this}},{key:"pause",value:function(){return Zt(this,Jt).forEach((function(t){return t.pause()})),this}},{key:"resume",value:function(){return Zt(this,Jt).forEach((function(t){return t.resume()})),this}},{key:"stop",value:function(t){return Zt(this,Jt).forEach((function(e){return e.stop(t)})),this}},{key:"tweenables",get:function(){return function(t){if(Array.isArray(t))return Kt(t)}(t=Zt(this,Jt))||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return Kt(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Kt(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();var t}},{key:"promises",get:function(){return Zt(this,Jt).map((function(t){return t.then()}))}}])&&function(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}(t.prototype,e),t}(),Xt=function(t,e,n,r,i){var o=function(t,e,n,r){return function(i){return l=0,f=0,h=0,p=function(t){return((l*t+f)*t+h)*t},d=function(t){return(3*l*t+2*f)*t+h},v=function(t){return t>=0?t:0-t},l=1-(h=3*(o=t))-(f=3*(n-o)-h),u=1-(c=3*(a=e))-(s=3*(r-a)-c),function(t){return((u*t+s)*t+c)*t}(function(t,e){var n,r,i,o,a,u;for(i=t,u=0;u<8;u++){if(o=p(i)-t,v(o)<.005)return i;if(a=d(i),v(a)<1e-6)break;i-=o/a}if((i=t)<(n=0))return n;if(i>(r=1))return r;for(;n<r;){if(o=p(i),v(o-t)<.005)return i;t>o?n=i:r=i,i=.5*(r-n)+n}return i}(i));var o,a,u,s,c,l,f,h,p,d,v}}(e,n,r,i);return o.displayName=t,o.x1=e,o.y1=n,o.x2=r,o.y2=i,mt.formulas[t]=o},te=function(t){return delete mt.formulas[t]};mt.filters.token=i}},e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}return n.d=function(t,e){for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(720)}()}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}(()=>{"use strict";var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};function e(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}var r=function(){return r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},r.apply(this,arguments)};function i(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}}function o(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function a(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function u(t,e,n){if(n||2===arguments.length)for(var r,i=0,o=e.length;i<o;i++)!r&&i in e||(r||(r=Array.prototype.slice.call(e,0,i)),r[i]=e[i]);return t.concat(r||Array.prototype.slice.call(e))}function s(t){return this instanceof s?(this.v=t,this):new s(t)}function c(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(t){i[t]&&(r[t]=function(e){return new Promise((function(n,r){o.push([t,e,n,r])>1||u(t,e)}))})}function u(t,e){try{(n=i[t](e)).value instanceof s?Promise.resolve(n.value.v).then(c,l):f(o[0][2],n)}catch(t){f(o[0][3],t)}var n}function c(t){u("next",t)}function l(t){u("throw",t)}function f(t,e){t(e),o.shift(),o.length&&u(o[0][0],o[0][1])}}function l(t){return"function"==typeof t}Object.create,Object.create;var f,h=((f=function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}((function(t){Error.call(t),t.stack=(new Error).stack}))).prototype=Object.create(Error.prototype),f.prototype.constructor=f,f);function p(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var d=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}return t.prototype.unsubscribe=function(){var t,e,n,r,i;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var c=o(s),f=c.next();!f.done;f=c.next())f.value.remove(this)}catch(e){t={error:e}}finally{try{f&&!f.done&&(e=c.return)&&e.call(c)}finally{if(t)throw t.error}}else s.remove(this);var p=this.initialTeardown;if(l(p))try{p()}catch(t){i=t instanceof h?t.errors:[t]}var d=this._finalizers;if(d){this._finalizers=null;try{for(var v=o(d),m=v.next();!m.done;m=v.next()){var b=m.value;try{y(b)}catch(t){i=null!=i?i:[],t instanceof h?i=u(u([],a(i)),a(t.errors)):i.push(t)}}}catch(t){n={error:t}}finally{try{m&&!m.done&&(r=v.return)&&r.call(v)}finally{if(n)throw n.error}}}if(i)throw new h(i)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)y(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&p(e,t)},t.prototype.remove=function(e){var n=this._finalizers;n&&p(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t;var e}();function v(t){return t instanceof d||t&&"closed"in t&&l(t.remove)&&l(t.add)&&l(t.unsubscribe)}function y(t){l(t)?t():t.unsubscribe()}d.EMPTY;var m=null,b=null,g=void 0,_=!1,w=!1,S={setTimeout:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=S.delegate;return(null==i?void 0:i.setTimeout)?i.setTimeout.apply(i,u([t,e],a(n))):setTimeout.apply(void 0,u([t,e],a(n)))},clearTimeout:function(t){var e=S.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function k(t){S.setTimeout((function(){if(!m)throw t;m(t)}))}function x(){}var O=T("C",void 0,void 0);function T(t,e,n){return{kind:t,value:e,error:n}}var j=null,E=function(t){function n(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,v(e)&&e.add(n)):n.destination=F,n}return e(n,t),n.create=function(t,e,n){return new I(t,e,n)},n.prototype.next=function(t){this.isStopped?L(function(t){return T("N",t,void 0)}(t),this):this._next(t)},n.prototype.error=function(t){this.isStopped?L(T("E",void 0,t),this):(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped?L(O,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(d),P=Function.prototype.bind;function C(t,e){return P.call(t,e)}var M=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){A(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){A(t)}else A(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){A(t)}},t}(),I=function(t){function n(e,n,r){var i,o,a=t.call(this)||this;return l(e)||!e?i={next:null!=e?e:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:a&&w?((o=Object.create(e)).unsubscribe=function(){return a.unsubscribe()},i={next:e.next&&C(e.next,o),error:e.error&&C(e.error,o),complete:e.complete&&C(e.complete,o)}):i=e,a.destination=new M(i),a}return e(n,t),n}(E);function A(t){var e;_?(e=t,_&&j&&(j.errorThrown=!0,j.error=e)):k(t)}function L(t,e){var n=b;n&&S.setTimeout((function(){return n(t,e)}))}var F={closed:!0,next:x,error:function(t){throw t},complete:x},W="function"==typeof Symbol&&Symbol.observable||"@@observable";function z(t){return t}function N(t){return 0===t.length?z:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var D=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,i=this,o=(r=t)&&r instanceof E||function(t){return t&&l(t.next)&&l(t.error)&&l(t.complete)}(r)&&v(r)?t:new I(t,e,n);return function(t){if(_){var e=!j;if(e&&(j={errorThrown:!1,error:null}),t(),e){var n=j,r=n.errorThrown,i=n.error;if(j=null,r)throw i}}else t()}((function(){var t=i,e=t.operator,n=t.source;o.add(e?e.call(o,n):n?i._subscribe(o):i._trySubscribe(o))})),o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=H(e))((function(e,r){var i=new I({next:function(e){try{t(e)}catch(t){r(t),i.unsubscribe()}},error:r,complete:e});n.subscribe(i)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[W]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return N(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=H(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function H(t){var e;return null!==(e=null!=t?t:g)&&void 0!==e?e:Promise}var R=function(t){function n(e,n){return t.call(this)||this}return e(n,t),n.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},n}(d),B={setInterval:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=B.delegate;return(null==i?void 0:i.setInterval)?i.setInterval.apply(i,u([t,e],a(n))):setInterval.apply(void 0,u([t,e],a(n)))},clearInterval:function(t){var e=B.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},q=function(t){function n(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return e(n,t),n.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},n.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),B.setInterval(t.flush.bind(t,this),n)},n.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return e;B.clearInterval(e)},n.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,e){var n,r=!1;try{this.work(t)}catch(t){r=!0,n=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},n.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,p(r,this),null!=e&&(this.id=this.recycleAsyncId(n,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},n}(R),U={now:function(){return(U.delegate||Date).now()},delegate:void 0},Q=function(){function t(e,n){void 0===n&&(n=t.now),this.schedulerActionCtor=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(n,e)},t.now=U.now,t}(),V=new(function(t){function n(e,n){void 0===n&&(n=Q.now);var r=t.call(this,e,n)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return e(n,t),n.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var n;this._active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},n}(Q))(q),Y=V;function K(t){return t&&l(t.schedule)}function G(t,e,n){void 0===t&&(t=0),void 0===n&&(n=Y);var r=-1;return null!=e&&(K(e)?n=e:r=e),new D((function(e){var i,o=(i=t)instanceof Date&&!isNaN(i)?+t-n.now():t;o<0&&(o=0);var a=0;return n.schedule((function(){e.closed||(e.next(a++),0<=r?this.schedule(void 0,r):e.complete())}),o)}))}function Z(t){return function(e){if(function(t){return l(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function J(t,e,n,r,i){return new $(t,e,n,r,i)}var $=function(t){function n(e,n,r,i,o,a){var u=t.call(this,e)||this;return u.onFinalize=o,u.shouldUnsubscribe=a,u._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,u._error=i?function(t){try{i(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return e(n,t),n.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},n}(E);function X(t,e,n){var r=l(t)||e||n?{next:t,error:e,complete:n}:t;return r?Z((function(t,e){var n;null===(n=r.subscribe)||void 0===n||n.call(r);var i=!0;t.subscribe(J(e,(function(t){var n;null===(n=r.next)||void 0===n||n.call(r,t),e.next(t)}),(function(){var t;i=!1,null===(t=r.complete)||void 0===t||t.call(r),e.complete()}),(function(t){var n;i=!1,null===(n=r.error)||void 0===n||n.call(r,t),e.error(t)}),(function(){var t,e;i&&(null===(t=r.unsubscribe)||void 0===t||t.call(r)),null===(e=r.finalize)||void 0===e||e.call(r)})))})):z}function tt(t,e){return Z((function(n,r){var i=0;n.subscribe(J(r,(function(n){r.next(t.call(e,n,i++))})))}))}var et=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function nt(t){return l(null==t?void 0:t.then)}function rt(t){return l(t[W])}function it(t){return Symbol.asyncIterator&&l(null==t?void 0:t[Symbol.asyncIterator])}function ot(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var at="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function ut(t){return l(null==t?void 0:t[at])}function st(t){return c(this,arguments,(function(){var e,n,r;return i(this,(function(i){switch(i.label){case 0:e=t.getReader(),i.label=1;case 1:i.trys.push([1,,9,10]),i.label=2;case 2:return[4,s(e.read())];case 3:return n=i.sent(),r=n.value,n.done?[4,s(void 0)]:[3,5];case 4:return[2,i.sent()];case 5:return[4,s(r)];case 6:return[4,i.sent()];case 7:return i.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function ct(t){return l(null==t?void 0:t.getReader)}function lt(t){if(t instanceof D)return t;if(null!=t){if(rt(t))return i=t,new D((function(t){var e=i[W]();if(l(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(et(t))return r=t,new D((function(t){for(var e=0;e<r.length&&!t.closed;e++)t.next(r[e]);t.complete()}));if(nt(t))return n=t,new D((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,k)}));if(it(t))return ft(t);if(ut(t))return e=t,new D((function(t){var n,r;try{for(var i=o(e),a=i.next();!a.done;a=i.next()){var u=a.value;if(t.next(u),t.closed)return}}catch(t){n={error:t}}finally{try{a&&!a.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}t.complete()}));if(ct(t))return ft(st(t))}var e,n,r,i;throw ot(t)}function ft(t){return new D((function(e){(function(t,e){var n,r,a,u,s,c,l,f;return s=this,c=void 0,f=function(){var s,c;return i(this,(function(i){switch(i.label){case 0:i.trys.push([0,5,6,11]),n=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=o(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,i,(e=t[n](e)).done,e.value)}))}}}(t),i.label=1;case 1:return[4,n.next()];case 2:if((r=i.sent()).done)return[3,4];if(s=r.value,e.next(s),e.closed)return[2];i.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return c=i.sent(),a={error:c},[3,11];case 6:return i.trys.push([6,,9,10]),r&&!r.done&&(u=n.return)?[4,u.call(n)]:[3,8];case 7:i.sent(),i.label=8;case 8:return[3,10];case 9:if(a)throw a.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,e){function n(t){try{i(f.next(t))}catch(t){e(t)}}function r(t){try{i(f.throw(t))}catch(t){e(t)}}function i(e){var i;e.done?t(e.value):(i=e.value,i instanceof l?i:new l((function(t){t(i)}))).then(n,r)}i((f=f.apply(s,c||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function ht(t,e,n,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=e.schedule((function(){n(),i?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(o),!i)return o}function pt(t,e,n){return void 0===n&&(n=1/0),l(e)?pt((function(n,r){return tt((function(t,i){return e(n,t,r,i)}))(lt(t(n,r)))}),n):("number"==typeof e&&(n=e),Z((function(e,r){return function(t,e,n,r,i,o,a,u){var s=[],c=0,l=0,f=!1,h=function(){!f||s.length||c||e.complete()},p=function(t){return c<r?d(t):s.push(t)},d=function(t){c++;var i=!1;lt(n(t,l++)).subscribe(J(e,(function(t){e.next(t)}),(function(){i=!0}),void 0,(function(){if(i)try{c--;for(;s.length&&c<r;)t=void 0,t=s.shift(),d(t);h()}catch(t){e.error(t)}var t})))};return t.subscribe(J(e,p,(function(){f=!0,h()}))),function(){}}(e,r,t,n)})))}function dt(){return void 0===(t=1)&&(t=1/0),pt(z,t);var t}function vt(t){return K((e=t)[e.length-1])?t.pop():void 0;var e}function yt(t,e){return void 0===e&&(e=0),Z((function(n,r){n.subscribe(J(r,(function(n){return ht(r,t,(function(){return r.next(n)}),e)}),(function(){return ht(r,t,(function(){return r.complete()}),e)}),(function(n){return ht(r,t,(function(){return r.error(n)}),e)})))}))}function mt(t,e){return void 0===e&&(e=0),Z((function(n,r){r.add(t.schedule((function(){return n.subscribe(r)}),e))}))}function bt(t,e){if(!t)throw new Error("Iterable cannot be null");return new D((function(n){ht(n,e,(function(){var r=t[Symbol.asyncIterator]();ht(n,e,(function(){r.next().then((function(t){t.done?n.complete():n.next(t.value)}))}),0,!0)}))}))}function gt(t,e){return e?function(t,e){if(null!=t){if(rt(t))return function(t,e){return lt(t).pipe(mt(e),yt(e))}(t,e);if(et(t))return function(t,e){return new D((function(n){var r=0;return e.schedule((function(){r===t.length?n.complete():(n.next(t[r++]),n.closed||this.schedule())}))}))}(t,e);if(nt(t))return function(t,e){return lt(t).pipe(mt(e),yt(e))}(t,e);if(it(t))return bt(t,e);if(ut(t))return function(t,e){return new D((function(n){var r;return ht(n,e,(function(){r=t[at](),ht(n,e,(function(){var t,e,i;try{e=(t=r.next()).value,i=t.done}catch(t){return void n.error(t)}i?n.complete():n.next(e)}),0,!0)})),function(){return l(null==r?void 0:r.return)&&r.return()}}))}(t,e);if(ct(t))return function(t,e){return bt(st(t),e)}(t,e)}throw ot(t)}(t,e):lt(t)}var _t=new D((function(t){return t.complete()}));function wt(t){return t<=0?function(){return _t}:Z((function(e,n){var r=0;e.subscribe(J(n,(function(e){++r<=t&&(n.next(e),t<=r&&n.complete())})))}))}function St(t,e){return e?function(n){return function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return dt()(gt(t,vt(t)))}(e.pipe(wt(1),Z((function(t,e){t.subscribe(J(e,x))}))),n.pipe(St(t)))}:pt((function(e,n){return t(e,n).pipe(wt(1),function(t){return tt((function(){return t}))}(e))}))}var kt=function(t,e,n,r,i){this.nickName=t,this.prvaIgraTimer=e,this.drugaIgraSkor=n,this.trecaIgraSkor=r,this.datum=i};var xt;function Ot(t,e,n,i,o,a){xt=new kt(n,i,o,a,(new Date).toLocaleString()),function(){var t,e,n,r;t=this,e=void 0,r=function(){return function(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}}(this,(function(t){switch(t.label){case 0:return[4,fetch("http://localhost:3000/korisnici",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(xt)})];case 1:return[2,t.sent().json()]}}))},new((n=void 0)||(n=Promise))((function(i,o){function a(t){try{s(r.next(t))}catch(t){o(t)}}function u(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,u)}s((r=r.apply(t,e||[])).next())}))}(),console.log(xt);var u,s=function(t,e){void 0===e&&(e={});var n=e.selector,i=function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n}(e,["selector"]);return new D((function(e){var o=new AbortController,a=o.signal,u=!0,s=i.signal;if(s)if(s.aborted)o.abort();else{var c=function(){a.aborted||o.abort()};s.addEventListener("abort",c),e.add((function(){return s.removeEventListener("abort",c)}))}var l=r(r({},i),{signal:a}),f=function(t){u=!1,e.error(t)};return fetch(t,l).then((function(t){n?lt(n(t)).subscribe(J(e,void 0,(function(){u=!1,e.complete()}),f)):(u=!1,e.next(t),e.complete())})).catch(f),function(){u&&o.abort()}}))}("http://localhost:3000/korisnici").pipe((u=function(t){if(t.ok)return t.json()},Z((function(t,e){var n=null,r=!1,i=function(){return r&&!n&&e.complete()};t.subscribe(J(e,(function(t){null==n||n.unsubscribe();0;lt(u(t)).subscribe(n=J(e,(function(t){return e.next(t)}),(function(){n=null,i()})))}),(function(){r=!0,i()})))}))));s.pipe(tt((function(t){return t.filter((function(t){return t.prvaIgraTimer>=xt.prvaIgraTimer}))}))).subscribe({next:function(t){Tt(t,e,1)}}),s.pipe(tt((function(t){return t.filter((function(t){return t.drugaIgraSkor<=xt.drugaIgraSkor}))}))).subscribe({next:function(t){Tt(t,e,2)}}),s.pipe(tt((function(t){return t.filter((function(t){return t.trecaIgraSkor>=xt.trecaIgraSkor}))}))).subscribe({next:function(t){Tt(t,e,3)}})}function Tt(t,e,n){var r=document.createElement("label");r.style.fontSize="20px",r.style.marginBottom="1%",e.appendChild(r);var i=document.createElement("table");e.appendChild(i);var o=document.createElement("tr");i.appendChild(o);var a=document.createElement("th");a.innerHTML="Nick Name",o.appendChild(a);var u=document.createElement("th");u.innerHTML="Vreme prve igre",o.appendChild(u);var s=document.createElement("th");s.innerHTML="Skor druge igre",o.appendChild(s);var c=document.createElement("th");c.innerHTML="Skor treće igre",o.appendChild(c);var l=document.createElement("th");l.innerHTML="Datum igranja",o.appendChild(l),1==n?(t.sort((function(t,e){return e.prvaIgraTimer-t.prvaIgraTimer})),r.innerHTML="Tabela za prikaz igrača sortiranih po prvoj igri"):2==n?(t.sort((function(t,e){return e.drugaIgraSkor-t.drugaIgraSkor})),r.innerHTML="Tabela za prikaz igrača sortiranih po drugoj igri"):(t.sort((function(t,e){return e.trecaIgraSkor-t.trecaIgraSkor})),r.innerHTML="Tabela za prikaz igrača sortiranih po trećoj igri"),t.slice(-5).forEach((function(t){var e=document.createElement("tr");i.appendChild(e);var n=document.createElement("td");n.innerHTML=t.nickName,e.appendChild(n);var r,o,a,u,s=document.createElement("td");s.innerHTML=(r=t.prvaIgraTimer,o=Math.floor(r/6e3),a=Math.floor((r-6e3*o)/100),u=r-6e3*o-100*a,o<10&&(o="0"+o),a<10&&(a="0"+a),u<10&&(u="0"+u),o+":"+a+"."+u),e.appendChild(s);var c=document.createElement("td");c.innerHTML=t.drugaIgraSkor.toString(),e.appendChild(c);var l=document.createElement("td");l.innerHTML=t.trecaIgraSkor.toString(),e.appendChild(l);var f=document.createElement("td");f.innerHTML=t.datum,e.appendChild(f)}))}function jt(t,e,r,i,o){var a=4,u="a",s=0,c=0,l=80,f=!1,h=document.createElement("div");h.className="divLeveStraneIgraca",t.appendChild(h);var p=document.createElement("label");p.className="labelaZaReci",e.appendChild(p);var d=document.createElement("div");d.id="progressBarDiv",e.appendChild(d);var v=document.createElement("input");v.disabled=!0,v.type="number",v.className="nickInput",v.style.width="25rem",e.appendChild(v);var y=document.createElement("label");y.style.display="block",y.style.fontSize="32px",t.appendChild(y);var m=document.createElement("img");m.src="../src/assets/heart.png",m.id="srce1",m.width=40,h.appendChild(m);var b=document.createElement("img");b.src="../src/assets/heart.png",b.id="srce2",b.width=40,h.appendChild(b);var g=document.createElement("img");g.src="../src/assets/heart.png",g.id="srce3",g.width=40,h.appendChild(g);var _=document.createElement("label");h.appendChild(_);var w,S,k=G(0,1e3).subscribe((function(t){p.innerHTML="Treća igra počinje za: "+(8-t).toString()+" sekundi"})),x=(w=l,void 0===w&&(w=0),void 0===S&&(S=V),w<0&&(w=0),G(w,w,S)).pipe(X((function(){k.unsubscribe(),v.value==u||f?f||(y.innerHTML="Broj pogodaka: "+(++c).toString()):4!=a?O():a--,f=!1,s%5==0&&(l+=l/2),j.animate(1),v.value="",s++,function(){u="";for(var t=0;t<s;t++)u+=10*Math.random()|0}(),console.log(u),p.innerHTML=u,v.disabled=!0})),function(t,e){void 0===e&&(e=V);var n=G(t,e);return St((function(){return n}))}(l/2),X((function(){j.set(0),p.innerHTML="Unesite broj",v.disabled=!1,v.focus()}))).subscribe();function O(){var t=document.getElementById("srce"+a);a--,t.src="../src/assets/heartBroken.png",0==a&&(x.unsubscribe(),p.style.display="none",d.style.display="none",v.style.display="none",Ot(0,e,r,i,o,c))}v.addEventListener("keydown",(function(t){"Enter"===t.key&&(v.value!=u?O():y.innerHTML="Broj pogodaka: "+(++c).toString(),f=!0,v.disabled=!0,p.innerHTML="Sačekajte sledeći broj")}));var T=n(86),j=(new T.Line("#progressBarDiv"),new T.Line(d,{strokeWidth:4,easing:"easeInOut",duration:l/2,color:"#7adbfa",trailColor:"#eee",trailWidth:1,svgStyle:{width:"100%",height:"100%"},from:{color:"#6de6e6"},to:{color:"#209696"},step:function(t,e){e.path.setAttribute("stroke",t.color)}}))}var Et=document.body;Et.style.height="98vh",Et.id="celaStrana";var Pt=document.createElement("div");Pt.id="leviDeoStrane",Pt.style.display="none",Et.appendChild(Pt);var Ct=document.createElement("div");Ct.id="desniDeoStrane",Ct.style.display="none",Et.appendChild(Ct),function(){var t=document.createElement("div");t.id="pocetniPrikaz",Et.appendChild(t);var e=document.createElement("div");t.appendChild(e);var n=document.createElement("div");n.style.display="none",t.appendChild(n);var r=document.createElement("label");r.innerHTML="Prikaži uputstva za igre",r.className="labeleNaPocetku",r.onclick=function(e){r.style.display="none",n.style.display="block",t.style.width="50%"},t.appendChild(r);var i=document.createElement("label");i.className="labeleNaPocetku",i.innerHTML="Nick name: ",i.style.marginRight="15px",e.appendChild(i);var o=document.createElement("input");o.placeholder="unesite nick",o.style.letterSpacing="0",o.className="nickInput",e.appendChild(o);var a=document.createElement("label");a.innerHTML="1. Prilikom startovanja prve igre timer odmah počinje da odbrojava, tako da budite spremni. Potrebno je pronaći ključ na ekranu. Da biste to uspeli potrebno je koristiti krugove sa leve strane koji pomeranjem miša pokazuju vašu udaljenost od ključa. Kada mu se dovoljno približite ključ će postati vidljiv, a potom je potrebno kliknuti na njega, čime će se timer pauzirati i pokrenuti druga igra.",a.className="labeleNaPocetku",n.appendChild(a);var u=document.createElement("label");u.className="labeleNaPocetku",u.innerHTML="2. U drugoj igri je potrebno pamtiti reči koje se prikazuju na ekranu, za svaku reč imate 2.5 sekundi da odgovorite da li je ona već viđena ili nova. Kada utvrdite potrebno je kliknuti na dugme i time će se rezultat za tu igru povećati ili ostati nepromenjen ukoliko ste pogrešili.",n.appendChild(u);var s=document.createElement("label");s.className="labeleNaPocetku",s.innerHTML="3. U trećoj igri imate 3 života, i igra traje dokle god imate barem jedan preostao život. Oni su predstavljeni slicicom srca sa leve strane, i svakim pogrešnim unosom gubite po jedan život. Do 5 brojeva imate po 4 sekundi da zapamtite i po 4 sekundi da odgovorite, a posle toga se vreme produžava za po jednu sekundu na svakih 5 dodatnih brojeva.",n.appendChild(s);var c=document.createElement("label");c.innerHTML='Klikom na dugme "pokreni igru" počeće prva igra, tako da budite spremni!',c.className="labeleNaPocetku",n.appendChild(c);var l=document.createElement("button");l.className="dugmeZaRec",l.innerHTML="Pokreni!",t.appendChild(l),l.onclick=function(e){""!=o.value?(Pt.style.display="flex",Ct.style.display="flex",t.style.display="none",o.value.toString(),jt(Pt,Ct,"Teodor",1002,10)):o.classList.toggle("shakeAnimacija")},o.addEventListener("keydown",(function(t){"Enter"===t.key&&l.click()}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7MkJBRUEsSUFBSUEsRUFBUSxFQUFRLEtBQ2hCQyxFQUFRLEVBQVEsS0FFaEJDLEVBQVMsU0FBZ0JDLEVBQVdDLEdBR3BDQyxLQUFLQyxjQUNELHFHQUlKRCxLQUFLRSxxQkFBdUIsRUFFNUJQLEVBQU1RLE1BQU1ILEtBQU1JLFVBQ3RCLEdBRUFQLEVBQU9RLFVBQVksSUFBSVYsR0FDTlcsWUFBY1QsRUFFL0JBLEVBQU9RLFVBQVVFLFlBQWMsU0FBcUJDLEdBQ2hELElBQUlDLEVBQWVELEVBQUtFLFlBQ3BCRixFQUFLRyxZQUFjSCxFQUFLRyxXQUFhSCxFQUFLRSxjQUMxQ0QsRUFBZUQsRUFBS0csWUFHeEIsSUFBSUMsRUFBSSxHQUFLSCxFQUFlLEVBRTVCLE9BQU9iLEVBQU1pQixPQUFPYixLQUFLQyxjQUFlLENBQ3BDYSxPQUFRRixFQUNSLFVBQWUsRUFBSkEsR0FFbkIsRUFFQWYsRUFBT1EsVUFBVVUsYUFBZSxTQUFzQlAsR0FDbEQsT0FBT1IsS0FBS08sWUFBWUMsRUFDNUIsRUFFQVEsRUFBT0MsUUFBVXBCLGlCQ3JDakIsSUFBSUYsRUFBUSxFQUFRLEtBQ2hCQyxFQUFRLEVBQVEsS0FFaEJzQixFQUFPLFNBQWNwQixFQUFXQyxHQUNoQ0MsS0FBS0MsY0FBZ0IsOEJBQ3JCTixFQUFNUSxNQUFNSCxLQUFNSSxVQUN0QixHQUVBYyxFQUFLYixVQUFZLElBQUlWLEdBQ05XLFlBQWNZLEVBRTdCQSxFQUFLYixVQUFVYyxlQUFpQixTQUF3QkMsRUFBS1osR0FDekRZLEVBQUlDLGFBQWEsVUFBVyxXQUFhYixFQUFLRSxhQUM5Q1UsRUFBSUMsYUFBYSxzQkFBdUIsT0FDNUMsRUFFQUgsRUFBS2IsVUFBVUUsWUFBYyxTQUFxQkMsR0FDOUMsT0FBT1osRUFBTWlCLE9BQU9iLEtBQUtDLGNBQWUsQ0FDcENxQixPQUFRZCxFQUFLRSxZQUFjLEdBRW5DLEVBRUFRLEVBQUtiLFVBQVVVLGFBQWUsU0FBc0JQLEdBQ2hELE9BQU9SLEtBQUtPLFlBQVlDLEVBQzVCLEVBRUFRLEVBQU9DLFFBQVVDLGdCQzVCakJGLEVBQU9DLFFBQVUsQ0FFYkMsS0FBTSxFQUFRLEtBQ2RyQixPQUFRLEVBQVEsS0FDaEIwQixXQUFZLEVBQVEsS0FDcEJDLE9BQVEsRUFBUSxLQUdoQkMsS0FBTSxFQUFRLEtBS2Q5QixNQUFPLEVBQVEsS0FHZkMsTUFBTyxFQUFRLHFCQ2RuQixJQUFJOEIsRUFBUyxFQUFRLEtBQ2pCOUIsRUFBUSxFQUFRLEtBRWhCK0IsRUFBWUQsRUFBT0MsVUFFbkJDLEVBQWlCLENBQ2pCQyxPQUFRLGNBQ1JDLFFBQVMsZUFDVEMsVUFBVyxrQkFHWE4sRUFBTyxTQUFTQSxFQUFLTyxFQUFNeEIsR0FFM0IsS0FBTVIsZ0JBQWdCeUIsR0FDbEIsTUFBTSxJQUFJUSxNQUFNLDhDQWFwQixJQUFJQyxFQVRKMUIsRUFBT1osRUFBTXVDLE9BQU8sQ0FDaEJDLE1BQU8sRUFDUEMsU0FBVSxJQUNWQyxPQUFRLFNBQ1JDLEtBQU0sQ0FBQyxFQUNQQyxHQUFJLENBQUMsRUFDTEMsS0FBTSxXQUFZLEdBQ25CakMsR0FJQzBCLEVBREF0QyxFQUFNOEMsU0FBU1YsR0FDTFcsU0FBU0MsY0FBY1osR0FFdkJBLEVBSWRoQyxLQUFLZ0MsS0FBT0UsRUFDWmxDLEtBQUs2QyxNQUFRckMsRUFDYlIsS0FBSzhDLFdBQWEsS0FHbEIsSUFBSUMsRUFBUy9DLEtBQUtnQyxLQUFLZ0IsaUJBQ3ZCaEQsS0FBS2dDLEtBQUtpQixNQUFNQyxnQkFBa0JILEVBQVMsSUFBTUEsRUFDakQvQyxLQUFLbUQsSUFBSSxFQUNiLEVBRUExQixFQUFLcEIsVUFBVStDLE1BQVEsV0FDbkIsSUFBSUMsRUFBU3JELEtBQUtzRCx5QkFDZFAsRUFBUy9DLEtBQUtnQyxLQUFLZ0IsaUJBS3ZCLE9BQU9PLFlBSFEsRUFBSUYsRUFBU04sR0FHRFMsUUFBUSxHQUFJLEdBQzNDLEVBRUEvQixFQUFLcEIsVUFBVThDLElBQU0sU0FBYU0sR0FDOUJ6RCxLQUFLMEQsT0FFTDFELEtBQUtnQyxLQUFLaUIsTUFBTVUsaUJBQW1CM0QsS0FBSzRELGtCQUFrQkgsR0FFMUQsSUFBSWhCLEVBQU96QyxLQUFLNkMsTUFBTUosS0FDdEIsR0FBSTdDLEVBQU1pRSxXQUFXcEIsR0FBTyxDQUN4QixJQUFJSCxFQUFTdEMsS0FBSzhELFFBQVE5RCxLQUFLNkMsTUFBTVAsUUFHckNHLEVBRmF6QyxLQUFLK0QsYUFBYU4sRUFBVW5CLEdBQ3pCdEMsS0FBSzZDLE1BQU1tQixPQUFTaEUsS0FDWkEsS0FBSzZDLE1BQU1vQixXQUN2QyxDQUNKLEVBRUF4QyxFQUFLcEIsVUFBVXFELEtBQU8sV0FDbEIxRCxLQUFLa0UsYUFDTGxFLEtBQUtnQyxLQUFLaUIsTUFBTVUsaUJBQW1CM0QsS0FBS3NELHdCQUM1QyxFQUlBN0IsRUFBS3BCLFVBQVU4RCxRQUFVLFNBQWlCVixFQUFVakQsRUFBTTRELEdBQ3RENUQsRUFBT0EsR0FBUSxDQUFDLEVBRVpaLEVBQU1pRSxXQUFXckQsS0FDakI0RCxFQUFLNUQsRUFDTEEsRUFBTyxDQUFDLEdBR1osSUFBSTZELEVBQWF6RSxFQUFNdUMsT0FBTyxDQUFDLEVBQUczQixHQUc5QjhELEVBQWMxRSxFQUFNdUMsT0FBTyxDQUFDLEVBQUduQyxLQUFLNkMsT0FDeENyQyxFQUFPWixFQUFNdUMsT0FBT21DLEVBQWE5RCxHQUVqQyxJQUFJK0QsRUFBZXZFLEtBQUs4RCxRQUFRdEQsRUFBSzhCLFFBQ2pDa0MsRUFBU3hFLEtBQUt5RSxrQkFBa0JoQixFQUFVYyxFQUFjRixHQUU1RHJFLEtBQUswRCxPQUlMMUQsS0FBS2dDLEtBQUswQyx3QkFFVixJQUFJckIsRUFBU3JELEtBQUtzRCx5QkFDZHFCLEVBQVkzRSxLQUFLNEQsa0JBQWtCSCxHQUVuQ21CLEVBQU81RSxLQUNYQSxLQUFLOEMsV0FBYSxJQUFJbkIsRUFDdEIzQixLQUFLOEMsV0FBVytCLE1BQU0sQ0FDbEJ0QyxLQUFNM0MsRUFBTXVDLE9BQU8sQ0FBRWtCLE9BQVFBLEdBQVVtQixFQUFPakMsTUFDOUNDLEdBQUk1QyxFQUFNdUMsT0FBTyxDQUFFa0IsT0FBUXNCLEdBQWFILEVBQU9oQyxJQUMvQ0gsU0FBVTdCLEVBQUs2QixTQUNmRCxNQUFPNUIsRUFBSzRCLE1BQ1pFLE9BQVFpQyxFQUNSOUIsS0FBTSxTQUFTcUMsR0FDWEYsRUFBSzVDLEtBQUtpQixNQUFNVSxpQkFBbUJtQixFQUFNekIsT0FDekMsSUFBSTBCLEVBQVl2RSxFQUFLd0QsT0FBU1ksRUFDOUJwRSxFQUFLaUMsS0FBS3FDLEVBQU9DLEVBQVd2RSxFQUFLeUQsV0FDckMsSUFDRGUsTUFBSyxTQUFTRixHQUNUbEYsRUFBTWlFLFdBQVdPLElBQ2pCQSxHQUVSLEdBQ0osRUFFQTNDLEVBQUtwQixVQUFVaUQsdUJBQXlCLFdBQ3BDLElBQUkyQixFQUFnQkMsT0FBT0MsaUJBQWlCbkYsS0FBS2dDLEtBQU0sTUFDdkQsT0FBT3VCLFdBQVcwQixFQUFjRyxpQkFBaUIscUJBQXNCLEdBQzNFLEVBRUEzRCxFQUFLcEIsVUFBVXVELGtCQUFvQixTQUEyQkgsR0FDMUQsSUFBSVYsRUFBUy9DLEtBQUtnQyxLQUFLZ0IsaUJBQ3ZCLE9BQU9ELEVBQVNVLEVBQVdWLENBQy9CLEVBR0F0QixFQUFLcEIsVUFBVW9FLGtCQUFvQixTQUEyQmhCLEVBQVVuQixFQUFROUIsR0FDNUUsT0FBSUEsRUFBSytCLE1BQVEvQixFQUFLZ0MsR0FDWCxDQUNIRCxLQUFNL0IsRUFBSytCLEtBQ1hDLEdBQUloQyxFQUFLZ0MsSUFJVixDQUNIRCxLQUFNdkMsS0FBS3FGLGVBQWUvQyxHQUMxQkUsR0FBSXhDLEtBQUsrRCxhQUFhTixFQUFVbkIsR0FFeEMsRUFHQWIsRUFBS3BCLFVBQVVnRixlQUFpQixTQUF3Qi9DLEdBQ3BELE9BQU9aLEVBQU80RCxZQUFZdEYsS0FBSzZDLE1BQU1OLEtBQU12QyxLQUFLNkMsTUFBTUwsR0FBSXhDLEtBQUtvRCxRQUFTZCxFQUM1RSxFQUdBYixFQUFLcEIsVUFBVTBELGFBQWUsU0FBc0JOLEVBQVVuQixHQUMxRCxPQUFPWixFQUFPNEQsWUFBWXRGLEtBQUs2QyxNQUFNTixLQUFNdkMsS0FBSzZDLE1BQU1MLEdBQUlpQixFQUFVbkIsRUFDeEUsRUFFQWIsRUFBS3BCLFVBQVU2RCxXQUFhLFdBQ0EsT0FBcEJsRSxLQUFLOEMsYUFDTDlDLEtBQUs4QyxXQUFXWSxPQUNoQjFELEtBQUs4QyxXQUFhLEtBRTFCLEVBRUFyQixFQUFLcEIsVUFBVXlELFFBQVUsU0FBaUJ4QixHQUN0QyxPQUFJVixFQUFlMkQsZUFBZWpELEdBQ3ZCVixFQUFlVSxHQUduQkEsQ0FDWCxFQUVBdEIsRUFBT0MsUUFBVVEsaUJDNUtqQixJQUFJOUIsRUFBUSxFQUFRLEtBQ2hCRSxFQUFTLEVBQVEsS0FDakJELEVBQVEsRUFBUSxLQUVoQjJCLEVBQWEsU0FBb0J6QixFQUFXQyxHQUc1Q0MsS0FBS0MsY0FDRCw4REFHSkQsS0FBS0UscUJBQXVCLEVBRTVCUCxFQUFNUSxNQUFNSCxLQUFNSSxVQUN0QixHQUVBbUIsRUFBV2xCLFVBQVksSUFBSVYsR0FDTlcsWUFBY2lCLEVBRW5DQSxFQUFXbEIsVUFBVWMsZUFBaUIsU0FBd0JDLEVBQUtaLEdBQy9EWSxFQUFJQyxhQUFhLFVBQVcsYUFDaEMsRUFFQUUsRUFBV2xCLFVBQVVtRix5QkFBMkIsU0FDNUNoRixFQUNBVixFQUNBMkYsR0FFSWpGLEVBQUtrRixLQUFLekMsUUFFVndDLEVBQWN4QyxNQUFNMEMsSUFBTSxPQUMxQkYsRUFBY3hDLE1BQU0yQyxPQUFTLElBRXpCcEYsRUFBS2tGLEtBQUtHLGNBQ1ZqRyxFQUFNa0csU0FBU0wsRUFBZSxZQUFhLHNCQUUzQzdGLEVBQU1rRyxTQUFTTCxFQUFlLFlBQWEsd0JBR3ZELEVBR0FsRSxFQUFXbEIsVUFBVUUsWUFBY1YsRUFBT1EsVUFBVUUsWUFDcERnQixFQUFXbEIsVUFBVVUsYUFBZWxCLEVBQU9RLFVBQVVVLGFBRXJEQyxFQUFPQyxRQUFVTSxpQkM3Q2pCLElBQUlFLEVBQU8sRUFBUSxLQUNmN0IsRUFBUSxFQUFRLEtBRWhCbUcsRUFBa0Isc0JBRWxCcEcsRUFBUSxTQUFTQSxFQUFNRyxFQUFXVSxHQUdsQyxLQUFNUixnQkFBZ0JMLEdBQ2xCLE1BQU0sSUFBSXNDLE1BQU0sOENBU3BCLEdBQXlCLElBQXJCN0IsVUFBVTJDLE9BQWQsQ0FLQS9DLEtBQUs2QyxNQUFRakQsRUFBTXVDLE9BQU8sQ0FDdEI2RCxNQUFPLE9BQ1B0RixZQUFhLEVBQ2J1RixXQUFZLEtBQ1p0RixXQUFZLEtBQ1p1RixLQUFNLEtBQ05SLEtBQU0sQ0FDRnpDLE1BQU8sQ0FDSCtDLE1BQU8sS0FDUEcsU0FBVSxXQUNWQyxLQUFNLE1BQ05ULElBQUssTUFDTFUsUUFBUyxFQUNUQyxPQUFRLEVBQ1JDLFVBQVcsQ0FDUEMsUUFBUSxFQUNScEQsTUFBTywwQkFHZnFELG9CQUFvQixFQUNwQlosZUFBZSxFQUNmekMsTUFBTyxLQUNQc0QsVUFBVyxvQkFFZkMsU0FBVSxDQUNOQyxRQUFTLFFBQ1RDLE1BQU8sUUFFWEMsVUFBVSxHQUNYdEcsR0FBTSxHQUlMWixFQUFNbUgsU0FBU3ZHLFNBQTJCd0csSUFBbEJ4RyxFQUFLbUcsV0FDN0IzRyxLQUFLNkMsTUFBTThELFNBQVduRyxFQUFLbUcsVUFFM0IvRyxFQUFNbUgsU0FBU3ZHLElBQVNaLEVBQU1tSCxTQUFTdkcsRUFBS2tGLFlBQTZCc0IsSUFBcEJ4RyxFQUFLa0YsS0FBS3pDLFFBQy9EakQsS0FBSzZDLE1BQU02QyxLQUFLekMsTUFBUXpDLEVBQUtrRixLQUFLekMsT0FHdEMsSUFFSWYsRUFGQStFLEVBQVVqSCxLQUFLa0gsZUFBZWxILEtBQUs2QyxPQVN2QyxLQUxJWCxFQURBdEMsRUFBTThDLFNBQVM1QyxHQUNMNkMsU0FBU0MsY0FBYzlDLEdBRXZCQSxHQUlWLE1BQU0sSUFBSW1DLE1BQU0sNkJBQStCbkMsR0FHbkRFLEtBQUttSCxXQUFhakYsRUFDbEJsQyxLQUFLbUgsV0FBV0MsWUFBWUgsRUFBUTdGLEtBQ2hDcEIsS0FBSzZDLE1BQU1pRSxVQUNYOUcsS0FBS3FILDBCQUEwQnJILEtBQUttSCxZQUdwQ25ILEtBQUs2QyxNQUFNOEQsVUFDWC9HLEVBQU0wSCxVQUFVTCxFQUFRN0YsSUFBS3BCLEtBQUs2QyxNQUFNOEQsVUFJNUMzRyxLQUFLb0IsSUFBTTZGLEVBQVE3RixJQUNuQnBCLEtBQUtnQyxLQUFPaUYsRUFBUWpGLEtBQ3BCaEMsS0FBS3VILE1BQVFOLEVBQVFNLE1BQ3JCdkgsS0FBSzBGLEtBQU8sS0FFWixJQUFJOEIsRUFBVTVILEVBQU11QyxPQUFPLENBQ3ZCOEIsZ0JBQVkrQyxFQUNaaEQsTUFBT2hFLE1BQ1JBLEtBQUs2QyxPQUNSN0MsS0FBS3lILGNBQWdCLElBQUloRyxFQUFLd0YsRUFBUWpGLEtBQU13RixHQUV4QzVILEVBQU1tSCxTQUFTL0csS0FBSzZDLE1BQU02QyxPQUFtQyxPQUExQjFGLEtBQUs2QyxNQUFNNkMsS0FBS3RDLE9BQ25EcEQsS0FBSzBILFFBQVExSCxLQUFLNkMsTUFBTTZDLEtBQUt0QyxNQS9FakMsQ0FpRkosRUFFQXpELEVBQU1VLFVBQVU4RCxRQUFVLFNBQWlCVixFQUFVakQsRUFBTTRELEdBQ3ZELEdBQTJCLE9BQXZCcEUsS0FBS3lILGNBQ0wsTUFBTSxJQUFJeEYsTUFBTThELEdBR3BCL0YsS0FBS3lILGNBQWN0RCxRQUFRVixFQUFVakQsRUFBTTRELEVBQy9DLEVBRUF6RSxFQUFNVSxVQUFVcUQsS0FBTyxXQUNuQixHQUEyQixPQUF2QjFELEtBQUt5SCxjQUNMLE1BQU0sSUFBSXhGLE1BQU04RCxRQUlPaUIsSUFBdkJoSCxLQUFLeUgsZUFJVHpILEtBQUt5SCxjQUFjL0QsTUFDdkIsRUFFQS9ELEVBQU1VLFVBQVVzSCxNQUFRLFdBQ3BCLEdBQTJCLE9BQXZCM0gsS0FBS3lILGNBQ0wsTUFBTSxJQUFJeEYsTUFBTThELFFBR09pQixJQUF2QmhILEtBQUt5SCxlQUlKekgsS0FBS3lILGNBQWMzRSxZQUt4QjlDLEtBQUt5SCxjQUFjM0UsV0FBVzZFLE9BQ2xDLEVBRUFoSSxFQUFNVSxVQUFVdUgsT0FBUyxXQUNyQixHQUEyQixPQUF2QjVILEtBQUt5SCxjQUNMLE1BQU0sSUFBSXhGLE1BQU04RCxRQUdPaUIsSUFBdkJoSCxLQUFLeUgsZUFJSnpILEtBQUt5SCxjQUFjM0UsWUFLeEI5QyxLQUFLeUgsY0FBYzNFLFdBQVc4RSxRQUNsQyxFQUVBakksRUFBTVUsVUFBVXdILFFBQVUsV0FDdEIsR0FBMkIsT0FBdkI3SCxLQUFLeUgsY0FDTCxNQUFNLElBQUl4RixNQUFNOEQsR0FHcEIvRixLQUFLMEQsT0FDTDFELEtBQUtvQixJQUFJMEcsV0FBV0MsWUFBWS9ILEtBQUtvQixLQUNyQ3BCLEtBQUtvQixJQUFNLEtBQ1hwQixLQUFLZ0MsS0FBTyxLQUNaaEMsS0FBS3VILE1BQVEsS0FDYnZILEtBQUt5SCxjQUFnQixLQUVILE9BQWR6SCxLQUFLMEYsT0FDTDFGLEtBQUswRixLQUFLb0MsV0FBV0MsWUFBWS9ILEtBQUswRixNQUN0QzFGLEtBQUswRixLQUFPLEtBRXBCLEVBRUEvRixFQUFNVSxVQUFVOEMsSUFBTSxTQUFhTSxHQUMvQixHQUEyQixPQUF2QnpELEtBQUt5SCxjQUNMLE1BQU0sSUFBSXhGLE1BQU04RCxHQUdwQi9GLEtBQUt5SCxjQUFjdEUsSUFBSU0sRUFDM0IsRUFFQTlELEVBQU1VLFVBQVUrQyxNQUFRLFdBQ3BCLEdBQTJCLE9BQXZCcEQsS0FBS3lILGNBQ0wsTUFBTSxJQUFJeEYsTUFBTThELEdBR3BCLFlBQTJCaUIsSUFBdkJoSCxLQUFLeUgsY0FDRSxFQUdKekgsS0FBS3lILGNBQWNyRSxPQUM5QixFQUVBekQsRUFBTVUsVUFBVXFILFFBQVUsU0FBaUJNLEdBQ3ZDLEdBQTJCLE9BQXZCaEksS0FBS3lILGNBQ0wsTUFBTSxJQUFJeEYsTUFBTThELEdBR0YsT0FBZC9GLEtBQUswRixPQUVMMUYsS0FBSzBGLEtBQU8xRixLQUFLaUkscUJBQXFCakksS0FBSzZDLE1BQU83QyxLQUFLbUgsWUFDdkRuSCxLQUFLbUgsV0FBV0MsWUFBWXBILEtBQUswRixPQUlqQzlGLEVBQU1tSCxTQUFTaUIsSUFDZnBJLEVBQU1zSSxlQUFlbEksS0FBSzBGLE1BQzFCMUYsS0FBSzBGLEtBQUswQixZQUFZWSxJQUV0QmhJLEtBQUswRixLQUFLeUMsVUFBWUgsQ0FFOUIsRUFFQXJJLEVBQU1VLFVBQVU2RyxlQUFpQixTQUF3QjFHLEdBQ3JELElBQUlZLEVBQU11QixTQUFTeUYsZ0JBQWdCLDZCQUE4QixPQUNqRXBJLEtBQUttQixlQUFlQyxFQUFLWixHQUV6QixJQUFJNkgsRUFBWSxNQUdaN0gsRUFBS3lGLFlBQWN6RixFQUFLRyxjQUN4QjBILEVBQVlySSxLQUFLc0ksYUFBYTlILEdBQzlCWSxFQUFJZ0csWUFBWWlCLElBR3BCLElBQUlyRyxFQUFPaEMsS0FBS3VJLFlBQVkvSCxHQUc1QixPQUZBWSxFQUFJZ0csWUFBWXBGLEdBRVQsQ0FDSFosSUFBS0EsRUFDTFksS0FBTUEsRUFDTnVGLE1BQU9jLEVBRWYsRUFFQTFJLEVBQU1VLFVBQVVjLGVBQWlCLFNBQXdCQyxFQUFLWixHQUMxRFksRUFBSUMsYUFBYSxVQUFXLGNBQ2hDLEVBRUExQixFQUFNVSxVQUFVa0ksWUFBYyxTQUFxQi9ILEdBQy9DLElBQUlnSSxFQUFheEksS0FBS08sWUFBWUMsR0FDbEMsT0FBT1IsS0FBS3lJLG1CQUFtQkQsRUFBWWhJLEVBQy9DLEVBRUFiLEVBQU1VLFVBQVVpSSxhQUFlLFNBQXNCOUgsR0FFakQsSUFBSWdJLEVBQWF4SSxLQUFLZSxhQUFhUCxHQUcvQmdILEVBQVU1SCxFQUFNdUMsT0FBTyxDQUFDLEVBQUczQixHQWlCL0IsT0FkS2dILEVBQVF2QixhQUNUdUIsRUFBUXZCLFdBQWEsUUFFcEJ1QixFQUFRN0csYUFDVDZHLEVBQVE3RyxXQUFhNkcsRUFBUTlHLGFBR2pDOEcsRUFBUXhCLE1BQVF3QixFQUFRdkIsV0FDeEJ1QixFQUFROUcsWUFBYzhHLEVBQVE3RyxXQUk5QjZHLEVBQVF0QixLQUFPLEtBRVJsRyxLQUFLeUksbUJBQW1CRCxFQUFZaEIsRUFDL0MsRUFFQTdILEVBQU1VLFVBQVVvSSxtQkFBcUIsU0FBNEJELEVBQVloSSxHQUN6RSxJQUFJd0IsRUFBT1csU0FBU3lGLGdCQUFnQiw2QkFBOEIsUUFXbEUsT0FWQXBHLEVBQUtYLGFBQWEsSUFBS21ILEdBQ3ZCeEcsRUFBS1gsYUFBYSxTQUFVYixFQUFLd0YsT0FDakNoRSxFQUFLWCxhQUFhLGVBQWdCYixFQUFLRSxhQUVuQ0YsRUFBSzBGLEtBQ0xsRSxFQUFLWCxhQUFhLE9BQVFiLEVBQUswRixNQUUvQmxFLEVBQUtYLGFBQWEsZUFBZ0IsS0FHL0JXLENBQ1gsRUFFQXJDLEVBQU1VLFVBQVU0SCxxQkFBdUIsU0FBOEJ6SCxFQUFNVixHQUN2RSxJQUFJMkYsRUFBZ0I5QyxTQUFTK0YsY0FBYyxPQUMzQ2pELEVBQWNpQixVQUFZbEcsRUFBS2tGLEtBQUtnQixVQUVwQyxJQUFJaUMsRUFBWW5JLEVBQUtrRixLQUFLekMsTUFjMUIsT0FiSTBGLElBQ0luSSxFQUFLa0YsS0FBS2UscUJBQ1YzRyxFQUFVbUQsTUFBTWtELFNBQVcsWUFHL0J2RyxFQUFNMEgsVUFBVTdCLEVBQWVrRCxHQUUxQkEsRUFBVTNDLFFBQ1hQLEVBQWN4QyxNQUFNK0MsTUFBUXhGLEVBQUt3RixRQUl6Q2hHLEtBQUt3Rix5QkFBeUJoRixFQUFNVixFQUFXMkYsR0FDeENBLENBQ1gsRUFHQTlGLEVBQU1VLFVBQVVtRix5QkFBMkIsU0FBU2hGLEVBQU1WLEVBQVdvQyxHQUdyRSxFQUVBdkMsRUFBTVUsVUFBVUUsWUFBYyxTQUFxQkMsR0FDL0MsTUFBTSxJQUFJeUIsTUFBTSwrQ0FDcEIsRUFFQXRDLEVBQU1VLFVBQVVVLGFBQWUsU0FBc0JQLEdBQ2pELE1BQU0sSUFBSXlCLE1BQU0sK0NBQ3BCLEVBRUF0QyxFQUFNVSxVQUFVZ0gsMEJBQTRCLFNBQW1DdkgsR0FDM0UsR0FBS0UsS0FBS0UscUJBQVYsQ0FJQSxJQUFJK0UsRUFBZ0JDLE9BQU9DLGlCQUFpQnJGLEVBQVcsTUFDbkQrRyxFQUFRdEQsV0FBVzBCLEVBQWNHLGlCQUFpQixTQUFVLElBQzVEd0QsRUFBU3JGLFdBQVcwQixFQUFjRyxpQkFBaUIsVUFBVyxJQUM3RHhGLEVBQU1pSixZQUFZN0ksS0FBS0UscUJBQXNCMkcsRUFBUStCLEtBQ3RERSxRQUFRQyxLQUNKLHNDQUNBLElBQU1qSixFQUFVa0osR0FDaEIsWUFDQS9ELEVBQWNHLGlCQUFpQixTQUFXLFVBQzFDLElBQ0FILEVBQWNHLGlCQUFpQixVQUFZLFdBQzNDLElBQ0F5QixFQUFRK0IsR0FHWkUsUUFBUUMsS0FDSiw0QkFDQS9JLEtBQUtFLHNCQW5CYixDQXNCSixFQUVBYyxFQUFPQyxRQUFVdEIsaUJDMVZqQixJQUFJQSxFQUFRLEVBQVEsS0FDaEJDLEVBQVEsRUFBUSxLQUVoQjRCLEVBQVMsU0FBZ0IxQixFQUFXQyxHQUNwQ0MsS0FBS0MsY0FDRCw0SUFNSkQsS0FBS2lKLGVBQ0QsOEpBTUp0SixFQUFNUSxNQUFNSCxLQUFNSSxVQUN0QixHQUVBb0IsRUFBT25CLFVBQVksSUFBSVYsR0FDTlcsWUFBY2tCLEVBRS9CQSxFQUFPbkIsVUFBVUUsWUFBYyxTQUFxQkMsR0FDaEQsSUFBSTBJLEVBQUksSUFBTTFJLEVBQUtFLFlBQWMsRUFFakMsT0FBT2QsRUFBTWlCLE9BQU9iLEtBQUtDLGNBQWUsQ0FDcEM0RyxNQUFPcUMsRUFDUHhJLFlBQWFGLEVBQUtFLFlBQ2xCeUksa0JBQW1CM0ksRUFBS0UsWUFBYyxHQUU5QyxFQUVBYyxFQUFPbkIsVUFBVVUsYUFBZSxTQUFzQlAsR0FDbEQsSUFBSTBJLEVBQUksSUFBTTFJLEVBQUtFLFlBQWMsRUFFakMsT0FBT2QsRUFBTWlCLE9BQU9iLEtBQUtpSixlQUFnQixDQUNyQ3BDLE1BQU9xQyxFQUNQeEksWUFBYUYsRUFBS0UsWUFDbEJ5SSxrQkFBbUIzSSxFQUFLRSxZQUFjLEVBQ3RDMEksWUFBYTVJLEVBQUtFLFlBQWMsRUFBSUYsRUFBS0csV0FBYSxHQUU5RCxFQUVBSyxFQUFPQyxRQUFVTyxXQ2hEakIsSUFBSTZILEVBQVcsa0JBQWtCQyxNQUFNLEtBOEN2QyxTQUFTeEQsRUFBUzVELEVBQVNlLEVBQU9HLEdBRzlCLElBRkEsSUFBSW1HLEVBQVVySCxFQUFRZSxNQUVidUcsRUFBSSxFQUFHQSxFQUFJSCxFQUFTdEcsU0FBVXlHLEVBRW5DRCxFQURhRixFQUFTRyxHQUNMQyxFQUFXeEcsSUFBVUcsRUFHMUNtRyxFQUFRdEcsR0FBU0csQ0FDckIsQ0FvQkEsU0FBU3FHLEVBQVcvRCxHQUNoQixPQUFPQSxFQUFLZ0UsT0FBTyxHQUFHQyxjQUFnQmpFLEVBQUtrRSxNQUFNLEVBQ3JELENBZ0JBLFNBQVM3QyxFQUFTOEMsR0FDZCxPQVBKLFNBQWlCQSxHQUNiLE1BQStDLG1CQUF4Q0MsT0FBT3pKLFVBQVUwSixTQUFTQyxLQUFLSCxFQUMxQyxDQUtRSSxDQUFRSixJQUtJLGlCQURFQSxLQUNZQSxDQUNsQyxDQUVBLFNBQVNLLEVBQWNDLEVBQVFDLEdBQzNCLElBQUssSUFBSUMsS0FBT0YsRUFDUkEsRUFBTzVFLGVBQWU4RSxJQUV0QkQsRUFEVUQsRUFBT0UsR0FDSEEsRUFHMUIsQ0FhQXJKLEVBQU9DLFFBQVUsQ0FDYmtCLE9BdEhKLFNBQVNBLEVBQU9tSSxFQUFhQyxFQUFRQyxHQUtqQyxJQUFLLElBQUlDLEtBSlRILEVBQWNBLEdBQWUsQ0FBQyxFQUU5QkUsRUFBWUEsSUFBYSxFQUR6QkQsRUFBU0EsR0FBVSxDQUFDLEVBSWhCLEdBQUlBLEVBQU9oRixlQUFla0YsR0FBVyxDQUNqQyxJQUFJQyxFQUFVSixFQUFZRyxHQUN0QkUsRUFBWUosRUFBT0UsR0FDbkJELEdBQWF6RCxFQUFTMkQsSUFBWTNELEVBQVM0RCxHQUMzQ0wsRUFBWUcsR0FBWXRJLEVBQU91SSxFQUFTQyxFQUFXSCxHQUVuREYsRUFBWUcsR0FBWUUsQ0FFaEMsQ0FHSixPQUFPTCxDQUNYLEVBcUdJekosT0E5RkosU0FBZ0IrSixFQUFVQyxHQUN0QixJQUFJQyxFQUFXRixFQUVmLElBQUssSUFBSVAsS0FBT1EsRUFDWixHQUFJQSxFQUFLdEYsZUFBZThFLEdBQU0sQ0FDMUIsSUFBSVUsRUFBTUYsRUFBS1IsR0FFWFcsRUFBUyxJQUFJQyxPQURFLE1BQVFaLEVBQU0sTUFDSyxLQUV0Q1MsRUFBV0EsRUFBU0ksUUFBUUYsRUFBUUQsRUFDeEMsQ0FHSixPQUFPRCxDQUNYLEVBaUZJaEYsU0FBVUEsRUFDVndCLFVBckVKLFNBQW1CcEYsRUFBU2lKLEdBQ3hCakIsRUFBY2lCLEdBQVEsU0FBU0MsRUFBWUMsR0FHbkNELFVBTUFyRSxFQUFTcUUsS0FBcUMsSUFBdEJBLEVBQVc1RSxPQUNuQ1YsRUFBUzVELEVBQVNtSixFQUFXRCxFQUFXaEksT0FFeENsQixFQUFRZSxNQUFNb0ksR0FBYUQsRUFFbkMsR0FDSixFQXNESTNCLFdBQVlBLEVBQ1ovRyxTQWpESixTQUFrQm1ILEdBQ2QsTUFBc0IsaUJBQVJBLEdBQW9CQSxhQUFleUIsTUFDckQsRUFnREl6SCxXQTlDSixTQUFvQmdHLEdBQ2hCLE1BQXNCLG1CQUFSQSxDQUNsQixFQTZDSTlDLFNBQVVBLEVBQ1ZtRCxjQUFlQSxFQUNmckIsWUFyQkosU0FBcUIwQyxFQUFHQyxHQUNwQixPQUFPQyxLQUFLQyxJQUFJSCxFQUFJQyxHQS9HTyxJQWdIL0IsRUFvQkl0RCxlQWpCSixTQUF3QnlELEdBQ3BCLEtBQU9BLEVBQUdDLFlBQ05ELEVBQUc1RCxZQUFZNEQsRUFBR0MsV0FFMUIsWUN6SDBNaEgsS0FBekk1RCxFQUFPQyxRQUEwSixXQUFXLGFBQWEsSUFBSTRLLEVBQUUsQ0FBQyxJQUFJLFNBQVNBLEVBQUVDLEVBQUVDLEdBQUdBLEVBQUVuTCxFQUFFa0wsR0FBR0MsRUFBRUMsRUFBRUYsRUFBRSxDQUFDRyxNQUFNLFdBQVcsT0FBT0MsRUFBRSxFQUFFdkssVUFBVSxXQUFXLE9BQU93SyxFQUFFLEVBQUU3RyxZQUFZLFdBQVcsT0FBTzhHLEVBQUUsRUFBRUMsY0FBYyxXQUFXLE9BQU9DLEVBQUUsRUFBRUMsa0JBQWtCLFdBQVcsT0FBT0MsRUFBRSxFQUFFQyxxQkFBcUIsV0FBVyxPQUFPQyxFQUFFLEVBQUU3SCxNQUFNLFdBQVcsT0FBTzhILEVBQUUsRUFBRUMsb0JBQW9CLFdBQVcsT0FBT0MsRUFBRSxJQUFJLElBQUlqTSxFQUFFLENBQUMsRUFBRW1MLEVBQUVuTCxFQUFFQSxHQUFHbUwsRUFBRUMsRUFBRXBMLEVBQUUsQ0FBQ2tNLE9BQU8sV0FBVyxPQUFPQyxDQUFDLEVBQUVDLFdBQVcsV0FBVyxPQUFPQyxDQUFDLEVBQUVDLFNBQVMsV0FBVyxPQUFPQyxDQUFDLEVBQUVDLFdBQVcsV0FBVyxPQUFPQyxDQUFDLEVBQUVDLFdBQVcsV0FBVyxPQUFPQyxDQUFDLEVBQUVDLFdBQVcsV0FBVyxPQUFPQyxDQUFDLEVBQUVDLFlBQVksV0FBVyxPQUFPQyxDQUFDLEVBQUVDLFdBQVcsV0FBVyxPQUFPcEMsQ0FBQyxFQUFFcUMsY0FBYyxXQUFXLE9BQU9DLENBQUMsRUFBRUMsY0FBYyxXQUFXLE9BQU9DLENBQUMsRUFBRUMsZUFBZSxXQUFXLE9BQU9DLENBQUMsRUFBRUMsY0FBYyxXQUFXLE9BQU9DLENBQUMsRUFBRUMsY0FBYyxXQUFXLE9BQU9DLENBQUMsRUFBRUMsZUFBZSxXQUFXLE9BQU9DLENBQUMsRUFBRUMsZUFBZSxXQUFXLE9BQU96QyxDQUFDLEVBQUUwQyxjQUFjLFdBQVcsT0FBT3hGLENBQUMsRUFBRXlGLFdBQVcsV0FBVyxPQUFPQyxDQUFDLEVBQUVDLFlBQVksV0FBVyxPQUFPQyxDQUFDLEVBQUVDLFlBQVksV0FBVyxPQUFPQyxDQUFDLEVBQUVDLFdBQVcsV0FBVyxPQUFPQyxDQUFDLEVBQUVDLFlBQVksV0FBVyxPQUFPQyxDQUFDLEVBQUVDLGNBQWMsV0FBVyxPQUFPQyxDQUFDLEVBQUVDLFlBQVksV0FBVyxPQUFPQyxDQUFDLEVBQUVDLGFBQWEsV0FBVyxPQUFPQyxDQUFDLEVBQUVDLFlBQVksV0FBVyxPQUFPQyxDQUFDLEVBQUVDLFlBQVksV0FBVyxPQUFPdEUsQ0FBQyxFQUFFdUUsYUFBYSxXQUFXLE9BQU9DLENBQUMsRUFBRUMsYUFBYSxXQUFXLE9BQU9DLENBQUMsRUFBRUMsWUFBWSxXQUFXLE9BQU9DLENBQUMsRUFBRUMsT0FBTyxXQUFXLE9BQU9DLENBQUMsRUFBRUMsUUFBUSxXQUFXLE9BQU9DLENBQUMsRUFBRUMsT0FBTyxXQUFXLE9BQU9DLENBQUMsRUFBRUMsVUFBVSxXQUFXLE9BQU9DLENBQUMsRUFBRUMsWUFBWSxXQUFXLE9BQU9DLENBQUMsRUFBRUMsUUFBUSxXQUFXLE9BQU9DLENBQUMsSUFB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LFNBQVMrRixjQUFjLFNBQzFDMHBCLEVBQWFqcUIsVUFBWSwrWUFDekJpcUIsRUFBYTFyQixVQUFZLGtCQUN6QmtyQixFQUFXeHFCLFlBQVlnckIsR0FFdkIsSUFBSUMsRUFBZ0IxdkIsU0FBUytGLGNBQWMsU0FDM0MycEIsRUFBYzNyQixVQUFZLGtCQUMxQjJyQixFQUFjbHFCLFVBQVksNFJBQzFCeXBCLEVBQVd4cUIsWUFBWWlyQixHQUV2QixJQUFJQyxFQUFnQjN2QixTQUFTK0YsY0FBYyxTQUMzQzRwQixFQUFjNXJCLFVBQVksa0JBQzFCNHJCLEVBQWNucUIsVUFBWSw2VkFDMUJ5cEIsRUFBV3hxQixZQUFZa3JCLEdBRXZCLElBQUlDLEVBQVk1dkIsU0FBUytGLGNBQWMsU0FDdkM2cEIsRUFBVXBxQixVQUFZLDJFQUN0Qm9xQixFQUFVN3JCLFVBQVksa0JBQ3RCa3JCLEVBQVd4cUIsWUFBWW1yQixHQUV2QixJQUFJQyxFQUFvQjd2QixTQUFTK0YsY0FBYyxVQUMvQzhwQixFQUFrQjlyQixVQUFZLGFBQzlCOHJCLEVBQWtCcnFCLFVBQVksV0FDOUJ1cEIsRUFBY3RxQixZQUFZb3JCLEdBRzFCQSxFQUFrQlYsUUFBVSxTQUFDL2xCLEdBQ0UsSUFBdkJrbUIsRUFBYzd1QixPQUNkNm9CLEdBQWNocEIsTUFBTTJELFFBQVUsT0FDOUJzbEIsR0FBZWpwQixNQUFNMkQsUUFBVSxPQUMvQjhxQixFQUFjenVCLE1BQU0yRCxRQUFVLE9BQ25CcXJCLEVBQWM3dUIsTUFBTTJHLFdBRy9COGxCLEdBQWlCNUQsR0FBZUMsR0FBZ0IsU0FBVSxLQUFNLEtBR2hFK0YsRUFBY1EsVUFBVUMsT0FBTyxpQkFDdkMsRUFFQVQsRUFBY3JFLGlCQUFpQixXQUFXLFNBQVU3aEIsR0FDbEMsVUFBVkEsRUFBRTFCLEtBQ0Ztb0IsRUFBa0JHLE9BQzFCLEdBQ0osQ0FqRkFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3Byb2dyZXNzYmFyLmpzL3NyYy9jaXJjbGUuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3Byb2dyZXNzYmFyLmpzL3NyYy9saW5lLmpzIiwid2VicGFjazovL3J4anMtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9wcm9ncmVzc2Jhci5qcy9zcmMvbWFpbi5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcHJvZ3Jlc3NiYXIuanMvc3JjL3BhdGguanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3Byb2dyZXNzYmFyLmpzL3NyYy9zZW1pY2lyY2xlLmpzIiwid2VicGFjazovL3J4anMtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9wcm9ncmVzc2Jhci5qcy9zcmMvc2hhcGUuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3Byb2dyZXNzYmFyLmpzL3NyYy9zcXVhcmUuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3Byb2dyZXNzYmFyLmpzL3NyYy91dGlscy5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvc2hpZnR5L2Rpc3Qvc2hpZnR5LmpzIiwid2VicGFjazovL3J4anMtcHJvamVjdC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwid2VicGFjazovL3J4anMtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvci5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9jcmVhdGVFcnJvckNsYXNzLmpzIiwid2VicGFjazovL3J4anMtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2FyclJlbW92ZS5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovL3J4anMtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9jb25maWcuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbm9vcC5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvTm90aWZpY2F0aW9uRmFjdG9yaWVzLmpzIiwid2VicGFjazovL3J4anMtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2Vycm9yQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc3ltYm9sL29ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvcGlwZS5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FjdGlvbi5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2ludGVydmFsUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9Bc3luY0FjdGlvbi5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2RhdGVUaW1lc3RhbXBQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU2NoZWR1bGVyLmpzIiwid2VicGFjazovL3J4anMtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvYXN5bmMuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9Bc3luY1NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc1NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS90aW1lci5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0RhdGUuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbGlmdC5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL09wZXJhdG9yU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3RhcC5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21hcC5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0FycmF5TGlrZS5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0FzeW5jSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvci5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovL3J4anMtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvaW5uZXJGcm9tLmpzIiwid2VicGFjazovL3J4anMtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2V4ZWN1dGVTY2hlZHVsZS5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlTWFwLmpzIiwid2VicGFjazovL3J4anMtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VJbnRlcm5hbHMuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRBbGwuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZUFsbC5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9hcmdzLmpzIiwid2VicGFjazovL3J4anMtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvb2JzZXJ2ZU9uLmpzIiwid2VicGFjazovL3J4anMtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3Vic2NyaWJlT24uanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUFzeW5jSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvZnJvbS5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlZC5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZVByb21pc2UuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUl0ZXJhYmxlLmpzIiwid2VicGFjazovL3J4anMtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvZW1wdHkuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy90YWtlLmpzIiwid2VicGFjazovL3J4anMtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZGVsYXlXaGVuLmpzIiwid2VicGFjazovL3J4anMtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2NvbmNhdC5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2lnbm9yZUVsZW1lbnRzLmpzIiwid2VicGFjazovL3J4anMtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwVG8uanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vc3JjL21vZHVsZXMvS29yaXNuaWsudHMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vc3JjL21vZHVsZXMvcmV6dWx0YXRpLnRzIiwid2VicGFjazovL3J4anMtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3dpdGNoTWFwLmpzIiwid2VicGFjazovL3J4anMtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2RvbS9mZXRjaC5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9zcmMvbW9kdWxlcy90cmVjYUlncmEudHMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvaW50ZXJ2YWwuanMiLCJ3ZWJwYWNrOi8vcnhqcy1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9kZWxheS5qcyIsIndlYnBhY2s6Ly9yeGpzLXByb2plY3QvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ2lyY2xlIHNoYXBlZCBwcm9ncmVzcyBiYXJcblxudmFyIFNoYXBlID0gcmVxdWlyZSgnLi9zaGFwZScpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgQ2lyY2xlID0gZnVuY3Rpb24gQ2lyY2xlKGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgIC8vIFVzZSB0d28gYXJjcyB0byBmb3JtIGEgY2lyY2xlXG4gICAgLy8gU2VlIHRoaXMgYW5zd2VyIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzEwNDc3MzM0LzE0NDYwOTJcbiAgICB0aGlzLl9wYXRoVGVtcGxhdGUgPVxuICAgICAgICAnTSA1MCw1MCBtIDAsLXtyYWRpdXN9JyArXG4gICAgICAgICcgYSB7cmFkaXVzfSx7cmFkaXVzfSAwIDEgMSAwLHsycmFkaXVzfScgK1xuICAgICAgICAnIGEge3JhZGl1c30se3JhZGl1c30gMCAxIDEgMCwtezJyYWRpdXN9JztcblxuICAgIHRoaXMuY29udGFpbmVyQXNwZWN0UmF0aW8gPSAxO1xuXG4gICAgU2hhcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5cbkNpcmNsZS5wcm90b3R5cGUgPSBuZXcgU2hhcGUoKTtcbkNpcmNsZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDaXJjbGU7XG5cbkNpcmNsZS5wcm90b3R5cGUuX3BhdGhTdHJpbmcgPSBmdW5jdGlvbiBfcGF0aFN0cmluZyhvcHRzKSB7XG4gICAgdmFyIHdpZHRoT2ZXaWRlciA9IG9wdHMuc3Ryb2tlV2lkdGg7XG4gICAgaWYgKG9wdHMudHJhaWxXaWR0aCAmJiBvcHRzLnRyYWlsV2lkdGggPiBvcHRzLnN0cm9rZVdpZHRoKSB7XG4gICAgICAgIHdpZHRoT2ZXaWRlciA9IG9wdHMudHJhaWxXaWR0aDtcbiAgICB9XG5cbiAgICB2YXIgciA9IDUwIC0gd2lkdGhPZldpZGVyIC8gMjtcblxuICAgIHJldHVybiB1dGlscy5yZW5kZXIodGhpcy5fcGF0aFRlbXBsYXRlLCB7XG4gICAgICAgIHJhZGl1czogcixcbiAgICAgICAgJzJyYWRpdXMnOiByICogMlxuICAgIH0pO1xufTtcblxuQ2lyY2xlLnByb3RvdHlwZS5fdHJhaWxTdHJpbmcgPSBmdW5jdGlvbiBfdHJhaWxTdHJpbmcob3B0cykge1xuICAgIHJldHVybiB0aGlzLl9wYXRoU3RyaW5nKG9wdHMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDaXJjbGU7XG4iLCIvLyBMaW5lIHNoYXBlZCBwcm9ncmVzcyBiYXJcblxudmFyIFNoYXBlID0gcmVxdWlyZSgnLi9zaGFwZScpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgTGluZSA9IGZ1bmN0aW9uIExpbmUoY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgdGhpcy5fcGF0aFRlbXBsYXRlID0gJ00gMCx7Y2VudGVyfSBMIDEwMCx7Y2VudGVyfSc7XG4gICAgU2hhcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5cbkxpbmUucHJvdG90eXBlID0gbmV3IFNoYXBlKCk7XG5MaW5lLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExpbmU7XG5cbkxpbmUucHJvdG90eXBlLl9pbml0aWFsaXplU3ZnID0gZnVuY3Rpb24gX2luaXRpYWxpemVTdmcoc3ZnLCBvcHRzKSB7XG4gICAgc3ZnLnNldEF0dHJpYnV0ZSgndmlld0JveCcsICcwIDAgMTAwICcgKyBvcHRzLnN0cm9rZVdpZHRoKTtcbiAgICBzdmcuc2V0QXR0cmlidXRlKCdwcmVzZXJ2ZUFzcGVjdFJhdGlvJywgJ25vbmUnKTtcbn07XG5cbkxpbmUucHJvdG90eXBlLl9wYXRoU3RyaW5nID0gZnVuY3Rpb24gX3BhdGhTdHJpbmcob3B0cykge1xuICAgIHJldHVybiB1dGlscy5yZW5kZXIodGhpcy5fcGF0aFRlbXBsYXRlLCB7XG4gICAgICAgIGNlbnRlcjogb3B0cy5zdHJva2VXaWR0aCAvIDJcbiAgICB9KTtcbn07XG5cbkxpbmUucHJvdG90eXBlLl90cmFpbFN0cmluZyA9IGZ1bmN0aW9uIF90cmFpbFN0cmluZyhvcHRzKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BhdGhTdHJpbmcob3B0cyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpbmU7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvLyBIaWdoZXIgbGV2ZWwgQVBJLCBkaWZmZXJlbnQgc2hhcGVkIHByb2dyZXNzIGJhcnNcbiAgICBMaW5lOiByZXF1aXJlKCcuL2xpbmUnKSxcbiAgICBDaXJjbGU6IHJlcXVpcmUoJy4vY2lyY2xlJyksXG4gICAgU2VtaUNpcmNsZTogcmVxdWlyZSgnLi9zZW1pY2lyY2xlJyksXG4gICAgU3F1YXJlOiByZXF1aXJlKCcuL3NxdWFyZScpLFxuXG4gICAgLy8gTG93ZXIgbGV2ZWwgQVBJIHRvIHVzZSBhbnkgU1ZHIHBhdGhcbiAgICBQYXRoOiByZXF1aXJlKCcuL3BhdGgnKSxcblxuICAgIC8vIEJhc2UtY2xhc3MgZm9yIGNyZWF0aW5nIG5ldyBjdXN0b20gc2hhcGVzXG4gICAgLy8gdG8gYmUgaW4gbGluZSB3aXRoIHRoZSBBUEkgb2YgYnVpbHQtaW4gc2hhcGVzXG4gICAgLy8gVW5kb2N1bWVudGVkLlxuICAgIFNoYXBlOiByZXF1aXJlKCcuL3NoYXBlJyksXG5cbiAgICAvLyBJbnRlcm5hbCB1dGlscywgdW5kb2N1bWVudGVkLlxuICAgIHV0aWxzOiByZXF1aXJlKCcuL3V0aWxzJylcbn07XG4iLCIvLyBMb3dlciBsZXZlbCBBUEkgdG8gYW5pbWF0ZSBhbnkga2luZCBvZiBzdmcgcGF0aFxuXG52YXIgc2hpZnR5ID0gcmVxdWlyZSgnc2hpZnR5Jyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBUd2VlbmFibGUgPSBzaGlmdHkuVHdlZW5hYmxlO1xuXG52YXIgRUFTSU5HX0FMSUFTRVMgPSB7XG4gICAgZWFzZUluOiAnZWFzZUluQ3ViaWMnLFxuICAgIGVhc2VPdXQ6ICdlYXNlT3V0Q3ViaWMnLFxuICAgIGVhc2VJbk91dDogJ2Vhc2VJbk91dEN1YmljJ1xufTtcblxudmFyIFBhdGggPSBmdW5jdGlvbiBQYXRoKHBhdGgsIG9wdHMpIHtcbiAgICAvLyBUaHJvdyBhIGJldHRlciBlcnJvciBpZiBub3QgaW5pdGlhbGl6ZWQgd2l0aCBgbmV3YCBrZXl3b3JkXG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFBhdGgpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ29uc3RydWN0b3Igd2FzIGNhbGxlZCB3aXRob3V0IG5ldyBrZXl3b3JkJyk7XG4gICAgfVxuXG4gICAgLy8gRGVmYXVsdCBwYXJhbWV0ZXJzIGZvciBhbmltYXRpb25cbiAgICBvcHRzID0gdXRpbHMuZXh0ZW5kKHtcbiAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgIGR1cmF0aW9uOiA4MDAsXG4gICAgICAgIGVhc2luZzogJ2xpbmVhcicsXG4gICAgICAgIGZyb206IHt9LFxuICAgICAgICB0bzoge30sXG4gICAgICAgIHN0ZXA6IGZ1bmN0aW9uKCkge31cbiAgICB9LCBvcHRzKTtcblxuICAgIHZhciBlbGVtZW50O1xuICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihwYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50ID0gcGF0aDtcbiAgICB9XG5cbiAgICAvLyBSZXZlYWwgLnBhdGggYXMgcHVibGljIGF0dHJpYnV0ZVxuICAgIHRoaXMucGF0aCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5fb3B0cyA9IG9wdHM7XG4gICAgdGhpcy5fdHdlZW5hYmxlID0gbnVsbDtcblxuICAgIC8vIFNldCB1cCB0aGUgc3RhcnRpbmcgcG9zaXRpb25zXG4gICAgdmFyIGxlbmd0aCA9IHRoaXMucGF0aC5nZXRUb3RhbExlbmd0aCgpO1xuICAgIHRoaXMucGF0aC5zdHlsZS5zdHJva2VEYXNoYXJyYXkgPSBsZW5ndGggKyAnICcgKyBsZW5ndGg7XG4gICAgdGhpcy5zZXQoMCk7XG59O1xuXG5QYXRoLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgIHZhciBvZmZzZXQgPSB0aGlzLl9nZXRDb21wdXRlZERhc2hPZmZzZXQoKTtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5wYXRoLmdldFRvdGFsTGVuZ3RoKCk7XG5cbiAgICB2YXIgcHJvZ3Jlc3MgPSAxIC0gb2Zmc2V0IC8gbGVuZ3RoO1xuICAgIC8vIFJvdW5kIG51bWJlciB0byBwcmV2ZW50IHJldHVybmluZyB2ZXJ5IHNtYWxsIG51bWJlciBsaWtlIDFlLTMwLCB3aGljaFxuICAgIC8vIGlzIHByYWN0aWNhbGx5IDBcbiAgICByZXR1cm4gcGFyc2VGbG9hdChwcm9ncmVzcy50b0ZpeGVkKDYpLCAxMCk7XG59O1xuXG5QYXRoLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiBzZXQocHJvZ3Jlc3MpIHtcbiAgICB0aGlzLnN0b3AoKTtcblxuICAgIHRoaXMucGF0aC5zdHlsZS5zdHJva2VEYXNob2Zmc2V0ID0gdGhpcy5fcHJvZ3Jlc3NUb09mZnNldChwcm9ncmVzcyk7XG5cbiAgICB2YXIgc3RlcCA9IHRoaXMuX29wdHMuc3RlcDtcbiAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihzdGVwKSkge1xuICAgICAgICB2YXIgZWFzaW5nID0gdGhpcy5fZWFzaW5nKHRoaXMuX29wdHMuZWFzaW5nKTtcbiAgICAgICAgdmFyIHZhbHVlcyA9IHRoaXMuX2NhbGN1bGF0ZVRvKHByb2dyZXNzLCBlYXNpbmcpO1xuICAgICAgICB2YXIgcmVmZXJlbmNlID0gdGhpcy5fb3B0cy5zaGFwZSB8fCB0aGlzO1xuICAgICAgICBzdGVwKHZhbHVlcywgcmVmZXJlbmNlLCB0aGlzLl9vcHRzLmF0dGFjaG1lbnQpO1xuICAgIH1cbn07XG5cblBhdGgucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiBzdG9wKCkge1xuICAgIHRoaXMuX3N0b3BUd2VlbigpO1xuICAgIHRoaXMucGF0aC5zdHlsZS5zdHJva2VEYXNob2Zmc2V0ID0gdGhpcy5fZ2V0Q29tcHV0ZWREYXNoT2Zmc2V0KCk7XG59O1xuXG4vLyBNZXRob2QgaW50cm9kdWNlZCBoZXJlOlxuLy8gaHR0cDovL2pha2VhcmNoaWJhbGQuY29tLzIwMTMvYW5pbWF0ZWQtbGluZS1kcmF3aW5nLXN2Zy9cblBhdGgucHJvdG90eXBlLmFuaW1hdGUgPSBmdW5jdGlvbiBhbmltYXRlKHByb2dyZXNzLCBvcHRzLCBjYikge1xuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ob3B0cykpIHtcbiAgICAgICAgY2IgPSBvcHRzO1xuICAgICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgdmFyIHBhc3NlZE9wdHMgPSB1dGlscy5leHRlbmQoe30sIG9wdHMpO1xuXG4gICAgLy8gQ29weSBkZWZhdWx0IG9wdHMgdG8gbmV3IG9iamVjdCBzbyBkZWZhdWx0cyBhcmUgbm90IG1vZGlmaWVkXG4gICAgdmFyIGRlZmF1bHRPcHRzID0gdXRpbHMuZXh0ZW5kKHt9LCB0aGlzLl9vcHRzKTtcbiAgICBvcHRzID0gdXRpbHMuZXh0ZW5kKGRlZmF1bHRPcHRzLCBvcHRzKTtcblxuICAgIHZhciBzaGlmdHlFYXNpbmcgPSB0aGlzLl9lYXNpbmcob3B0cy5lYXNpbmcpO1xuICAgIHZhciB2YWx1ZXMgPSB0aGlzLl9yZXNvbHZlRnJvbUFuZFRvKHByb2dyZXNzLCBzaGlmdHlFYXNpbmcsIHBhc3NlZE9wdHMpO1xuXG4gICAgdGhpcy5zdG9wKCk7XG5cbiAgICAvLyBUcmlnZ2VyIGEgbGF5b3V0IHNvIHN0eWxlcyBhcmUgY2FsY3VsYXRlZCAmIHRoZSBicm93c2VyXG4gICAgLy8gcGlja3MgdXAgdGhlIHN0YXJ0aW5nIHBvc2l0aW9uIGJlZm9yZSBhbmltYXRpbmdcbiAgICB0aGlzLnBhdGguZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fZ2V0Q29tcHV0ZWREYXNoT2Zmc2V0KCk7XG4gICAgdmFyIG5ld09mZnNldCA9IHRoaXMuX3Byb2dyZXNzVG9PZmZzZXQocHJvZ3Jlc3MpO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuX3R3ZWVuYWJsZSA9IG5ldyBUd2VlbmFibGUoKTtcbiAgICB0aGlzLl90d2VlbmFibGUudHdlZW4oe1xuICAgICAgICBmcm9tOiB1dGlscy5leHRlbmQoeyBvZmZzZXQ6IG9mZnNldCB9LCB2YWx1ZXMuZnJvbSksXG4gICAgICAgIHRvOiB1dGlscy5leHRlbmQoeyBvZmZzZXQ6IG5ld09mZnNldCB9LCB2YWx1ZXMudG8pLFxuICAgICAgICBkdXJhdGlvbjogb3B0cy5kdXJhdGlvbixcbiAgICAgICAgZGVsYXk6IG9wdHMuZGVsYXksXG4gICAgICAgIGVhc2luZzogc2hpZnR5RWFzaW5nLFxuICAgICAgICBzdGVwOiBmdW5jdGlvbihzdGF0ZSkge1xuICAgICAgICAgICAgc2VsZi5wYXRoLnN0eWxlLnN0cm9rZURhc2hvZmZzZXQgPSBzdGF0ZS5vZmZzZXQ7XG4gICAgICAgICAgICB2YXIgcmVmZXJlbmNlID0gb3B0cy5zaGFwZSB8fCBzZWxmO1xuICAgICAgICAgICAgb3B0cy5zdGVwKHN0YXRlLCByZWZlcmVuY2UsIG9wdHMuYXR0YWNobWVudCk7XG4gICAgICAgIH1cbiAgICB9KS50aGVuKGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICAgIGlmICh1dGlscy5pc0Z1bmN0aW9uKGNiKSkge1xuICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuUGF0aC5wcm90b3R5cGUuX2dldENvbXB1dGVkRGFzaE9mZnNldCA9IGZ1bmN0aW9uIF9nZXRDb21wdXRlZERhc2hPZmZzZXQoKSB7XG4gICAgdmFyIGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLnBhdGgsIG51bGwpO1xuICAgIHJldHVybiBwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnc3Ryb2tlLWRhc2hvZmZzZXQnKSwgMTApO1xufTtcblxuUGF0aC5wcm90b3R5cGUuX3Byb2dyZXNzVG9PZmZzZXQgPSBmdW5jdGlvbiBfcHJvZ3Jlc3NUb09mZnNldChwcm9ncmVzcykge1xuICAgIHZhciBsZW5ndGggPSB0aGlzLnBhdGguZ2V0VG90YWxMZW5ndGgoKTtcbiAgICByZXR1cm4gbGVuZ3RoIC0gcHJvZ3Jlc3MgKiBsZW5ndGg7XG59O1xuXG4vLyBSZXNvbHZlcyBmcm9tIGFuZCB0byB2YWx1ZXMgZm9yIGFuaW1hdGlvbi5cblBhdGgucHJvdG90eXBlLl9yZXNvbHZlRnJvbUFuZFRvID0gZnVuY3Rpb24gX3Jlc29sdmVGcm9tQW5kVG8ocHJvZ3Jlc3MsIGVhc2luZywgb3B0cykge1xuICAgIGlmIChvcHRzLmZyb20gJiYgb3B0cy50bykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZnJvbTogb3B0cy5mcm9tLFxuICAgICAgICAgICAgdG86IG9wdHMudG9cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBmcm9tOiB0aGlzLl9jYWxjdWxhdGVGcm9tKGVhc2luZyksXG4gICAgICAgIHRvOiB0aGlzLl9jYWxjdWxhdGVUbyhwcm9ncmVzcywgZWFzaW5nKVxuICAgIH07XG59O1xuXG4vLyBDYWxjdWxhdGUgYGZyb21gIHZhbHVlcyBmcm9tIG9wdGlvbnMgcGFzc2VkIGF0IGluaXRpYWxpemF0aW9uXG5QYXRoLnByb3RvdHlwZS5fY2FsY3VsYXRlRnJvbSA9IGZ1bmN0aW9uIF9jYWxjdWxhdGVGcm9tKGVhc2luZykge1xuICAgIHJldHVybiBzaGlmdHkuaW50ZXJwb2xhdGUodGhpcy5fb3B0cy5mcm9tLCB0aGlzLl9vcHRzLnRvLCB0aGlzLnZhbHVlKCksIGVhc2luZyk7XG59O1xuXG4vLyBDYWxjdWxhdGUgYHRvYCB2YWx1ZXMgZnJvbSBvcHRpb25zIHBhc3NlZCBhdCBpbml0aWFsaXphdGlvblxuUGF0aC5wcm90b3R5cGUuX2NhbGN1bGF0ZVRvID0gZnVuY3Rpb24gX2NhbGN1bGF0ZVRvKHByb2dyZXNzLCBlYXNpbmcpIHtcbiAgICByZXR1cm4gc2hpZnR5LmludGVycG9sYXRlKHRoaXMuX29wdHMuZnJvbSwgdGhpcy5fb3B0cy50bywgcHJvZ3Jlc3MsIGVhc2luZyk7XG59O1xuXG5QYXRoLnByb3RvdHlwZS5fc3RvcFR3ZWVuID0gZnVuY3Rpb24gX3N0b3BUd2VlbigpIHtcbiAgICBpZiAodGhpcy5fdHdlZW5hYmxlICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3R3ZWVuYWJsZS5zdG9wKCk7XG4gICAgICAgIHRoaXMuX3R3ZWVuYWJsZSA9IG51bGw7XG4gICAgfVxufTtcblxuUGF0aC5wcm90b3R5cGUuX2Vhc2luZyA9IGZ1bmN0aW9uIF9lYXNpbmcoZWFzaW5nKSB7XG4gICAgaWYgKEVBU0lOR19BTElBU0VTLmhhc093blByb3BlcnR5KGVhc2luZykpIHtcbiAgICAgICAgcmV0dXJuIEVBU0lOR19BTElBU0VTW2Vhc2luZ107XG4gICAgfVxuXG4gICAgcmV0dXJuIGVhc2luZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUGF0aDtcbiIsIi8vIFNlbWktU2VtaUNpcmNsZSBzaGFwZWQgcHJvZ3Jlc3MgYmFyXG5cbnZhciBTaGFwZSA9IHJlcXVpcmUoJy4vc2hhcGUnKTtcbnZhciBDaXJjbGUgPSByZXF1aXJlKCcuL2NpcmNsZScpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgU2VtaUNpcmNsZSA9IGZ1bmN0aW9uIFNlbWlDaXJjbGUoY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgLy8gVXNlIG9uZSBhcmMgdG8gZm9ybSBhIFNlbWlDaXJjbGVcbiAgICAvLyBTZWUgdGhpcyBhbnN3ZXIgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTA0NzczMzQvMTQ0NjA5MlxuICAgIHRoaXMuX3BhdGhUZW1wbGF0ZSA9XG4gICAgICAgICdNIDUwLDUwIG0gLXtyYWRpdXN9LDAnICtcbiAgICAgICAgJyBhIHtyYWRpdXN9LHtyYWRpdXN9IDAgMSAxIHsycmFkaXVzfSwwJztcblxuICAgIHRoaXMuY29udGFpbmVyQXNwZWN0UmF0aW8gPSAyO1xuXG4gICAgU2hhcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5cblNlbWlDaXJjbGUucHJvdG90eXBlID0gbmV3IFNoYXBlKCk7XG5TZW1pQ2lyY2xlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNlbWlDaXJjbGU7XG5cblNlbWlDaXJjbGUucHJvdG90eXBlLl9pbml0aWFsaXplU3ZnID0gZnVuY3Rpb24gX2luaXRpYWxpemVTdmcoc3ZnLCBvcHRzKSB7XG4gICAgc3ZnLnNldEF0dHJpYnV0ZSgndmlld0JveCcsICcwIDAgMTAwIDUwJyk7XG59O1xuXG5TZW1pQ2lyY2xlLnByb3RvdHlwZS5faW5pdGlhbGl6ZVRleHRDb250YWluZXIgPSBmdW5jdGlvbiBfaW5pdGlhbGl6ZVRleHRDb250YWluZXIoXG4gICAgb3B0cyxcbiAgICBjb250YWluZXIsXG4gICAgdGV4dENvbnRhaW5lclxuKSB7XG4gICAgaWYgKG9wdHMudGV4dC5zdHlsZSkge1xuICAgICAgICAvLyBSZXNldCB0b3Agc3R5bGVcbiAgICAgICAgdGV4dENvbnRhaW5lci5zdHlsZS50b3AgPSAnYXV0byc7XG4gICAgICAgIHRleHRDb250YWluZXIuc3R5bGUuYm90dG9tID0gJzAnO1xuXG4gICAgICAgIGlmIChvcHRzLnRleHQuYWxpZ25Ub0JvdHRvbSkge1xuICAgICAgICAgICAgdXRpbHMuc2V0U3R5bGUodGV4dENvbnRhaW5lciwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoLTUwJSwgMCknKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHV0aWxzLnNldFN0eWxlKHRleHRDb250YWluZXIsICd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKC01MCUsIDUwJSknKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8vIFNoYXJlIGZ1bmN0aW9uYWxpdHkgd2l0aCBDaXJjbGUsIGp1c3QgaGF2ZSBkaWZmZXJlbnQgcGF0aFxuU2VtaUNpcmNsZS5wcm90b3R5cGUuX3BhdGhTdHJpbmcgPSBDaXJjbGUucHJvdG90eXBlLl9wYXRoU3RyaW5nO1xuU2VtaUNpcmNsZS5wcm90b3R5cGUuX3RyYWlsU3RyaW5nID0gQ2lyY2xlLnByb3RvdHlwZS5fdHJhaWxTdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gU2VtaUNpcmNsZTtcbiIsIi8vIEJhc2Ugb2JqZWN0IGZvciBkaWZmZXJlbnQgcHJvZ3Jlc3MgYmFyIHNoYXBlc1xuXG52YXIgUGF0aCA9IHJlcXVpcmUoJy4vcGF0aCcpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgREVTVFJPWUVEX0VSUk9SID0gJ09iamVjdCBpcyBkZXN0cm95ZWQnO1xuXG52YXIgU2hhcGUgPSBmdW5jdGlvbiBTaGFwZShjb250YWluZXIsIG9wdHMpIHtcbiAgICAvLyBUaHJvdyBhIGJldHRlciBlcnJvciBpZiBwcm9ncmVzcyBiYXJzIGFyZSBub3QgaW5pdGlhbGl6ZWQgd2l0aCBgbmV3YFxuICAgIC8vIGtleXdvcmRcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU2hhcGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ29uc3RydWN0b3Igd2FzIGNhbGxlZCB3aXRob3V0IG5ldyBrZXl3b3JkJyk7XG4gICAgfVxuXG4gICAgLy8gUHJldmVudCBjYWxsaW5nIGNvbnN0cnVjdG9yIHdpdGhvdXQgcGFyYW1ldGVycyBzbyBpbmhlcml0YW5jZVxuICAgIC8vIHdvcmtzIGNvcnJlY3RseS4gVG8gdW5kZXJzdGFuZCwgdGhpcyBpcyBob3cgU2hhcGUgaXMgaW5oZXJpdGVkOlxuICAgIC8vXG4gICAgLy8gICBMaW5lLnByb3RvdHlwZSA9IG5ldyBTaGFwZSgpO1xuICAgIC8vXG4gICAgLy8gV2UganVzdCB3YW50IHRvIHNldCB0aGUgcHJvdG90eXBlIGZvciBMaW5lLlxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBEZWZhdWx0IHBhcmFtZXRlcnMgZm9yIHByb2dyZXNzIGJhciBjcmVhdGlvblxuICAgIHRoaXMuX29wdHMgPSB1dGlscy5leHRlbmQoe1xuICAgICAgICBjb2xvcjogJyM1NTUnLFxuICAgICAgICBzdHJva2VXaWR0aDogMS4wLFxuICAgICAgICB0cmFpbENvbG9yOiBudWxsLFxuICAgICAgICB0cmFpbFdpZHRoOiBudWxsLFxuICAgICAgICBmaWxsOiBudWxsLFxuICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBudWxsLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAgIGxlZnQ6ICc1MCUnLFxuICAgICAgICAgICAgICAgIHRvcDogJzUwJScsXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiB7XG4gICAgICAgICAgICAgICAgICAgIHByZWZpeDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICd0cmFuc2xhdGUoLTUwJSwgLTUwJSknXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGF1dG9TdHlsZUNvbnRhaW5lcjogdHJ1ZSxcbiAgICAgICAgICAgIGFsaWduVG9Cb3R0b206IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ3Byb2dyZXNzYmFyLXRleHQnXG4gICAgICAgIH0sXG4gICAgICAgIHN2Z1N0eWxlOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgICAgICB9LFxuICAgICAgICB3YXJuaW5nczogZmFsc2VcbiAgICB9LCBvcHRzLCB0cnVlKTsgIC8vIFVzZSByZWN1cnNpdmUgZXh0ZW5kXG5cbiAgICAvLyBJZiB1c2VyIHNwZWNpZmllcyBlLmcuIHN2Z1N0eWxlIG9yIHRleHQgc3R5bGUsIHRoZSB3aG9sZSBvYmplY3RcbiAgICAvLyBzaG91bGQgcmVwbGFjZSB0aGUgZGVmYXVsdHMgdG8gbWFrZSB3b3JraW5nIHdpdGggc3R5bGVzIGVhc2llclxuICAgIGlmICh1dGlscy5pc09iamVjdChvcHRzKSAmJiBvcHRzLnN2Z1N0eWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fb3B0cy5zdmdTdHlsZSA9IG9wdHMuc3ZnU3R5bGU7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChvcHRzKSAmJiB1dGlscy5pc09iamVjdChvcHRzLnRleHQpICYmIG9wdHMudGV4dC5zdHlsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX29wdHMudGV4dC5zdHlsZSA9IG9wdHMudGV4dC5zdHlsZTtcbiAgICB9XG5cbiAgICB2YXIgc3ZnVmlldyA9IHRoaXMuX2NyZWF0ZVN2Z1ZpZXcodGhpcy5fb3B0cyk7XG5cbiAgICB2YXIgZWxlbWVudDtcbiAgICBpZiAodXRpbHMuaXNTdHJpbmcoY29udGFpbmVyKSkge1xuICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQgPSBjb250YWluZXI7XG4gICAgfVxuXG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ29udGFpbmVyIGRvZXMgbm90IGV4aXN0OiAnICsgY29udGFpbmVyKTtcbiAgICB9XG5cbiAgICB0aGlzLl9jb250YWluZXIgPSBlbGVtZW50O1xuICAgIHRoaXMuX2NvbnRhaW5lci5hcHBlbmRDaGlsZChzdmdWaWV3LnN2Zyk7XG4gICAgaWYgKHRoaXMuX29wdHMud2FybmluZ3MpIHtcbiAgICAgICAgdGhpcy5fd2FybkNvbnRhaW5lckFzcGVjdFJhdGlvKHRoaXMuX2NvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX29wdHMuc3ZnU3R5bGUpIHtcbiAgICAgICAgdXRpbHMuc2V0U3R5bGVzKHN2Z1ZpZXcuc3ZnLCB0aGlzLl9vcHRzLnN2Z1N0eWxlKTtcbiAgICB9XG5cbiAgICAvLyBFeHBvc2UgcHVibGljIGF0dHJpYnV0ZXMgYmVmb3JlIFBhdGggaW5pdGlhbGl6YXRpb25cbiAgICB0aGlzLnN2ZyA9IHN2Z1ZpZXcuc3ZnO1xuICAgIHRoaXMucGF0aCA9IHN2Z1ZpZXcucGF0aDtcbiAgICB0aGlzLnRyYWlsID0gc3ZnVmlldy50cmFpbDtcbiAgICB0aGlzLnRleHQgPSBudWxsO1xuXG4gICAgdmFyIG5ld09wdHMgPSB1dGlscy5leHRlbmQoe1xuICAgICAgICBhdHRhY2htZW50OiB1bmRlZmluZWQsXG4gICAgICAgIHNoYXBlOiB0aGlzXG4gICAgfSwgdGhpcy5fb3B0cyk7XG4gICAgdGhpcy5fcHJvZ3Jlc3NQYXRoID0gbmV3IFBhdGgoc3ZnVmlldy5wYXRoLCBuZXdPcHRzKTtcblxuICAgIGlmICh1dGlscy5pc09iamVjdCh0aGlzLl9vcHRzLnRleHQpICYmIHRoaXMuX29wdHMudGV4dC52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnNldFRleHQodGhpcy5fb3B0cy50ZXh0LnZhbHVlKTtcbiAgICB9XG59O1xuXG5TaGFwZS5wcm90b3R5cGUuYW5pbWF0ZSA9IGZ1bmN0aW9uIGFuaW1hdGUocHJvZ3Jlc3MsIG9wdHMsIGNiKSB7XG4gICAgaWYgKHRoaXMuX3Byb2dyZXNzUGF0aCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoREVTVFJPWUVEX0VSUk9SKTtcbiAgICB9XG5cbiAgICB0aGlzLl9wcm9ncmVzc1BhdGguYW5pbWF0ZShwcm9ncmVzcywgb3B0cywgY2IpO1xufTtcblxuU2hhcGUucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiBzdG9wKCkge1xuICAgIGlmICh0aGlzLl9wcm9ncmVzc1BhdGggPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKERFU1RST1lFRF9FUlJPUik7XG4gICAgfVxuXG4gICAgLy8gRG9uJ3QgY3Jhc2ggaWYgc3RvcCBpcyBjYWxsZWQgaW5zaWRlIHN0ZXAgZnVuY3Rpb25cbiAgICBpZiAodGhpcy5fcHJvZ3Jlc3NQYXRoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3Byb2dyZXNzUGF0aC5zdG9wKCk7XG59O1xuXG5TaGFwZS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICBpZiAodGhpcy5fcHJvZ3Jlc3NQYXRoID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihERVNUUk9ZRURfRVJST1IpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9wcm9ncmVzc1BhdGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9wcm9ncmVzc1BhdGguX3R3ZWVuYWJsZSkge1xuICAgICAgICAvLyBJdCBzZWVtcyB0aGF0IHdlIGNhbid0IHBhdXNlIHRoaXNcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3Byb2dyZXNzUGF0aC5fdHdlZW5hYmxlLnBhdXNlKCk7XG59O1xuXG5TaGFwZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gcmVzdW1lKCkge1xuICAgIGlmICh0aGlzLl9wcm9ncmVzc1BhdGggPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKERFU1RST1lFRF9FUlJPUik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3Byb2dyZXNzUGF0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX3Byb2dyZXNzUGF0aC5fdHdlZW5hYmxlKSB7XG4gICAgICAgIC8vIEl0IHNlZW1zIHRoYXQgd2UgY2FuJ3QgcmVzdW1lIHRoaXNcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3Byb2dyZXNzUGF0aC5fdHdlZW5hYmxlLnJlc3VtZSgpO1xufTtcblxuU2hhcGUucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLl9wcm9ncmVzc1BhdGggPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKERFU1RST1lFRF9FUlJPUik7XG4gICAgfVxuXG4gICAgdGhpcy5zdG9wKCk7XG4gICAgdGhpcy5zdmcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnN2Zyk7XG4gICAgdGhpcy5zdmcgPSBudWxsO1xuICAgIHRoaXMucGF0aCA9IG51bGw7XG4gICAgdGhpcy50cmFpbCA9IG51bGw7XG4gICAgdGhpcy5fcHJvZ3Jlc3NQYXRoID0gbnVsbDtcblxuICAgIGlmICh0aGlzLnRleHQgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy50ZXh0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy50ZXh0KTtcbiAgICAgICAgdGhpcy50ZXh0ID0gbnVsbDtcbiAgICB9XG59O1xuXG5TaGFwZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gc2V0KHByb2dyZXNzKSB7XG4gICAgaWYgKHRoaXMuX3Byb2dyZXNzUGF0aCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoREVTVFJPWUVEX0VSUk9SKTtcbiAgICB9XG5cbiAgICB0aGlzLl9wcm9ncmVzc1BhdGguc2V0KHByb2dyZXNzKTtcbn07XG5cblNoYXBlLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgIGlmICh0aGlzLl9wcm9ncmVzc1BhdGggPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKERFU1RST1lFRF9FUlJPUik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3Byb2dyZXNzUGF0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9wcm9ncmVzc1BhdGgudmFsdWUoKTtcbn07XG5cblNoYXBlLnByb3RvdHlwZS5zZXRUZXh0ID0gZnVuY3Rpb24gc2V0VGV4dChuZXdUZXh0KSB7XG4gICAgaWYgKHRoaXMuX3Byb2dyZXNzUGF0aCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoREVTVFJPWUVEX0VSUk9SKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50ZXh0ID09PSBudWxsKSB7XG4gICAgICAgIC8vIENyZWF0ZSBuZXcgdGV4dCBub2RlXG4gICAgICAgIHRoaXMudGV4dCA9IHRoaXMuX2NyZWF0ZVRleHRDb250YWluZXIodGhpcy5fb3B0cywgdGhpcy5fY29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMudGV4dCk7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIHByZXZpb3VzIHRleHQgYW5kIGFkZCBuZXdcbiAgICBpZiAodXRpbHMuaXNPYmplY3QobmV3VGV4dCkpIHtcbiAgICAgICAgdXRpbHMucmVtb3ZlQ2hpbGRyZW4odGhpcy50ZXh0KTtcbiAgICAgICAgdGhpcy50ZXh0LmFwcGVuZENoaWxkKG5ld1RleHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudGV4dC5pbm5lckhUTUwgPSBuZXdUZXh0O1xuICAgIH1cbn07XG5cblNoYXBlLnByb3RvdHlwZS5fY3JlYXRlU3ZnVmlldyA9IGZ1bmN0aW9uIF9jcmVhdGVTdmdWaWV3KG9wdHMpIHtcbiAgICB2YXIgc3ZnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdzdmcnKTtcbiAgICB0aGlzLl9pbml0aWFsaXplU3ZnKHN2Zywgb3B0cyk7XG5cbiAgICB2YXIgdHJhaWxQYXRoID0gbnVsbDtcbiAgICAvLyBFYWNoIG9wdGlvbiBsaXN0ZWQgaW4gdGhlIGlmIGNvbmRpdGlvbiBhcmUgJ3RyaWdnZXJzJyBmb3IgY3JlYXRpbmdcbiAgICAvLyB0aGUgdHJhaWwgcGF0aFxuICAgIGlmIChvcHRzLnRyYWlsQ29sb3IgfHwgb3B0cy50cmFpbFdpZHRoKSB7XG4gICAgICAgIHRyYWlsUGF0aCA9IHRoaXMuX2NyZWF0ZVRyYWlsKG9wdHMpO1xuICAgICAgICBzdmcuYXBwZW5kQ2hpbGQodHJhaWxQYXRoKTtcbiAgICB9XG5cbiAgICB2YXIgcGF0aCA9IHRoaXMuX2NyZWF0ZVBhdGgob3B0cyk7XG4gICAgc3ZnLmFwcGVuZENoaWxkKHBhdGgpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3ZnOiBzdmcsXG4gICAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAgIHRyYWlsOiB0cmFpbFBhdGhcbiAgICB9O1xufTtcblxuU2hhcGUucHJvdG90eXBlLl9pbml0aWFsaXplU3ZnID0gZnVuY3Rpb24gX2luaXRpYWxpemVTdmcoc3ZnLCBvcHRzKSB7XG4gICAgc3ZnLnNldEF0dHJpYnV0ZSgndmlld0JveCcsICcwIDAgMTAwIDEwMCcpO1xufTtcblxuU2hhcGUucHJvdG90eXBlLl9jcmVhdGVQYXRoID0gZnVuY3Rpb24gX2NyZWF0ZVBhdGgob3B0cykge1xuICAgIHZhciBwYXRoU3RyaW5nID0gdGhpcy5fcGF0aFN0cmluZyhvcHRzKTtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlUGF0aEVsZW1lbnQocGF0aFN0cmluZywgb3B0cyk7XG59O1xuXG5TaGFwZS5wcm90b3R5cGUuX2NyZWF0ZVRyYWlsID0gZnVuY3Rpb24gX2NyZWF0ZVRyYWlsKG9wdHMpIHtcbiAgICAvLyBDcmVhdGUgcGF0aCBzdHJpbmcgd2l0aCBvcmlnaW5hbCBwYXNzZWQgb3B0aW9uc1xuICAgIHZhciBwYXRoU3RyaW5nID0gdGhpcy5fdHJhaWxTdHJpbmcob3B0cyk7XG5cbiAgICAvLyBQcmV2ZW50IG1vZGlmeWluZyBvcmlnaW5hbFxuICAgIHZhciBuZXdPcHRzID0gdXRpbHMuZXh0ZW5kKHt9LCBvcHRzKTtcblxuICAgIC8vIERlZmF1bHRzIGZvciBwYXJhbWV0ZXJzIHdoaWNoIG1vZGlmeSB0cmFpbCBwYXRoXG4gICAgaWYgKCFuZXdPcHRzLnRyYWlsQ29sb3IpIHtcbiAgICAgICAgbmV3T3B0cy50cmFpbENvbG9yID0gJyNlZWUnO1xuICAgIH1cbiAgICBpZiAoIW5ld09wdHMudHJhaWxXaWR0aCkge1xuICAgICAgICBuZXdPcHRzLnRyYWlsV2lkdGggPSBuZXdPcHRzLnN0cm9rZVdpZHRoO1xuICAgIH1cblxuICAgIG5ld09wdHMuY29sb3IgPSBuZXdPcHRzLnRyYWlsQ29sb3I7XG4gICAgbmV3T3B0cy5zdHJva2VXaWR0aCA9IG5ld09wdHMudHJhaWxXaWR0aDtcblxuICAgIC8vIFdoZW4gdHJhaWwgcGF0aCBpcyBzZXQsIGZpbGwgbXVzdCBiZSBzZXQgZm9yIGl0IGluc3RlYWQgb2YgdGhlXG4gICAgLy8gYWN0dWFsIHBhdGggdG8gcHJldmVudCB0cmFpbCBzdHJva2UgZnJvbSBjbGlwcGluZ1xuICAgIG5ld09wdHMuZmlsbCA9IG51bGw7XG5cbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlUGF0aEVsZW1lbnQocGF0aFN0cmluZywgbmV3T3B0cyk7XG59O1xuXG5TaGFwZS5wcm90b3R5cGUuX2NyZWF0ZVBhdGhFbGVtZW50ID0gZnVuY3Rpb24gX2NyZWF0ZVBhdGhFbGVtZW50KHBhdGhTdHJpbmcsIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncGF0aCcpO1xuICAgIHBhdGguc2V0QXR0cmlidXRlKCdkJywgcGF0aFN0cmluZyk7XG4gICAgcGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsIG9wdHMuY29sb3IpO1xuICAgIHBhdGguc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCBvcHRzLnN0cm9rZVdpZHRoKTtcblxuICAgIGlmIChvcHRzLmZpbGwpIHtcbiAgICAgICAgcGF0aC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCBvcHRzLmZpbGwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdmaWxsLW9wYWNpdHknLCAnMCcpO1xuICAgIH1cblxuICAgIHJldHVybiBwYXRoO1xufTtcblxuU2hhcGUucHJvdG90eXBlLl9jcmVhdGVUZXh0Q29udGFpbmVyID0gZnVuY3Rpb24gX2NyZWF0ZVRleHRDb250YWluZXIob3B0cywgY29udGFpbmVyKSB7XG4gICAgdmFyIHRleHRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0ZXh0Q29udGFpbmVyLmNsYXNzTmFtZSA9IG9wdHMudGV4dC5jbGFzc05hbWU7XG5cbiAgICB2YXIgdGV4dFN0eWxlID0gb3B0cy50ZXh0LnN0eWxlO1xuICAgIGlmICh0ZXh0U3R5bGUpIHtcbiAgICAgICAgaWYgKG9wdHMudGV4dC5hdXRvU3R5bGVDb250YWluZXIpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgICAgIH1cblxuICAgICAgICB1dGlscy5zZXRTdHlsZXModGV4dENvbnRhaW5lciwgdGV4dFN0eWxlKTtcbiAgICAgICAgLy8gRGVmYXVsdCB0ZXh0IGNvbG9yIHRvIHByb2dyZXNzIGJhcidzIGNvbG9yXG4gICAgICAgIGlmICghdGV4dFN0eWxlLmNvbG9yKSB7XG4gICAgICAgICAgICB0ZXh0Q29udGFpbmVyLnN0eWxlLmNvbG9yID0gb3B0cy5jb2xvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2luaXRpYWxpemVUZXh0Q29udGFpbmVyKG9wdHMsIGNvbnRhaW5lciwgdGV4dENvbnRhaW5lcik7XG4gICAgcmV0dXJuIHRleHRDb250YWluZXI7XG59O1xuXG4vLyBHaXZlIGN1c3RvbSBzaGFwZXMgcG9zc2liaWxpdHkgdG8gbW9kaWZ5IHRleHQgZWxlbWVudFxuU2hhcGUucHJvdG90eXBlLl9pbml0aWFsaXplVGV4dENvbnRhaW5lciA9IGZ1bmN0aW9uKG9wdHMsIGNvbnRhaW5lciwgZWxlbWVudCkge1xuICAgIC8vIEJ5IGRlZmF1bHQsIG5vLW9wXG4gICAgLy8gQ3VzdG9tIHNoYXBlcyBzaG91bGQgcmVzcGVjdCBBUEkgb3B0aW9ucywgc3VjaCBhcyB0ZXh0LnN0eWxlXG59O1xuXG5TaGFwZS5wcm90b3R5cGUuX3BhdGhTdHJpbmcgPSBmdW5jdGlvbiBfcGF0aFN0cmluZyhvcHRzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdPdmVycmlkZSB0aGlzIGZ1bmN0aW9uIGZvciBlYWNoIHByb2dyZXNzIGJhcicpO1xufTtcblxuU2hhcGUucHJvdG90eXBlLl90cmFpbFN0cmluZyA9IGZ1bmN0aW9uIF90cmFpbFN0cmluZyhvcHRzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdPdmVycmlkZSB0aGlzIGZ1bmN0aW9uIGZvciBlYWNoIHByb2dyZXNzIGJhcicpO1xufTtcblxuU2hhcGUucHJvdG90eXBlLl93YXJuQ29udGFpbmVyQXNwZWN0UmF0aW8gPSBmdW5jdGlvbiBfd2FybkNvbnRhaW5lckFzcGVjdFJhdGlvKGNvbnRhaW5lcikge1xuICAgIGlmICghdGhpcy5jb250YWluZXJBc3BlY3RSYXRpbykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShjb250YWluZXIsIG51bGwpO1xuICAgIHZhciB3aWR0aCA9IHBhcnNlRmxvYXQoY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd3aWR0aCcpLCAxMCk7XG4gICAgdmFyIGhlaWdodCA9IHBhcnNlRmxvYXQoY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdoZWlnaHQnKSwgMTApO1xuICAgIGlmICghdXRpbHMuZmxvYXRFcXVhbHModGhpcy5jb250YWluZXJBc3BlY3RSYXRpbywgd2lkdGggLyBoZWlnaHQpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICdJbmNvcnJlY3QgYXNwZWN0IHJhdGlvIG9mIGNvbnRhaW5lcicsXG4gICAgICAgICAgICAnIycgKyBjb250YWluZXIuaWQsXG4gICAgICAgICAgICAnZGV0ZWN0ZWQ6JyxcbiAgICAgICAgICAgIGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnd2lkdGgnKSArICcod2lkdGgpJyxcbiAgICAgICAgICAgICcvJyxcbiAgICAgICAgICAgIGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnaGVpZ2h0JykgKyAnKGhlaWdodCknLFxuICAgICAgICAgICAgJz0nLFxuICAgICAgICAgICAgd2lkdGggLyBoZWlnaHRcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAnQXNwZWN0IHJhdGlvIG9mIHNob3VsZCBiZScsXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lckFzcGVjdFJhdGlvXG4gICAgICAgICk7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTaGFwZTtcbiIsIi8vIFNxdWFyZSBzaGFwZWQgcHJvZ3Jlc3MgYmFyXG4vLyBOb3RlOiBTcXVhcmUgaXMgbm90IGNvcmUgcGFydCBvZiBBUEkgYW55bW9yZS4gSXQncyBsZWZ0IGhlcmVcbi8vICAgICAgIGZvciByZWZlcmVuY2UuIHNxdWFyZSBpcyBub3QgaW5jbHVkZWQgdG8gdGhlIHByb2dyZXNzYmFyXG4vLyAgICAgICBidWlsZCBhbnltb3JlXG5cbnZhciBTaGFwZSA9IHJlcXVpcmUoJy4vc2hhcGUnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIFNxdWFyZSA9IGZ1bmN0aW9uIFNxdWFyZShjb250YWluZXIsIG9wdGlvbnMpIHtcbiAgICB0aGlzLl9wYXRoVGVtcGxhdGUgPVxuICAgICAgICAnTSAwLHtoYWxmT2ZTdHJva2VXaWR0aH0nICtcbiAgICAgICAgJyBMIHt3aWR0aH0se2hhbGZPZlN0cm9rZVdpZHRofScgK1xuICAgICAgICAnIEwge3dpZHRofSx7d2lkdGh9JyArXG4gICAgICAgICcgTCB7aGFsZk9mU3Ryb2tlV2lkdGh9LHt3aWR0aH0nICtcbiAgICAgICAgJyBMIHtoYWxmT2ZTdHJva2VXaWR0aH0se3N0cm9rZVdpZHRofSc7XG5cbiAgICB0aGlzLl90cmFpbFRlbXBsYXRlID1cbiAgICAgICAgJ00ge3N0YXJ0TWFyZ2lufSx7aGFsZk9mU3Ryb2tlV2lkdGh9JyArXG4gICAgICAgICcgTCB7d2lkdGh9LHtoYWxmT2ZTdHJva2VXaWR0aH0nICtcbiAgICAgICAgJyBMIHt3aWR0aH0se3dpZHRofScgK1xuICAgICAgICAnIEwge2hhbGZPZlN0cm9rZVdpZHRofSx7d2lkdGh9JyArXG4gICAgICAgICcgTCB7aGFsZk9mU3Ryb2tlV2lkdGh9LHtoYWxmT2ZTdHJva2VXaWR0aH0nO1xuXG4gICAgU2hhcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5cblNxdWFyZS5wcm90b3R5cGUgPSBuZXcgU2hhcGUoKTtcblNxdWFyZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTcXVhcmU7XG5cblNxdWFyZS5wcm90b3R5cGUuX3BhdGhTdHJpbmcgPSBmdW5jdGlvbiBfcGF0aFN0cmluZyhvcHRzKSB7XG4gICAgdmFyIHcgPSAxMDAgLSBvcHRzLnN0cm9rZVdpZHRoIC8gMjtcblxuICAgIHJldHVybiB1dGlscy5yZW5kZXIodGhpcy5fcGF0aFRlbXBsYXRlLCB7XG4gICAgICAgIHdpZHRoOiB3LFxuICAgICAgICBzdHJva2VXaWR0aDogb3B0cy5zdHJva2VXaWR0aCxcbiAgICAgICAgaGFsZk9mU3Ryb2tlV2lkdGg6IG9wdHMuc3Ryb2tlV2lkdGggLyAyXG4gICAgfSk7XG59O1xuXG5TcXVhcmUucHJvdG90eXBlLl90cmFpbFN0cmluZyA9IGZ1bmN0aW9uIF90cmFpbFN0cmluZyhvcHRzKSB7XG4gICAgdmFyIHcgPSAxMDAgLSBvcHRzLnN0cm9rZVdpZHRoIC8gMjtcblxuICAgIHJldHVybiB1dGlscy5yZW5kZXIodGhpcy5fdHJhaWxUZW1wbGF0ZSwge1xuICAgICAgICB3aWR0aDogdyxcbiAgICAgICAgc3Ryb2tlV2lkdGg6IG9wdHMuc3Ryb2tlV2lkdGgsXG4gICAgICAgIGhhbGZPZlN0cm9rZVdpZHRoOiBvcHRzLnN0cm9rZVdpZHRoIC8gMixcbiAgICAgICAgc3RhcnRNYXJnaW46IG9wdHMuc3Ryb2tlV2lkdGggLyAyIC0gb3B0cy50cmFpbFdpZHRoIC8gMlxuICAgIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTcXVhcmU7XG4iLCIvLyBVdGlsaXR5IGZ1bmN0aW9uc1xuXG52YXIgUFJFRklYRVMgPSAnV2Via2l0IE1veiBPIG1zJy5zcGxpdCgnICcpO1xudmFyIEZMT0FUX0NPTVBBUklTT05fRVBTSUxPTiA9IDAuMDAxO1xuXG4vLyBDb3B5IGFsbCBhdHRyaWJ1dGVzIGZyb20gc291cmNlIG9iamVjdCB0byBkZXN0aW5hdGlvbiBvYmplY3QuXG4vLyBkZXN0aW5hdGlvbiBvYmplY3QgaXMgbXV0YXRlZC5cbmZ1bmN0aW9uIGV4dGVuZChkZXN0aW5hdGlvbiwgc291cmNlLCByZWN1cnNpdmUpIHtcbiAgICBkZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uIHx8IHt9O1xuICAgIHNvdXJjZSA9IHNvdXJjZSB8fCB7fTtcbiAgICByZWN1cnNpdmUgPSByZWN1cnNpdmUgfHwgZmFsc2U7XG5cbiAgICBmb3IgKHZhciBhdHRyTmFtZSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgIHZhciBkZXN0VmFsID0gZGVzdGluYXRpb25bYXR0ck5hbWVdO1xuICAgICAgICAgICAgdmFyIHNvdXJjZVZhbCA9IHNvdXJjZVthdHRyTmFtZV07XG4gICAgICAgICAgICBpZiAocmVjdXJzaXZlICYmIGlzT2JqZWN0KGRlc3RWYWwpICYmIGlzT2JqZWN0KHNvdXJjZVZhbCkpIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvblthdHRyTmFtZV0gPSBleHRlbmQoZGVzdFZhbCwgc291cmNlVmFsLCByZWN1cnNpdmUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvblthdHRyTmFtZV0gPSBzb3VyY2VWYWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVzdGluYXRpb247XG59XG5cbi8vIFJlbmRlcnMgdGVtcGxhdGVzIHdpdGggZ2l2ZW4gdmFyaWFibGVzLiBWYXJpYWJsZXMgbXVzdCBiZSBzdXJyb3VuZGVkIHdpdGhcbi8vIGJyYWNlcyB3aXRob3V0IGFueSBzcGFjZXMsIGUuZy4ge3ZhcmlhYmxlfVxuLy8gQWxsIGluc3RhbmNlcyBvZiB2YXJpYWJsZSBwbGFjZWhvbGRlcnMgd2lsbCBiZSByZXBsYWNlZCB3aXRoIGdpdmVuIGNvbnRlbnRcbi8vIEV4YW1wbGU6XG4vLyByZW5kZXIoJ0hlbGxvLCB7bWVzc2FnZX0hJywge21lc3NhZ2U6ICd3b3JsZCd9KVxuZnVuY3Rpb24gcmVuZGVyKHRlbXBsYXRlLCB2YXJzKSB7XG4gICAgdmFyIHJlbmRlcmVkID0gdGVtcGxhdGU7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gdmFycykge1xuICAgICAgICBpZiAodmFycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICB2YXIgdmFsID0gdmFyc1trZXldO1xuICAgICAgICAgICAgdmFyIHJlZ0V4cFN0cmluZyA9ICdcXFxceycgKyBrZXkgKyAnXFxcXH0nO1xuICAgICAgICAgICAgdmFyIHJlZ0V4cCA9IG5ldyBSZWdFeHAocmVnRXhwU3RyaW5nLCAnZycpO1xuXG4gICAgICAgICAgICByZW5kZXJlZCA9IHJlbmRlcmVkLnJlcGxhY2UocmVnRXhwLCB2YWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlbmRlcmVkO1xufVxuXG5mdW5jdGlvbiBzZXRTdHlsZShlbGVtZW50LCBzdHlsZSwgdmFsdWUpIHtcbiAgICB2YXIgZWxTdHlsZSA9IGVsZW1lbnQuc3R5bGU7ICAvLyBjYWNoZSBmb3IgcGVyZm9ybWFuY2VcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgUFJFRklYRVMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIHByZWZpeCA9IFBSRUZJWEVTW2ldO1xuICAgICAgICBlbFN0eWxlW3ByZWZpeCArIGNhcGl0YWxpemUoc3R5bGUpXSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGVsU3R5bGVbc3R5bGVdID0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIHNldFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcbiAgICBmb3JFYWNoT2JqZWN0KHN0eWxlcywgZnVuY3Rpb24oc3R5bGVWYWx1ZSwgc3R5bGVOYW1lKSB7XG4gICAgICAgIC8vIEFsbG93IGRpc2FibGluZyBzb21lIGluZGl2aWR1YWwgc3R5bGVzIGJ5IHNldHRpbmcgdGhlbVxuICAgICAgICAvLyB0byBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICBpZiAoc3R5bGVWYWx1ZSA9PT0gbnVsbCB8fCBzdHlsZVZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHN0eWxlJ3MgdmFsdWUgaXMge3ByZWZpeDogdHJ1ZSwgdmFsdWU6ICc1MCUnfSxcbiAgICAgICAgLy8gU2V0IGFsc28gYnJvd3NlciBwcmVmaXhlZCBzdHlsZXNcbiAgICAgICAgaWYgKGlzT2JqZWN0KHN0eWxlVmFsdWUpICYmIHN0eWxlVmFsdWUucHJlZml4ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzZXRTdHlsZShlbGVtZW50LCBzdHlsZU5hbWUsIHN0eWxlVmFsdWUudmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZVtzdHlsZU5hbWVdID0gc3R5bGVWYWx1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjYXBpdGFsaXplKHRleHQpIHtcbiAgICByZXR1cm4gdGV4dC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHRleHQuc2xpY2UoMSk7XG59XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnc3RyaW5nJyB8fCBvYmogaW5zdGFuY2VvZiBTdHJpbmc7XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGlzQXJyYXkob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vLyBSZXR1cm5zIHRydWUgaWYgYG9iamAgaXMgb2JqZWN0IGFzIGluIHthOiAxLCBiOiAyfSwgbm90IGlmIGl0J3MgZnVuY3Rpb24gb3Jcbi8vIGFycmF5XG5mdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBvYmo7XG4gICAgcmV0dXJuIHR5cGUgPT09ICdvYmplY3QnICYmICEhb2JqO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoT2JqZWN0KG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgdmFyIHZhbCA9IG9iamVjdFtrZXldO1xuICAgICAgICAgICAgY2FsbGJhY2sodmFsLCBrZXkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBmbG9hdEVxdWFscyhhLCBiKSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKGEgLSBiKSA8IEZMT0FUX0NPTVBBUklTT05fRVBTSUxPTjtcbn1cblxuLy8gaHR0cHM6Ly9jb2RlcndhbGwuY29tL3AvbnlnZ2h3L2Rvbi10LXVzZS1pbm5lcmh0bWwtdG8tZW1wdHktZG9tLWVsZW1lbnRzXG5mdW5jdGlvbiByZW1vdmVDaGlsZHJlbihlbCkge1xuICAgIHdoaWxlIChlbC5maXJzdENoaWxkKSB7XG4gICAgICAgIGVsLnJlbW92ZUNoaWxkKGVsLmZpcnN0Q2hpbGQpO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgcmVuZGVyOiByZW5kZXIsXG4gICAgc2V0U3R5bGU6IHNldFN0eWxlLFxuICAgIHNldFN0eWxlczogc2V0U3R5bGVzLFxuICAgIGNhcGl0YWxpemU6IGNhcGl0YWxpemUsXG4gICAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICAgIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gICAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICAgIGZvckVhY2hPYmplY3Q6IGZvckVhY2hPYmplY3QsXG4gICAgZmxvYXRFcXVhbHM6IGZsb2F0RXF1YWxzLFxuICAgIHJlbW92ZUNoaWxkcmVuOiByZW1vdmVDaGlsZHJlblxufTtcbiIsIi8qISBGb3IgbGljZW5zZSBpbmZvcm1hdGlvbiBwbGVhc2Ugc2VlIHNoaWZ0eS5qcy5MSUNFTlNFLnR4dCAqL1xuIWZ1bmN0aW9uKHQsbil7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9bigpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoXCJzaGlmdHlcIixbXSxuKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLnNoaWZ0eT1uKCk6dC5zaGlmdHk9bigpfShzZWxmLChmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciB0PXs3MjA6ZnVuY3Rpb24odCxuLGUpe2UucihuKSxlLmQobix7U2NlbmU6ZnVuY3Rpb24oKXtyZXR1cm4gdG59LFR3ZWVuYWJsZTpmdW5jdGlvbigpe3JldHVybiBndH0saW50ZXJwb2xhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gSHR9LHByb2Nlc3NUd2VlbnM6ZnVuY3Rpb24oKXtyZXR1cm4gZnR9LHNldEJlemllckZ1bmN0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIG5ufSxzaG91bGRTY2hlZHVsZVVwZGF0ZTpmdW5jdGlvbigpe3JldHVybiBwdH0sdHdlZW46ZnVuY3Rpb24oKXtyZXR1cm4gbXR9LHVuc2V0QmV6aWVyRnVuY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gZW59fSk7dmFyIHI9e307ZS5yKHIpLGUuZChyLHtib3VuY2U6ZnVuY3Rpb24oKXtyZXR1cm4gRH0sYm91bmNlUGFzdDpmdW5jdGlvbigpe3JldHVybiBxfSxlYXNlRnJvbTpmdW5jdGlvbigpe3JldHVybiBCfSxlYXNlRnJvbVRvOmZ1bmN0aW9uKCl7cmV0dXJuIFF9LGVhc2VJbkJhY2s6ZnVuY3Rpb24oKXtyZXR1cm4gRX0sZWFzZUluQ2lyYzpmdW5jdGlvbigpe3JldHVybiBqfSxlYXNlSW5DdWJpYzpmdW5jdGlvbigpe3JldHVybiBjfSxlYXNlSW5FeHBvOmZ1bmN0aW9uKCl7cmV0dXJuIGJ9LGVhc2VJbk91dEJhY2s6ZnVuY3Rpb24oKXtyZXR1cm4gRn0sZWFzZUluT3V0Q2lyYzpmdW5jdGlvbigpe3JldHVybiBQfSxlYXNlSW5PdXRDdWJpYzpmdW5jdGlvbigpe3JldHVybiBsfSxlYXNlSW5PdXRFeHBvOmZ1bmN0aW9uKCl7cmV0dXJuIFN9LGVhc2VJbk91dFF1YWQ6ZnVuY3Rpb24oKXtyZXR1cm4gc30sZWFzZUluT3V0UXVhcnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdn0sZWFzZUluT3V0UXVpbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sZWFzZUluT3V0U2luZTpmdW5jdGlvbigpe3JldHVybiB3fSxlYXNlSW5RdWFkOmZ1bmN0aW9uKCl7cmV0dXJuIG99LGVhc2VJblF1YXJ0OmZ1bmN0aW9uKCl7cmV0dXJuIGh9LGVhc2VJblF1aW50OmZ1bmN0aW9uKCl7cmV0dXJuIF99LGVhc2VJblNpbmU6ZnVuY3Rpb24oKXtyZXR1cm4gZ30sZWFzZU91dEJhY2s6ZnVuY3Rpb24oKXtyZXR1cm4gVH0sZWFzZU91dEJvdW5jZTpmdW5jdGlvbigpe3JldHVybiBNfSxlYXNlT3V0Q2lyYzpmdW5jdGlvbigpe3JldHVybiBrfSxlYXNlT3V0Q3ViaWM6ZnVuY3Rpb24oKXtyZXR1cm4gZn0sZWFzZU91dEV4cG86ZnVuY3Rpb24oKXtyZXR1cm4gT30sZWFzZU91dFF1YWQ6ZnVuY3Rpb24oKXtyZXR1cm4gYX0sZWFzZU91dFF1YXJ0OmZ1bmN0aW9uKCl7cmV0dXJuIHB9LGVhc2VPdXRRdWludDpmdW5jdGlvbigpe3JldHVybiB5fSxlYXNlT3V0U2luZTpmdW5jdGlvbigpe3JldHVybiBtfSxlYXNlVG86ZnVuY3Rpb24oKXtyZXR1cm4gTn0sZWxhc3RpYzpmdW5jdGlvbigpe3JldHVybiBJfSxsaW5lYXI6ZnVuY3Rpb24oKXtyZXR1cm4gdX0sc3dpbmdGcm9tOmZ1bmN0aW9uKCl7cmV0dXJuIEF9LHN3aW5nRnJvbVRvOmZ1bmN0aW9uKCl7cmV0dXJuIHh9LHN3aW5nVG86ZnVuY3Rpb24oKXtyZXR1cm4gQ319KTt2YXIgaT17fTtlLnIoaSksZS5kKGkse2FmdGVyVHdlZW46ZnVuY3Rpb24oKXtyZXR1cm4gVXR9LGJlZm9yZVR3ZWVuOmZ1bmN0aW9uKCl7cmV0dXJuIHp0fSxkb2VzQXBwbHk6ZnVuY3Rpb24oKXtyZXR1cm4gTnR9LHR3ZWVuQ3JlYXRlZDpmdW5jdGlvbigpe3JldHVybiBSdH19KTt2YXIgdT1mdW5jdGlvbih0KXtyZXR1cm4gdH0sbz1mdW5jdGlvbih0KXtyZXR1cm4gTWF0aC5wb3codCwyKX0sYT1mdW5jdGlvbih0KXtyZXR1cm4tKE1hdGgucG93KHQtMSwyKS0xKX0scz1mdW5jdGlvbih0KXtyZXR1cm4odC89LjUpPDE/LjUqTWF0aC5wb3codCwyKTotLjUqKCh0LT0yKSp0LTIpfSxjPWZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLnBvdyh0LDMpfSxmPWZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLnBvdyh0LTEsMykrMX0sbD1mdW5jdGlvbih0KXtyZXR1cm4odC89LjUpPDE/LjUqTWF0aC5wb3codCwzKTouNSooTWF0aC5wb3codC0yLDMpKzIpfSxoPWZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLnBvdyh0LDQpfSxwPWZ1bmN0aW9uKHQpe3JldHVybi0oTWF0aC5wb3codC0xLDQpLTEpfSx2PWZ1bmN0aW9uKHQpe3JldHVybih0Lz0uNSk8MT8uNSpNYXRoLnBvdyh0LDQpOi0uNSooKHQtPTIpKk1hdGgucG93KHQsMyktMil9LF89ZnVuY3Rpb24odCl7cmV0dXJuIE1hdGgucG93KHQsNSl9LHk9ZnVuY3Rpb24odCl7cmV0dXJuIE1hdGgucG93KHQtMSw1KSsxfSxkPWZ1bmN0aW9uKHQpe3JldHVybih0Lz0uNSk8MT8uNSpNYXRoLnBvdyh0LDUpOi41KihNYXRoLnBvdyh0LTIsNSkrMil9LGc9ZnVuY3Rpb24odCl7cmV0dXJuIDEtTWF0aC5jb3ModCooTWF0aC5QSS8yKSl9LG09ZnVuY3Rpb24odCl7cmV0dXJuIE1hdGguc2luKHQqKE1hdGguUEkvMikpfSx3PWZ1bmN0aW9uKHQpe3JldHVybi0uNSooTWF0aC5jb3MoTWF0aC5QSSp0KS0xKX0sYj1mdW5jdGlvbih0KXtyZXR1cm4gMD09PXQ/MDpNYXRoLnBvdygyLDEwKih0LTEpKX0sTz1mdW5jdGlvbih0KXtyZXR1cm4gMT09PXQ/MToxLU1hdGgucG93KDIsLTEwKnQpfSxTPWZ1bmN0aW9uKHQpe3JldHVybiAwPT09dD8wOjE9PT10PzE6KHQvPS41KTwxPy41Kk1hdGgucG93KDIsMTAqKHQtMSkpOi41KigyLU1hdGgucG93KDIsLTEwKi0tdCkpfSxqPWZ1bmN0aW9uKHQpe3JldHVybi0oTWF0aC5zcXJ0KDEtdCp0KS0xKX0saz1mdW5jdGlvbih0KXtyZXR1cm4gTWF0aC5zcXJ0KDEtTWF0aC5wb3codC0xLDIpKX0sUD1mdW5jdGlvbih0KXtyZXR1cm4odC89LjUpPDE/LS41KihNYXRoLnNxcnQoMS10KnQpLTEpOi41KihNYXRoLnNxcnQoMS0odC09MikqdCkrMSl9LE09ZnVuY3Rpb24odCl7cmV0dXJuIHQ8MS8yLjc1PzcuNTYyNSp0KnQ6dDwyLzIuNzU/Ny41NjI1Kih0LT0xLjUvMi43NSkqdCsuNzU6dDwyLjUvMi43NT83LjU2MjUqKHQtPTIuMjUvMi43NSkqdCsuOTM3NTo3LjU2MjUqKHQtPTIuNjI1LzIuNzUpKnQrLjk4NDM3NX0sRT1mdW5jdGlvbih0KXt2YXIgbj0xLjcwMTU4O3JldHVybiB0KnQqKChuKzEpKnQtbil9LFQ9ZnVuY3Rpb24odCl7dmFyIG49MS43MDE1ODtyZXR1cm4odC09MSkqdCooKG4rMSkqdCtuKSsxfSxGPWZ1bmN0aW9uKHQpe3ZhciBuPTEuNzAxNTg7cmV0dXJuKHQvPS41KTwxP3QqdCooKDErKG4qPTEuNTI1KSkqdC1uKSouNTouNSooKHQtPTIpKnQqKCgxKyhuKj0xLjUyNSkpKnQrbikrMil9LEk9ZnVuY3Rpb24odCl7cmV0dXJuLTEqTWF0aC5wb3coNCwtOCp0KSpNYXRoLnNpbigoNip0LTEpKigyKk1hdGguUEkpLzIpKzF9LHg9ZnVuY3Rpb24odCl7dmFyIG49MS43MDE1ODtyZXR1cm4odC89LjUpPDE/dCp0KigoMSsobio9MS41MjUpKSp0LW4pKi41Oi41KigodC09MikqdCooKDErKG4qPTEuNTI1KSkqdCtuKSsyKX0sQT1mdW5jdGlvbih0KXt2YXIgbj0xLjcwMTU4O3JldHVybiB0KnQqKChuKzEpKnQtbil9LEM9ZnVuY3Rpb24odCl7dmFyIG49MS43MDE1ODtyZXR1cm4odC09MSkqdCooKG4rMSkqdCtuKSsxfSxEPWZ1bmN0aW9uKHQpe3JldHVybiB0PDEvMi43NT83LjU2MjUqdCp0OnQ8Mi8yLjc1PzcuNTYyNSoodC09MS41LzIuNzUpKnQrLjc1OnQ8Mi41LzIuNzU/Ny41NjI1Kih0LT0yLjI1LzIuNzUpKnQrLjkzNzU6Ny41NjI1Kih0LT0yLjYyNS8yLjc1KSp0Ky45ODQzNzV9LHE9ZnVuY3Rpb24odCl7cmV0dXJuIHQ8MS8yLjc1PzcuNTYyNSp0KnQ6dDwyLzIuNzU/Mi0oNy41NjI1Kih0LT0xLjUvMi43NSkqdCsuNzUpOnQ8Mi41LzIuNzU/Mi0oNy41NjI1Kih0LT0yLjI1LzIuNzUpKnQrLjkzNzUpOjItKDcuNTYyNSoodC09Mi42MjUvMi43NSkqdCsuOTg0Mzc1KX0sUT1mdW5jdGlvbih0KXtyZXR1cm4odC89LjUpPDE/LjUqTWF0aC5wb3codCw0KTotLjUqKCh0LT0yKSpNYXRoLnBvdyh0LDMpLTIpfSxCPWZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLnBvdyh0LDQpfSxOPWZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLnBvdyh0LC4yNSl9O2Z1bmN0aW9uIFIodCxuKXtpZighKHQgaW5zdGFuY2VvZiBuKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIHoodCxuKXtmb3IodmFyIGU9MDtlPG4ubGVuZ3RoO2UrKyl7dmFyIHI9bltlXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsci5rZXkscil9fWZ1bmN0aW9uIFUodCl7cmV0dXJuKFU9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0pKHQpfWZ1bmN0aW9uIEwodCxuKXt2YXIgZT1PYmplY3Qua2V5cyh0KTtpZihPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKXt2YXIgcj1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHQpO24mJihyPXIuZmlsdGVyKChmdW5jdGlvbihuKXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LG4pLmVudW1lcmFibGV9KSkpLGUucHVzaC5hcHBseShlLHIpfXJldHVybiBlfWZ1bmN0aW9uIFYodCl7Zm9yKHZhciBuPTE7bjxhcmd1bWVudHMubGVuZ3RoO24rKyl7dmFyIGU9bnVsbCE9YXJndW1lbnRzW25dP2FyZ3VtZW50c1tuXTp7fTtuJTI/TChPYmplY3QoZSksITApLmZvckVhY2goKGZ1bmN0aW9uKG4pe1codCxuLGVbbl0pfSkpOk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHQsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoZSkpOkwoT2JqZWN0KGUpKS5mb3JFYWNoKChmdW5jdGlvbihuKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxuLE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxuKSl9KSl9cmV0dXJuIHR9ZnVuY3Rpb24gVyh0LG4sZSl7cmV0dXJuIG4gaW4gdD9PYmplY3QuZGVmaW5lUHJvcGVydHkodCxuLHt2YWx1ZTplLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6dFtuXT1lLHR9dmFyICQsRyxILEo9XCJsaW5lYXJcIixLPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OmUuZyxYPVwiYWZ0ZXJUd2VlblwiLFk9XCJhZnRlclR3ZWVuRW5kXCIsWj1cImJlZm9yZVR3ZWVuXCIsdHQ9XCJ0d2VlbkNyZWF0ZWRcIixudD1cImZ1bmN0aW9uXCIsZXQ9XCJzdHJpbmdcIixydD1LLnJlcXVlc3RBbmltYXRpb25GcmFtZXx8Sy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fEsub1JlcXVlc3RBbmltYXRpb25GcmFtZXx8Sy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZXx8Sy5tb3pDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJksubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lfHxzZXRUaW1lb3V0LGl0PWZ1bmN0aW9uKCl7fSx1dD1udWxsLG90PW51bGwsYXQ9Vih7fSxyKSxzdD1mdW5jdGlvbih0LG4sZSxyLGksdSxvKXt2YXIgYSxzLGMsZj10PHU/MDoodC11KS9pLGw9ITE7Zm9yKHZhciBoIGluIG8mJm8uY2FsbCYmKGw9ITAsYT1vKGYpKSxuKWx8fChhPSgocz1vW2hdKS5jYWxsP3M6YXRbc10pKGYpKSxjPWVbaF0sbltoXT1jKyhyW2hdLWMpKmE7cmV0dXJuIG59LGN0PWZ1bmN0aW9uKHQsbil7dmFyIGU9dC5fdGltZXN0YW1wLHI9dC5fY3VycmVudFN0YXRlLGk9dC5fZGVsYXk7aWYoIShuPGUraSkpe3ZhciB1PXQuX2R1cmF0aW9uLG89dC5fdGFyZ2V0U3RhdGUsYT1lK2krdSxzPW4+YT9hOm47dC5faGFzRW5kZWQ9cz49YTt2YXIgYz11LShhLXMpLGY9dC5fZmlsdGVycy5sZW5ndGg+MDtpZih0Ll9oYXNFbmRlZClyZXR1cm4gdC5fcmVuZGVyKG8sdC5fZGF0YSxjKSx0LnN0b3AoITApO2YmJnQuX2FwcGx5RmlsdGVyKFopLHM8ZStpP2U9dT1zPTE6ZSs9aSxzdChzLHIsdC5fb3JpZ2luYWxTdGF0ZSxvLHUsZSx0Ll9lYXNpbmcpLGYmJnQuX2FwcGx5RmlsdGVyKFgpLHQuX3JlbmRlcihyLHQuX2RhdGEsYyl9fSxmdD1mdW5jdGlvbigpe2Zvcih2YXIgdCxuPWd0Lm5vdygpLGU9dXQ7ZTspdD1lLl9uZXh0LGN0KGUsbiksZT10fSxsdD1EYXRlLm5vd3x8ZnVuY3Rpb24oKXtyZXR1cm4rbmV3IERhdGV9LGh0PSExLHB0PWZ1bmN0aW9uKHQpe3QmJmh0fHwoaHQ9dCx0JiZ2dCgpKX0sdnQ9ZnVuY3Rpb24gdCgpeyQ9bHQoKSxodCYmcnQuY2FsbChLLHQsMTYuNjY2NjY2NjY2NjY2NjY4KSxmdCgpfSxfdD1mdW5jdGlvbih0KXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06SixlPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp7fSxyPVUobik7aWYoYXRbbl0pcmV0dXJuIGF0W25dO2lmKHI9PT1ldHx8cj09PW50KWZvcih2YXIgaSBpbiB0KWVbaV09bjtlbHNlIGZvcih2YXIgdSBpbiB0KWVbdV09blt1XXx8SjtyZXR1cm4gZX0seXQ9ZnVuY3Rpb24odCl7dD09PXV0Pyh1dD10Ll9uZXh0KT91dC5fcHJldmlvdXM9bnVsbDpvdD1udWxsOnQ9PT1vdD8ob3Q9dC5fcHJldmlvdXMpP290Ll9uZXh0PW51bGw6dXQ9bnVsbDooRz10Ll9wcmV2aW91cyxIPXQuX25leHQsRy5fbmV4dD1ILEguX3ByZXZpb3VzPUcpLHQuX3ByZXZpb3VzPXQuX25leHQ9bnVsbH0sZHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgUHJvbWlzZT9Qcm9taXNlOm51bGwsZ3Q9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnZvaWQgMDtSKHRoaXMsdCksdGhpcy5fY29uZmlnPXt9LHRoaXMuX2RhdGE9e30sdGhpcy5fZGVsYXk9MCx0aGlzLl9maWx0ZXJzPVtdLHRoaXMuX25leHQ9bnVsbCx0aGlzLl9wcmV2aW91cz1udWxsLHRoaXMuX3RpbWVzdGFtcD1udWxsLHRoaXMuX2hhc0VuZGVkPSExLHRoaXMuX3Jlc29sdmU9bnVsbCx0aGlzLl9yZWplY3Q9bnVsbCx0aGlzLl9jdXJyZW50U3RhdGU9bnx8e30sdGhpcy5fb3JpZ2luYWxTdGF0ZT17fSx0aGlzLl90YXJnZXRTdGF0ZT17fSx0aGlzLl9zdGFydD1pdCx0aGlzLl9yZW5kZXI9aXQsdGhpcy5fcHJvbWlzZUN0b3I9ZHQsZSYmdGhpcy5zZXRDb25maWcoZSl9dmFyIG4sZTtyZXR1cm4gbj10LChlPVt7a2V5OlwiX2FwcGx5RmlsdGVyXCIsdmFsdWU6ZnVuY3Rpb24odCl7Zm9yKHZhciBuPXRoaXMuX2ZpbHRlcnMubGVuZ3RoO24+MDtuLS0pe3ZhciBlPXRoaXMuX2ZpbHRlcnNbbi1uXVt0XTtlJiZlKHRoaXMpfX19LHtrZXk6XCJ0d2VlblwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnZvaWQgMDtyZXR1cm4gdGhpcy5faXNQbGF5aW5nJiZ0aGlzLnN0b3AoKSwhbiYmdGhpcy5fY29uZmlnfHx0aGlzLnNldENvbmZpZyhuKSx0aGlzLl9wYXVzZWRBdFRpbWU9bnVsbCx0aGlzLl90aW1lc3RhbXA9dC5ub3coKSx0aGlzLl9zdGFydCh0aGlzLmdldCgpLHRoaXMuX2RhdGEpLHRoaXMuX2RlbGF5JiZ0aGlzLl9yZW5kZXIodGhpcy5fY3VycmVudFN0YXRlLHRoaXMuX2RhdGEsMCksdGhpcy5fcmVzdW1lKHRoaXMuX3RpbWVzdGFtcCl9fSx7a2V5Olwic2V0Q29uZmlnXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e30sZT10aGlzLl9jb25maWc7Zm9yKHZhciByIGluIG4pZVtyXT1uW3JdO3ZhciBpPWUucHJvbWlzZSx1PXZvaWQgMD09PWk/dGhpcy5fcHJvbWlzZUN0b3I6aSxvPWUuc3RhcnQsYT12b2lkIDA9PT1vP2l0Om8scz1lLmZpbmlzaCxjPWUucmVuZGVyLGY9dm9pZCAwPT09Yz90aGlzLl9jb25maWcuc3RlcHx8aXQ6YyxsPWUuc3RlcCxoPXZvaWQgMD09PWw/aXQ6bDt0aGlzLl9kYXRhPWUuZGF0YXx8ZS5hdHRhY2htZW50fHx0aGlzLl9kYXRhLHRoaXMuX2lzUGxheWluZz0hMSx0aGlzLl9wYXVzZWRBdFRpbWU9bnVsbCx0aGlzLl9zY2hlZHVsZUlkPW51bGwsdGhpcy5fZGVsYXk9bi5kZWxheXx8MCx0aGlzLl9zdGFydD1hLHRoaXMuX3JlbmRlcj1mfHxoLHRoaXMuX2R1cmF0aW9uPWUuZHVyYXRpb258fDUwMCx0aGlzLl9wcm9taXNlQ3Rvcj11LHMmJih0aGlzLl9yZXNvbHZlPXMpO3ZhciBwPW4uZnJvbSx2PW4udG8sXz12b2lkIDA9PT12P3t9OnYseT10aGlzLl9jdXJyZW50U3RhdGUsZD10aGlzLl9vcmlnaW5hbFN0YXRlLGc9dGhpcy5fdGFyZ2V0U3RhdGU7Zm9yKHZhciBtIGluIHApeVttXT1wW21dO3ZhciB3PSExO2Zvcih2YXIgYiBpbiB5KXt2YXIgTz15W2JdO3d8fFUoTykhPT1ldHx8KHc9ITApLGRbYl09TyxnW2JdPV8uaGFzT3duUHJvcGVydHkoYik/X1tiXTpPfWlmKHRoaXMuX2Vhc2luZz1fdCh0aGlzLl9jdXJyZW50U3RhdGUsZS5lYXNpbmcsdGhpcy5fZWFzaW5nKSx0aGlzLl9maWx0ZXJzLmxlbmd0aD0wLHcpe2Zvcih2YXIgUyBpbiB0LmZpbHRlcnMpdC5maWx0ZXJzW1NdLmRvZXNBcHBseSh0aGlzKSYmdGhpcy5fZmlsdGVycy5wdXNoKHQuZmlsdGVyc1tTXSk7dGhpcy5fYXBwbHlGaWx0ZXIodHQpfXJldHVybiB0aGlzfX0se2tleTpcInRoZW5cIix2YWx1ZTpmdW5jdGlvbih0LG4pe3ZhciBlPXRoaXM7cmV0dXJuIHRoaXMuX3Byb21pc2U9bmV3IHRoaXMuX3Byb21pc2VDdG9yKChmdW5jdGlvbih0LG4pe2UuX3Jlc29sdmU9dCxlLl9yZWplY3Q9bn0pKSx0aGlzLl9wcm9taXNlLnRoZW4odCxuKX19LHtrZXk6XCJjYXRjaFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRoZW4oKS5jYXRjaCh0KX19LHtrZXk6XCJnZXRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBWKHt9LHRoaXMuX2N1cnJlbnRTdGF0ZSl9fSx7a2V5Olwic2V0XCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5fY3VycmVudFN0YXRlPXR9fSx7a2V5OlwicGF1c2VcIix2YWx1ZTpmdW5jdGlvbigpe2lmKHRoaXMuX2lzUGxheWluZylyZXR1cm4gdGhpcy5fcGF1c2VkQXRUaW1lPXQubm93KCksdGhpcy5faXNQbGF5aW5nPSExLHl0KHRoaXMpLHRoaXN9fSx7a2V5OlwicmVzdW1lXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcmVzdW1lKCl9fSx7a2V5OlwiX3Jlc3VtZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnQubm93KCk7cmV0dXJuIG51bGw9PT10aGlzLl90aW1lc3RhbXA/dGhpcy50d2VlbigpOnRoaXMuX2lzUGxheWluZz90aGlzLl9wcm9taXNlOih0aGlzLl9wYXVzZWRBdFRpbWUmJih0aGlzLl90aW1lc3RhbXArPW4tdGhpcy5fcGF1c2VkQXRUaW1lLHRoaXMuX3BhdXNlZEF0VGltZT1udWxsKSx0aGlzLl9pc1BsYXlpbmc9ITAsbnVsbD09PXV0Pyh1dD10aGlzLG90PXRoaXMpOih0aGlzLl9wcmV2aW91cz1vdCxvdC5fbmV4dD10aGlzLG90PXRoaXMpLHRoaXMpfX0se2tleTpcInNlZWtcIix2YWx1ZTpmdW5jdGlvbihuKXtuPU1hdGgubWF4KG4sMCk7dmFyIGU9dC5ub3coKTtyZXR1cm4gdGhpcy5fdGltZXN0YW1wK249PT0wfHwodGhpcy5fdGltZXN0YW1wPWUtbixjdCh0aGlzLGUpKSx0aGlzfX0se2tleTpcInN0b3BcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdJiZhcmd1bWVudHNbMF07aWYoIXRoaXMuX2lzUGxheWluZylyZXR1cm4gdGhpczt0aGlzLl9pc1BsYXlpbmc9ITEseXQodGhpcyk7dmFyIG49dGhpcy5fZmlsdGVycy5sZW5ndGg+MDtyZXR1cm4gdCYmKG4mJnRoaXMuX2FwcGx5RmlsdGVyKFopLHN0KDEsdGhpcy5fY3VycmVudFN0YXRlLHRoaXMuX29yaWdpbmFsU3RhdGUsdGhpcy5fdGFyZ2V0U3RhdGUsMSwwLHRoaXMuX2Vhc2luZyksbiYmKHRoaXMuX2FwcGx5RmlsdGVyKFgpLHRoaXMuX2FwcGx5RmlsdGVyKFkpKSksdGhpcy5fcmVzb2x2ZSYmdGhpcy5fcmVzb2x2ZSh7ZGF0YTp0aGlzLl9kYXRhLHN0YXRlOnRoaXMuX2N1cnJlbnRTdGF0ZSx0d2VlbmFibGU6dGhpc30pLHRoaXMuX3Jlc29sdmU9bnVsbCx0aGlzLl9yZWplY3Q9bnVsbCx0aGlzfX0se2tleTpcImNhbmNlbFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0mJmFyZ3VtZW50c1swXSxuPXRoaXMuX2N1cnJlbnRTdGF0ZSxlPXRoaXMuX2RhdGEscj10aGlzLl9pc1BsYXlpbmc7cmV0dXJuIHI/KHRoaXMuX3JlamVjdCYmdGhpcy5fcmVqZWN0KHtkYXRhOmUsc3RhdGU6bix0d2VlbmFibGU6dGhpc30pLHRoaXMuX3Jlc29sdmU9bnVsbCx0aGlzLl9yZWplY3Q9bnVsbCx0aGlzLnN0b3AodCkpOnRoaXN9fSx7a2V5OlwiaXNQbGF5aW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXNQbGF5aW5nfX0se2tleTpcImhhc0VuZGVkXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faGFzRW5kZWR9fSx7a2V5Olwic2V0U2NoZWR1bGVGdW5jdGlvblwiLHZhbHVlOmZ1bmN0aW9uKG4pe3Quc2V0U2NoZWR1bGVGdW5jdGlvbihuKX19LHtrZXk6XCJkYXRhXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06bnVsbDtyZXR1cm4gdCYmKHRoaXMuX2RhdGE9Vih7fSx0KSksdGhpcy5fZGF0YX19LHtrZXk6XCJkaXNwb3NlXCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIHQgaW4gdGhpcylkZWxldGUgdGhpc1t0XX19XSkmJnoobi5wcm90b3R5cGUsZSksdH0oKTtmdW5jdGlvbiBtdCgpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSxuPW5ldyBndDtyZXR1cm4gbi50d2Vlbih0KSxuLnR3ZWVuYWJsZT1uLG59VyhndCxcIm5vd1wiLChmdW5jdGlvbigpe3JldHVybiAkfSkpLFcoZ3QsXCJzZXRTY2hlZHVsZUZ1bmN0aW9uXCIsKGZ1bmN0aW9uKHQpe3JldHVybiBydD10fSkpLFcoZ3QsXCJmaWx0ZXJzXCIse30pLFcoZ3QsXCJmb3JtdWxhc1wiLGF0KSxwdCghMCk7dmFyIHd0LGJ0LE90PS8oXFxkfC18XFwuKS8sU3Q9LyhbXlxcLTAtOS5dKykvZyxqdD0vWzAtOS4tXSsvZyxrdD0od3Q9anQuc291cmNlLGJ0PS8sXFxzKi8uc291cmNlLG5ldyBSZWdFeHAoXCJyZ2JhP1xcXFwoXCIuY29uY2F0KHd0KS5jb25jYXQoYnQpLmNvbmNhdCh3dCkuY29uY2F0KGJ0KS5jb25jYXQod3QsXCIoXCIpLmNvbmNhdChidCkuY29uY2F0KHd0LFwiKT9cXFxcKVwiKSxcImdcIikpLFB0PS9eLipcXCgvLE10PS8jKFswLTldfFthLWZdKXszLDZ9L2dpLEV0PVwiVkFMXCIsVHQ9ZnVuY3Rpb24odCxuKXtyZXR1cm4gdC5tYXAoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJfXCIuY29uY2F0KG4sXCJfXCIpLmNvbmNhdChlKX0pKX07ZnVuY3Rpb24gRnQodCl7cmV0dXJuIHBhcnNlSW50KHQsMTYpfXZhciBJdD1mdW5jdGlvbih0KXtyZXR1cm5cInJnYihcIi5jb25jYXQoKG49dCwzPT09KG49bi5yZXBsYWNlKC8jLyxcIlwiKSkubGVuZ3RoJiYobj0obj1uLnNwbGl0KFwiXCIpKVswXStuWzBdK25bMV0rblsxXStuWzJdK25bMl0pLFtGdChuLnN1YnN0cigwLDIpKSxGdChuLnN1YnN0cigyLDIpKSxGdChuLnN1YnN0cig0LDIpKV0pLmpvaW4oXCIsXCIpLFwiKVwiKTt2YXIgbn0seHQ9ZnVuY3Rpb24odCxuLGUpe3ZhciByPW4ubWF0Y2godCksaT1uLnJlcGxhY2UodCxFdCk7cmV0dXJuIHImJnIuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIGk9aS5yZXBsYWNlKEV0LGUodCkpfSkpLGl9LEF0PWZ1bmN0aW9uKHQpe2Zvcih2YXIgbiBpbiB0KXt2YXIgZT10W25dO1wic3RyaW5nXCI9PXR5cGVvZiBlJiZlLm1hdGNoKE10KSYmKHRbbl09eHQoTXQsZSxJdCkpfX0sQ3Q9ZnVuY3Rpb24odCl7dmFyIG49dC5tYXRjaChqdCksZT1uLnNsaWNlKDAsMykubWFwKE1hdGguZmxvb3IpLHI9dC5tYXRjaChQdClbMF07aWYoMz09PW4ubGVuZ3RoKXJldHVyblwiXCIuY29uY2F0KHIpLmNvbmNhdChlLmpvaW4oXCIsXCIpLFwiKVwiKTtpZig0PT09bi5sZW5ndGgpcmV0dXJuXCJcIi5jb25jYXQocikuY29uY2F0KGUuam9pbihcIixcIiksXCIsXCIpLmNvbmNhdChuWzNdLFwiKVwiKTt0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHJnYkNodW5rOiBcIi5jb25jYXQodCkpfSxEdD1mdW5jdGlvbih0KXtyZXR1cm4gdC5tYXRjaChqdCl9LHF0PWZ1bmN0aW9uKHQsbil7dmFyIGU9e307cmV0dXJuIG4uZm9yRWFjaCgoZnVuY3Rpb24obil7ZVtuXT10W25dLGRlbGV0ZSB0W25dfSkpLGV9LFF0PWZ1bmN0aW9uKHQsbil7cmV0dXJuIG4ubWFwKChmdW5jdGlvbihuKXtyZXR1cm4gdFtuXX0pKX0sQnQ9ZnVuY3Rpb24odCxuKXtyZXR1cm4gbi5mb3JFYWNoKChmdW5jdGlvbihuKXtyZXR1cm4gdD10LnJlcGxhY2UoRXQsK24udG9GaXhlZCg0KSl9KSksdH0sTnQ9ZnVuY3Rpb24odCl7Zm9yKHZhciBuIGluIHQuX2N1cnJlbnRTdGF0ZSlpZihcInN0cmluZ1wiPT10eXBlb2YgdC5fY3VycmVudFN0YXRlW25dKXJldHVybiEwO3JldHVybiExfTtmdW5jdGlvbiBSdCh0KXt2YXIgbj10Ll9jdXJyZW50U3RhdGU7W24sdC5fb3JpZ2luYWxTdGF0ZSx0Ll90YXJnZXRTdGF0ZV0uZm9yRWFjaChBdCksdC5fdG9rZW5EYXRhPWZ1bmN0aW9uKHQpe3ZhciBuLGUscj17fTtmb3IodmFyIGkgaW4gdCl7dmFyIHU9dFtpXTtcInN0cmluZ1wiPT10eXBlb2YgdSYmKHJbaV09e2Zvcm1hdFN0cmluZzoobj11LGU9dm9pZCAwLGU9bi5tYXRjaChTdCksZT8oMT09PWUubGVuZ3RofHxuLmNoYXJBdCgwKS5tYXRjaChPdCkpJiZlLnVuc2hpZnQoXCJcIik6ZT1bXCJcIixcIlwiXSxlLmpvaW4oRXQpKSxjaHVua05hbWVzOlR0KER0KHUpLGkpfSl9cmV0dXJuIHJ9KG4pfWZ1bmN0aW9uIHp0KHQpe3ZhciBuPXQuX2N1cnJlbnRTdGF0ZSxlPXQuX29yaWdpbmFsU3RhdGUscj10Ll90YXJnZXRTdGF0ZSxpPXQuX2Vhc2luZyx1PXQuX3Rva2VuRGF0YTshZnVuY3Rpb24odCxuKXt2YXIgZT1mdW5jdGlvbihlKXt2YXIgcj1uW2VdLmNodW5rTmFtZXMsaT10W2VdO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBpKXt2YXIgdT1pLnNwbGl0KFwiIFwiKSxvPXVbdS5sZW5ndGgtMV07ci5mb3JFYWNoKChmdW5jdGlvbihuLGUpe3JldHVybiB0W25dPXVbZV18fG99KSl9ZWxzZSByLmZvckVhY2goKGZ1bmN0aW9uKG4pe3JldHVybiB0W25dPWl9KSk7ZGVsZXRlIHRbZV19O2Zvcih2YXIgciBpbiBuKWUocil9KGksdSksW24sZSxyXS5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24odCxuKXt2YXIgZT1mdW5jdGlvbihlKXtEdCh0W2VdKS5mb3JFYWNoKChmdW5jdGlvbihyLGkpe3JldHVybiB0W25bZV0uY2h1bmtOYW1lc1tpXV09K3J9KSksZGVsZXRlIHRbZV19O2Zvcih2YXIgciBpbiBuKWUocil9KHQsdSl9KSl9ZnVuY3Rpb24gVXQodCl7dmFyIG49dC5fY3VycmVudFN0YXRlLGU9dC5fb3JpZ2luYWxTdGF0ZSxyPXQuX3RhcmdldFN0YXRlLGk9dC5fZWFzaW5nLHU9dC5fdG9rZW5EYXRhO1tuLGUscl0uZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKHQsbil7Zm9yKHZhciBlIGluIG4pe3ZhciByPW5bZV0saT1yLmNodW5rTmFtZXMsdT1yLmZvcm1hdFN0cmluZyxvPUJ0KHUsUXQocXQodCxpKSxpKSk7dFtlXT14dChrdCxvLEN0KX19KHQsdSl9KSksZnVuY3Rpb24odCxuKXtmb3IodmFyIGUgaW4gbil7dmFyIHI9bltlXS5jaHVua05hbWVzLGk9dFtyWzBdXTt0W2VdPVwic3RyaW5nXCI9PXR5cGVvZiBpP3IubWFwKChmdW5jdGlvbihuKXt2YXIgZT10W25dO3JldHVybiBkZWxldGUgdFtuXSxlfSkpLmpvaW4oXCIgXCIpOml9fShpLHUpfWZ1bmN0aW9uIEx0KHQsbil7dmFyIGU9T2JqZWN0LmtleXModCk7aWYoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyl7dmFyIHI9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0KTtuJiYocj1yLmZpbHRlcigoZnVuY3Rpb24obil7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxuKS5lbnVtZXJhYmxlfSkpKSxlLnB1c2guYXBwbHkoZSxyKX1yZXR1cm4gZX1mdW5jdGlvbiBWdCh0KXtmb3IodmFyIG49MTtuPGFyZ3VtZW50cy5sZW5ndGg7bisrKXt2YXIgZT1udWxsIT1hcmd1bWVudHNbbl0/YXJndW1lbnRzW25dOnt9O24lMj9MdChPYmplY3QoZSksITApLmZvckVhY2goKGZ1bmN0aW9uKG4pe1d0KHQsbixlW25dKX0pKTpPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycz9PYmplY3QuZGVmaW5lUHJvcGVydGllcyh0LE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKGUpKTpMdChPYmplY3QoZSkpLmZvckVhY2goKGZ1bmN0aW9uKG4pe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG4sT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLG4pKX0pKX1yZXR1cm4gdH1mdW5jdGlvbiBXdCh0LG4sZSl7cmV0dXJuIG4gaW4gdD9PYmplY3QuZGVmaW5lUHJvcGVydHkodCxuLHt2YWx1ZTplLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6dFtuXT1lLHR9dmFyICR0PW5ldyBndCxHdD1ndC5maWx0ZXJzLEh0PWZ1bmN0aW9uKHQsbixlLHIpe3ZhciBpPWFyZ3VtZW50cy5sZW5ndGg+NCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTowLHU9VnQoe30sdCksbz1fdCh0LHIpO2Zvcih2YXIgYSBpbiAkdC5fZmlsdGVycy5sZW5ndGg9MCwkdC5zZXQoe30pLCR0Ll9jdXJyZW50U3RhdGU9dSwkdC5fb3JpZ2luYWxTdGF0ZT10LCR0Ll90YXJnZXRTdGF0ZT1uLCR0Ll9lYXNpbmc9byxHdClHdFthXS5kb2VzQXBwbHkoJHQpJiYkdC5fZmlsdGVycy5wdXNoKEd0W2FdKTskdC5fYXBwbHlGaWx0ZXIoXCJ0d2VlbkNyZWF0ZWRcIiksJHQuX2FwcGx5RmlsdGVyKFwiYmVmb3JlVHdlZW5cIik7dmFyIHM9c3QoZSx1LHQsbiwxLGksbyk7cmV0dXJuICR0Ll9hcHBseUZpbHRlcihcImFmdGVyVHdlZW5cIiksc307ZnVuY3Rpb24gSnQodCxuKXsobnVsbD09bnx8bj50Lmxlbmd0aCkmJihuPXQubGVuZ3RoKTtmb3IodmFyIGU9MCxyPW5ldyBBcnJheShuKTtlPG47ZSsrKXJbZV09dFtlXTtyZXR1cm4gcn1mdW5jdGlvbiBLdCh0LG4pe2lmKCEodCBpbnN0YW5jZW9mIG4pKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gWHQodCxuKXtmb3IodmFyIGU9MDtlPG4ubGVuZ3RoO2UrKyl7dmFyIHI9bltlXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsci5rZXkscil9fWZ1bmN0aW9uIFl0KHQsbil7dmFyIGU9bi5nZXQodCk7aWYoIWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7cmV0dXJuIGUuZ2V0P2UuZ2V0LmNhbGwodCk6ZS52YWx1ZX12YXIgWnQ9bmV3IFdlYWtNYXAsdG49ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7S3QodGhpcyx0KSxadC5zZXQodGhpcyx7d3JpdGFibGU6ITAsdmFsdWU6W119KTtmb3IodmFyIG49YXJndW1lbnRzLmxlbmd0aCxlPW5ldyBBcnJheShuKSxyPTA7cjxuO3IrKyllW3JdPWFyZ3VtZW50c1tyXTtlLmZvckVhY2godGhpcy5hZGQuYmluZCh0aGlzKSl9dmFyIG4sZTtyZXR1cm4gbj10LChlPVt7a2V5OlwiYWRkXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIFl0KHRoaXMsWnQpLnB1c2godCksdH19LHtrZXk6XCJyZW1vdmVcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgbj1ZdCh0aGlzLFp0KS5pbmRleE9mKHQpO3JldHVybn5uJiZZdCh0aGlzLFp0KS5zcGxpY2UobiwxKSx0fX0se2tleTpcImVtcHR5XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50d2VlbmFibGVzLm1hcCh0aGlzLnJlbW92ZS5iaW5kKHRoaXMpKX19LHtrZXk6XCJpc1BsYXlpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBZdCh0aGlzLFp0KS5zb21lKChmdW5jdGlvbih0KXtyZXR1cm4gdC5pc1BsYXlpbmcoKX0pKX19LHtrZXk6XCJwbGF5XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gWXQodGhpcyxadCkuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIHQudHdlZW4oKX0pKSx0aGlzfX0se2tleTpcInBhdXNlXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gWXQodGhpcyxadCkuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIHQucGF1c2UoKX0pKSx0aGlzfX0se2tleTpcInJlc3VtZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIFl0KHRoaXMsWnQpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiB0LnJlc3VtZSgpfSkpLHRoaXN9fSx7a2V5Olwic3RvcFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiBZdCh0aGlzLFp0KS5mb3JFYWNoKChmdW5jdGlvbihuKXtyZXR1cm4gbi5zdG9wKHQpfSkpLHRoaXN9fSx7a2V5OlwidHdlZW5hYmxlc1wiLGdldDpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXtpZihBcnJheS5pc0FycmF5KHQpKXJldHVybiBKdCh0KX0odD1ZdCh0aGlzLFp0KSl8fGZ1bmN0aW9uKHQpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QodCkpcmV0dXJuIEFycmF5LmZyb20odCl9KHQpfHxmdW5jdGlvbih0LG4pe2lmKHQpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXJldHVybiBKdCh0LG4pO3ZhciBlPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KS5zbGljZSg4LC0xKTtyZXR1cm5cIk9iamVjdFwiPT09ZSYmdC5jb25zdHJ1Y3RvciYmKGU9dC5jb25zdHJ1Y3Rvci5uYW1lKSxcIk1hcFwiPT09ZXx8XCJTZXRcIj09PWU/QXJyYXkuZnJvbSh0KTpcIkFyZ3VtZW50c1wiPT09ZXx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QoZSk/SnQodCxuKTp2b2lkIDB9fSh0KXx8ZnVuY3Rpb24oKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX0oKTt2YXIgdH19LHtrZXk6XCJwcm9taXNlc1wiLGdldDpmdW5jdGlvbigpe3JldHVybiBZdCh0aGlzLFp0KS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnRoZW4oKX0pKX19XSkmJlh0KG4ucHJvdG90eXBlLGUpLHR9KCk7dmFyIG5uPWZ1bmN0aW9uKHQsbixlLHIsaSl7dmFyIHU9ZnVuY3Rpb24odCxuLGUscil7cmV0dXJuIGZ1bmN0aW9uKGkpe3JldHVybiBmPTAsbD0wLGg9MCxwPWZ1bmN0aW9uKHQpe3JldHVybigoZip0K2wpKnQraCkqdH0sdj1mdW5jdGlvbih0KXtyZXR1cm4oMypmKnQrMipsKSp0K2h9LF89ZnVuY3Rpb24odCl7cmV0dXJuIHQ+PTA/dDowLXR9LGY9MS0oaD0zKih1PXQpKS0obD0zKihlLXUpLWgpLGE9MS0oYz0zKihvPW4pKS0ocz0zKihyLW8pLWMpLGZ1bmN0aW9uKHQpe3JldHVybigoYSp0K3MpKnQrYykqdH0oZnVuY3Rpb24odCxuKXt2YXIgZSxyLGksdSxvLGE7Zm9yKGk9dCxhPTA7YTw4O2ErKyl7aWYodT1wKGkpLXQsXyh1KTxuKXJldHVybiBpO2lmKG89dihpKSxfKG8pPDFlLTYpYnJlYWs7aS09dS9vfWlmKChpPXQpPChlPTApKXJldHVybiBlO2lmKGk+KHI9MSkpcmV0dXJuIHI7Zm9yKDtlPHI7KXtpZih1PXAoaSksXyh1LXQpPG4pcmV0dXJuIGk7dD51P2U9aTpyPWksaT0uNSooci1lKStlfXJldHVybiBpfShpLGZ1bmN0aW9uKHQpe3JldHVybiAxLygyMDAqdCl9KDEpKSk7dmFyIHUsbyxhLHMsYyxmLGwsaCxwLHYsX319KG4sZSxyLGkpO3JldHVybiB1LmRpc3BsYXlOYW1lPXQsdS54MT1uLHUueTE9ZSx1LngyPXIsdS55Mj1pLGd0LmZvcm11bGFzW3RdPXV9LGVuPWZ1bmN0aW9uKHQpe3JldHVybiBkZWxldGUgZ3QuZm9ybXVsYXNbdF19O2d0LmZpbHRlcnMudG9rZW49aX19LG49e307ZnVuY3Rpb24gZShyKXtpZihuW3JdKXJldHVybiBuW3JdLmV4cG9ydHM7dmFyIGk9bltyXT17ZXhwb3J0czp7fX07cmV0dXJuIHRbcl0oaSxpLmV4cG9ydHMsZSksaS5leHBvcnRzfXJldHVybiBlLmQ9ZnVuY3Rpb24odCxuKXtmb3IodmFyIHIgaW4gbillLm8obixyKSYmIWUubyh0LHIpJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxyLHtlbnVtZXJhYmxlOiEwLGdldDpuW3JdfSl9LGUuZz1mdW5jdGlvbigpe2lmKFwib2JqZWN0XCI9PXR5cGVvZiBnbG9iYWxUaGlzKXJldHVybiBnbG9iYWxUaGlzO3RyeXtyZXR1cm4gdGhpc3x8bmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKX1jYXRjaCh0KXtpZihcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93KXJldHVybiB3aW5kb3d9fSgpLGUubz1mdW5jdGlvbih0LG4pe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxuKX0sZS5yPWZ1bmN0aW9uKHQpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LGUoNzIwKX0oKX0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoaWZ0eS5qcy5tYXAiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XHJcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xyXG4gICAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSwgcGFjaykge1xyXG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XHJcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XHJcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xyXG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEluKHN0YXRlLCByZWNlaXZlcikge1xyXG4gICAgaWYgKHJlY2VpdmVyID09PSBudWxsIHx8ICh0eXBlb2YgcmVjZWl2ZXIgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHJlY2VpdmVyICE9PSBcImZ1bmN0aW9uXCIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHVzZSAnaW4nIG9wZXJhdG9yIG9uIG5vbi1vYmplY3RcIik7XHJcbiAgICByZXR1cm4gdHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciA9PT0gc3RhdGUgOiBzdGF0ZS5oYXMocmVjZWl2ZXIpO1xyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRnVuY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlRXJyb3JDbGFzcyB9IGZyb20gJy4vY3JlYXRlRXJyb3JDbGFzcyc7XG5leHBvcnQgdmFyIFVuc3Vic2NyaXB0aW9uRXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gVW5zdWJzY3JpcHRpb25FcnJvckltcGwoZXJyb3JzKSB7XG4gICAgICAgIF9zdXBlcih0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZXJyb3JzXG4gICAgICAgICAgICA/IGVycm9ycy5sZW5ndGggKyBcIiBlcnJvcnMgb2NjdXJyZWQgZHVyaW5nIHVuc3Vic2NyaXB0aW9uOlxcblwiICsgZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyLCBpKSB7IHJldHVybiBpICsgMSArIFwiKSBcIiArIGVyci50b1N0cmluZygpOyB9KS5qb2luKCdcXG4gICcpXG4gICAgICAgICAgICA6ICcnO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVW5zdWJzY3JpcHRpb25FcnJvcic7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVuc3Vic2NyaXB0aW9uRXJyb3IuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVycm9yQ2xhc3MoY3JlYXRlSW1wbCkge1xuICAgIHZhciBfc3VwZXIgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgRXJyb3IuY2FsbChpbnN0YW5jZSk7XG4gICAgICAgIGluc3RhbmNlLnN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgfTtcbiAgICB2YXIgY3RvckZ1bmMgPSBjcmVhdGVJbXBsKF9zdXBlcik7XG4gICAgY3RvckZ1bmMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIGN0b3JGdW5jLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JGdW5jO1xuICAgIHJldHVybiBjdG9yRnVuYztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUVycm9yQ2xhc3MuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGFyclJlbW92ZShhcnIsIGl0ZW0pIHtcbiAgICBpZiAoYXJyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgICAgICAwIDw9IGluZGV4ICYmIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyclJlbW92ZS5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXksIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgVW5zdWJzY3JpcHRpb25FcnJvciB9IGZyb20gJy4vdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yJztcbmltcG9ydCB7IGFyclJlbW92ZSB9IGZyb20gJy4vdXRpbC9hcnJSZW1vdmUnO1xudmFyIFN1YnNjcmlwdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKGluaXRpYWxUZWFyZG93bikge1xuICAgICAgICB0aGlzLmluaXRpYWxUZWFyZG93biA9IGluaXRpYWxUZWFyZG93bjtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZmluYWxpemVycyA9IG51bGw7XG4gICAgfVxuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlXzEsIF9hLCBlXzIsIF9iO1xuICAgICAgICB2YXIgZXJyb3JzO1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgICAgIGlmIChfcGFyZW50YWdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX3BhcmVudGFnZV8xID0gX192YWx1ZXMoX3BhcmVudGFnZSksIF9wYXJlbnRhZ2VfMV8xID0gX3BhcmVudGFnZV8xLm5leHQoKTsgIV9wYXJlbnRhZ2VfMV8xLmRvbmU7IF9wYXJlbnRhZ2VfMV8xID0gX3BhcmVudGFnZV8xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnRfMSA9IF9wYXJlbnRhZ2VfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudF8xLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9wYXJlbnRhZ2VfMV8xICYmICFfcGFyZW50YWdlXzFfMS5kb25lICYmIChfYSA9IF9wYXJlbnRhZ2VfMS5yZXR1cm4pKSBfYS5jYWxsKF9wYXJlbnRhZ2VfMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF9wYXJlbnRhZ2UucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpbml0aWFsRmluYWxpemVyID0gdGhpcy5pbml0aWFsVGVhcmRvd247XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihpbml0aWFsRmluYWxpemVyKSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxGaW5hbGl6ZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZSBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IgPyBlLmVycm9ycyA6IFtlXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgX2ZpbmFsaXplcnMgPSB0aGlzLl9maW5hbGl6ZXJzO1xuICAgICAgICAgICAgaWYgKF9maW5hbGl6ZXJzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmluYWxpemVycyA9IG51bGw7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2ZpbmFsaXplcnNfMSA9IF9fdmFsdWVzKF9maW5hbGl6ZXJzKSwgX2ZpbmFsaXplcnNfMV8xID0gX2ZpbmFsaXplcnNfMS5uZXh0KCk7ICFfZmluYWxpemVyc18xXzEuZG9uZTsgX2ZpbmFsaXplcnNfMV8xID0gX2ZpbmFsaXplcnNfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaW5hbGl6ZXIgPSBfZmluYWxpemVyc18xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWNGaW5hbGl6ZXIoZmluYWxpemVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMgIT09IG51bGwgJiYgZXJyb3JzICE9PSB2b2lkIDAgPyBlcnJvcnMgOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChlcnJvcnMpKSwgX19yZWFkKGVyci5lcnJvcnMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzJfMSkgeyBlXzIgPSB7IGVycm9yOiBlXzJfMSB9OyB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2ZpbmFsaXplcnNfMV8xICYmICFfZmluYWxpemVyc18xXzEuZG9uZSAmJiAoX2IgPSBfZmluYWxpemVyc18xLnJldHVybikpIF9iLmNhbGwoX2ZpbmFsaXplcnNfMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5zdWJzY3JpcHRpb25FcnJvcihlcnJvcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh0ZWFyZG93bikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0ZWFyZG93biAmJiB0ZWFyZG93biAhPT0gdGhpcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgZXhlY0ZpbmFsaXplcih0ZWFyZG93bik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGVhcmRvd24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlYXJkb3duLmNsb3NlZCB8fCB0ZWFyZG93bi5faGFzUGFyZW50KHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGVhcmRvd24uX2FkZFBhcmVudCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKHRoaXMuX2ZpbmFsaXplcnMgPSAoX2EgPSB0aGlzLl9maW5hbGl6ZXJzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSkucHVzaCh0ZWFyZG93bik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX2hhc1BhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgIHJldHVybiBfcGFyZW50YWdlID09PSBwYXJlbnQgfHwgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkgJiYgX3BhcmVudGFnZS5pbmNsdWRlcyhwYXJlbnQpKTtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX2FkZFBhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkgPyAoX3BhcmVudGFnZS5wdXNoKHBhcmVudCksIF9wYXJlbnRhZ2UpIDogX3BhcmVudGFnZSA/IFtfcGFyZW50YWdlLCBwYXJlbnRdIDogcGFyZW50O1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5fcmVtb3ZlUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgaWYgKF9wYXJlbnRhZ2UgPT09IHBhcmVudCkge1xuICAgICAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpKSB7XG4gICAgICAgICAgICBhcnJSZW1vdmUoX3BhcmVudGFnZSwgcGFyZW50KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAodGVhcmRvd24pIHtcbiAgICAgICAgdmFyIF9maW5hbGl6ZXJzID0gdGhpcy5fZmluYWxpemVycztcbiAgICAgICAgX2ZpbmFsaXplcnMgJiYgYXJyUmVtb3ZlKF9maW5hbGl6ZXJzLCB0ZWFyZG93bik7XG4gICAgICAgIGlmICh0ZWFyZG93biBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGVhcmRvd24uX3JlbW92ZVBhcmVudCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLkVNUFRZID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVtcHR5ID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICBlbXB0eS5jbG9zZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZW1wdHk7XG4gICAgfSkoKTtcbiAgICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpKTtcbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiB9O1xuZXhwb3J0IHZhciBFTVBUWV9TVUJTQ1JJUFRJT04gPSBTdWJzY3JpcHRpb24uRU1QVFk7XG5leHBvcnQgZnVuY3Rpb24gaXNTdWJzY3JpcHRpb24odmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uIHx8XG4gICAgICAgICh2YWx1ZSAmJiAnY2xvc2VkJyBpbiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnJlbW92ZSkgJiYgaXNGdW5jdGlvbih2YWx1ZS5hZGQpICYmIGlzRnVuY3Rpb24odmFsdWUudW5zdWJzY3JpYmUpKSk7XG59XG5mdW5jdGlvbiBleGVjRmluYWxpemVyKGZpbmFsaXplcikge1xuICAgIGlmIChpc0Z1bmN0aW9uKGZpbmFsaXplcikpIHtcbiAgICAgICAgZmluYWxpemVyKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmaW5hbGl6ZXIudW5zdWJzY3JpYmUoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpcHRpb24uanMubWFwIiwiZXhwb3J0IHZhciBjb25maWcgPSB7XG4gICAgb25VbmhhbmRsZWRFcnJvcjogbnVsbCxcbiAgICBvblN0b3BwZWROb3RpZmljYXRpb246IG51bGwsXG4gICAgUHJvbWlzZTogdW5kZWZpbmVkLFxuICAgIHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmc6IGZhbHNlLFxuICAgIHVzZURlcHJlY2F0ZWROZXh0Q29udGV4dDogZmFsc2UsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuZXhwb3J0IHZhciB0aW1lb3V0UHJvdmlkZXIgPSB7XG4gICAgc2V0VGltZW91dDogZnVuY3Rpb24gKGhhbmRsZXIsIHRpbWVvdXQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGVnYXRlID0gdGltZW91dFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLnNldFRpbWVvdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZS5zZXRUaW1lb3V0LmFwcGx5KGRlbGVnYXRlLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgfSxcbiAgICBjbGVhclRpbWVvdXQ6IGZ1bmN0aW9uIChoYW5kbGUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gdGltZW91dFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICByZXR1cm4gKChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuY2xlYXJUaW1lb3V0KSB8fCBjbGVhclRpbWVvdXQpKGhhbmRsZSk7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVvdXRQcm92aWRlci5qcy5tYXAiLCJpbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHsgdGltZW91dFByb3ZpZGVyIH0gZnJvbSAnLi4vc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlcic7XG5leHBvcnQgZnVuY3Rpb24gcmVwb3J0VW5oYW5kbGVkRXJyb3IoZXJyKSB7XG4gICAgdGltZW91dFByb3ZpZGVyLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb25VbmhhbmRsZWRFcnJvciA9IGNvbmZpZy5vblVuaGFuZGxlZEVycm9yO1xuICAgICAgICBpZiAob25VbmhhbmRsZWRFcnJvcikge1xuICAgICAgICAgICAgb25VbmhhbmRsZWRFcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXBvcnRVbmhhbmRsZWRFcnJvci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gbm9vcCgpIHsgfVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9vcC5qcy5tYXAiLCJleHBvcnQgdmFyIENPTVBMRVRFX05PVElGSUNBVElPTiA9IChmdW5jdGlvbiAoKSB7IHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ0MnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7IH0pKCk7XG5leHBvcnQgZnVuY3Rpb24gZXJyb3JOb3RpZmljYXRpb24oZXJyb3IpIHtcbiAgICByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdFJywgdW5kZWZpbmVkLCBlcnJvcik7XG59XG5leHBvcnQgZnVuY3Rpb24gbmV4dE5vdGlmaWNhdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ04nLCB2YWx1ZSwgdW5kZWZpbmVkKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOb3RpZmljYXRpb24oa2luZCwgdmFsdWUsIGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAga2luZDoga2luZCxcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vdGlmaWNhdGlvbkZhY3Rvcmllcy5qcy5tYXAiLCJpbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xudmFyIGNvbnRleHQgPSBudWxsO1xuZXhwb3J0IGZ1bmN0aW9uIGVycm9yQ29udGV4dChjYikge1xuICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICB2YXIgaXNSb290ID0gIWNvbnRleHQ7XG4gICAgICAgIGlmIChpc1Jvb3QpIHtcbiAgICAgICAgICAgIGNvbnRleHQgPSB7IGVycm9yVGhyb3duOiBmYWxzZSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgfVxuICAgICAgICBjYigpO1xuICAgICAgICBpZiAoaXNSb290KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBjb250ZXh0LCBlcnJvclRocm93biA9IF9hLmVycm9yVGhyb3duLCBlcnJvciA9IF9hLmVycm9yO1xuICAgICAgICAgICAgY29udGV4dCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2IoKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gY2FwdHVyZUVycm9yKGVycikge1xuICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyAmJiBjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQuZXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgICBjb250ZXh0LmVycm9yID0gZXJyO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yQ29udGV4dC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBpc1N1YnNjcmlwdGlvbiwgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgcmVwb3J0VW5oYW5kbGVkRXJyb3IgfSBmcm9tICcuL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3InO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4vdXRpbC9ub29wJztcbmltcG9ydCB7IG5leHROb3RpZmljYXRpb24sIGVycm9yTm90aWZpY2F0aW9uLCBDT01QTEVURV9OT1RJRklDQVRJT04gfSBmcm9tICcuL05vdGlmaWNhdGlvbkZhY3Rvcmllcyc7XG5pbXBvcnQgeyB0aW1lb3V0UHJvdmlkZXIgfSBmcm9tICcuL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXInO1xuaW1wb3J0IHsgY2FwdHVyZUVycm9yIH0gZnJvbSAnLi91dGlsL2Vycm9yQ29udGV4dCc7XG52YXIgU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgaWYgKGlzU3Vic2NyaXB0aW9uKGRlc3RpbmF0aW9uKSkge1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmFkZChfdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IEVNUFRZX09CU0VSVkVSO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3Vic2NyaWJlci5jcmVhdGUgPSBmdW5jdGlvbiAobmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2FmZVN1YnNjcmliZXIobmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKG5leHROb3RpZmljYXRpb24odmFsdWUpLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX25leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKGVycm9yTm90aWZpY2F0aW9uKGVyciksIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihDT01QTEVURV9OT1RJRklDQVRJT04sIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUudW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTdWJzY3JpYmVyO1xufShTdWJzY3JpcHRpb24pKTtcbmV4cG9ydCB7IFN1YnNjcmliZXIgfTtcbnZhciBfYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kO1xuZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICAgIHJldHVybiBfYmluZC5jYWxsKGZuLCB0aGlzQXJnKTtcbn1cbnZhciBDb25zdW1lck9ic2VydmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb25zdW1lck9ic2VydmVyKHBhcnRpYWxPYnNlcnZlcikge1xuICAgICAgICB0aGlzLnBhcnRpYWxPYnNlcnZlciA9IHBhcnRpYWxPYnNlcnZlcjtcbiAgICB9XG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIuZXJyb3IpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlciA9IHRoaXMucGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAocGFydGlhbE9ic2VydmVyLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQ29uc3VtZXJPYnNlcnZlcjtcbn0oKSk7XG52YXIgU2FmZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTYWZlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTYWZlU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG9ic2VydmVyT3JOZXh0KSB8fCAhb2JzZXJ2ZXJPck5leHQpIHtcbiAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IHtcbiAgICAgICAgICAgICAgICBuZXh0OiAob2JzZXJ2ZXJPck5leHQgIT09IG51bGwgJiYgb2JzZXJ2ZXJPck5leHQgIT09IHZvaWQgMCA/IG9ic2VydmVyT3JOZXh0IDogdW5kZWZpbmVkKSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IgIT09IG51bGwgJiYgZXJyb3IgIT09IHZvaWQgMCA/IGVycm9yIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZSAhPT0gbnVsbCAmJiBjb21wbGV0ZSAhPT0gdm9pZCAwID8gY29tcGxldGUgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGNvbnRleHRfMTtcbiAgICAgICAgICAgIGlmIChfdGhpcyAmJiBjb25maWcudXNlRGVwcmVjYXRlZE5leHRDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgY29udGV4dF8xID0gT2JqZWN0LmNyZWF0ZShvYnNlcnZlck9yTmV4dCk7XG4gICAgICAgICAgICAgICAgY29udGV4dF8xLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMudW5zdWJzY3JpYmUoKTsgfTtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQ6IG9ic2VydmVyT3JOZXh0Lm5leHQgJiYgYmluZChvYnNlcnZlck9yTmV4dC5uZXh0LCBjb250ZXh0XzEpLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogb2JzZXJ2ZXJPck5leHQuZXJyb3IgJiYgYmluZChvYnNlcnZlck9yTmV4dC5lcnJvciwgY29udGV4dF8xKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IG9ic2VydmVyT3JOZXh0LmNvbXBsZXRlICYmIGJpbmQob2JzZXJ2ZXJPck5leHQuY29tcGxldGUsIGNvbnRleHRfMSksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IG9ic2VydmVyT3JOZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gbmV3IENvbnN1bWVyT2JzZXJ2ZXIocGFydGlhbE9ic2VydmVyKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gU2FmZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IFNhZmVTdWJzY3JpYmVyIH07XG5mdW5jdGlvbiBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcikge1xuICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICBjYXB0dXJlRXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVwb3J0VW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRlZmF1bHRFcnJvckhhbmRsZXIoZXJyKSB7XG4gICAgdGhyb3cgZXJyO1xufVxuZnVuY3Rpb24gaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIHN1YnNjcmliZXIpIHtcbiAgICB2YXIgb25TdG9wcGVkTm90aWZpY2F0aW9uID0gY29uZmlnLm9uU3RvcHBlZE5vdGlmaWNhdGlvbjtcbiAgICBvblN0b3BwZWROb3RpZmljYXRpb24gJiYgdGltZW91dFByb3ZpZGVyLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gb25TdG9wcGVkTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbiwgc3Vic2NyaWJlcik7IH0pO1xufVxuZXhwb3J0IHZhciBFTVBUWV9PQlNFUlZFUiA9IHtcbiAgICBjbG9zZWQ6IHRydWUsXG4gICAgbmV4dDogbm9vcCxcbiAgICBlcnJvcjogZGVmYXVsdEVycm9ySGFuZGxlcixcbiAgICBjb21wbGV0ZTogbm9vcCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpYmVyLmpzLm1hcCIsImV4cG9ydCB2YXIgb2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7IHJldHVybiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wub2JzZXJ2YWJsZSkgfHwgJ0BAb2JzZXJ2YWJsZSc7IH0pKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZhYmxlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gICAgcmV0dXJuIHg7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZGVudGl0eS5qcy5tYXAiLCJpbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIHBpcGUoKSB7XG4gICAgdmFyIGZucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGZuc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gcGlwZUZyb21BcnJheShmbnMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBpcGVGcm9tQXJyYXkoZm5zKSB7XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgIH1cbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZm5zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcGlwZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGZucy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGZuKSB7IHJldHVybiBmbihwcmV2KTsgfSwgaW5wdXQpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXBlLmpzLm1hcCIsImltcG9ydCB7IFNhZmVTdWJzY3JpYmVyLCBTdWJzY3JpYmVyIH0gZnJvbSAnLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IGlzU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4vc3ltYm9sL29ic2VydmFibGUnO1xuaW1wb3J0IHsgcGlwZUZyb21BcnJheSB9IGZyb20gJy4vdXRpbC9waXBlJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBlcnJvckNvbnRleHQgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcbnZhciBPYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZSkge1xuICAgICAgICBpZiAoc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgb2JzZXJ2YWJsZS5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBzdWJzY3JpYmVyID0gaXNTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0KSA/IG9ic2VydmVyT3JOZXh0IDogbmV3IFNhZmVTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICBlcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMsIG9wZXJhdG9yID0gX2Eub3BlcmF0b3IsIHNvdXJjZSA9IF9hLnNvdXJjZTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKG9wZXJhdG9yXG4gICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRvci5jYWxsKHN1YnNjcmliZXIsIHNvdXJjZSlcbiAgICAgICAgICAgICAgICA6IHNvdXJjZVxuICAgICAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3Vic2NyaWJlKHN1YnNjcmliZXIpXG4gICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl90cnlTdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdWJzY3JpYmUoc2luayk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc2luay5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKG5leHQsIHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpYmVyID0gbmV3IFNhZmVTdWJzY3JpYmVyKHtcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiByZXNvbHZlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuc291cmNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGVbU3ltYm9sX29ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcGVyYXRpb25zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBvcGVyYXRpb25zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBpcGVGcm9tQXJyYXkob3BlcmF0aW9ucykodGhpcyk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS50b1Byb21pc2UgPSBmdW5jdGlvbiAocHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh4KSB7IHJldHVybiAodmFsdWUgPSB4KTsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gcmVqZWN0KGVycik7IH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc29sdmUodmFsdWUpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKHN1YnNjcmliZSk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZTtcbn0oKSk7XG5leHBvcnQgeyBPYnNlcnZhYmxlIH07XG5mdW5jdGlvbiBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcikge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKF9hID0gcHJvbWlzZUN0b3IgIT09IG51bGwgJiYgcHJvbWlzZUN0b3IgIT09IHZvaWQgMCA/IHByb21pc2VDdG9yIDogY29uZmlnLlByb21pc2UpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFByb21pc2U7XG59XG5mdW5jdGlvbiBpc09ic2VydmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUubmV4dCkgJiYgaXNGdW5jdGlvbih2YWx1ZS5lcnJvcikgJiYgaXNGdW5jdGlvbih2YWx1ZS5jb21wbGV0ZSk7XG59XG5mdW5jdGlvbiBpc1N1YnNjcmliZXIodmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlIGluc3RhbmNlb2YgU3Vic2NyaWJlcikgfHwgKGlzT2JzZXJ2ZXIodmFsdWUpICYmIGlzU3Vic2NyaXB0aW9uKHZhbHVlKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZhYmxlLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcbnZhciBBY3Rpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICB9XG4gICAgQWN0aW9uLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIEFjdGlvbjtcbn0oU3Vic2NyaXB0aW9uKSk7XG5leHBvcnQgeyBBY3Rpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFjdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmV4cG9ydCB2YXIgaW50ZXJ2YWxQcm92aWRlciA9IHtcbiAgICBzZXRJbnRlcnZhbDogZnVuY3Rpb24gKGhhbmRsZXIsIHRpbWVvdXQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGVnYXRlID0gaW50ZXJ2YWxQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5zZXRJbnRlcnZhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlLnNldEludGVydmFsLmFwcGx5KGRlbGVnYXRlLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldEludGVydmFsLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xuICAgIH0sXG4gICAgY2xlYXJJbnRlcnZhbDogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBpbnRlcnZhbFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICByZXR1cm4gKChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuY2xlYXJJbnRlcnZhbCkgfHwgY2xlYXJJbnRlcnZhbCkoaGFuZGxlKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJ2YWxQcm92aWRlci5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gJy4vQWN0aW9uJztcbmltcG9ydCB7IGludGVydmFsUHJvdmlkZXIgfSBmcm9tICcuL2ludGVydmFsUHJvdmlkZXInO1xuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi4vdXRpbC9hcnJSZW1vdmUnO1xudmFyIEFzeW5jQWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXN5bmNBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXN5bmNBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNjaGVkdWxlciwgd29yaykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy53b3JrID0gd29yaztcbiAgICAgICAgX3RoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB2YXIgaWQgPSB0aGlzLmlkO1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgICAgICB0aGlzLmlkID0gdGhpcy5pZCB8fCB0aGlzLnJlcXVlc3RBc3luY0lkKHNjaGVkdWxlciwgdGhpcy5pZCwgZGVsYXkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5yZXF1ZXN0QXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIF9pZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIHJldHVybiBpbnRlcnZhbFByb3ZpZGVyLnNldEludGVydmFsKHNjaGVkdWxlci5mbHVzaC5iaW5kKHNjaGVkdWxlciwgdGhpcyksIGRlbGF5KTtcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZCA9IGZ1bmN0aW9uIChfc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmIChkZWxheSAhPSBudWxsICYmIHRoaXMuZGVsYXkgPT09IGRlbGF5ICYmIHRoaXMucGVuZGluZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBpZDtcbiAgICAgICAgfVxuICAgICAgICBpbnRlcnZhbFByb3ZpZGVyLmNsZWFySW50ZXJ2YWwoaWQpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLmV4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignZXhlY3V0aW5nIGEgY2FuY2VsbGVkIGFjdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLl9leGVjdXRlKHN0YXRlLCBkZWxheSk7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMucGVuZGluZyA9PT0gZmFsc2UgJiYgdGhpcy5pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZCh0aGlzLnNjaGVkdWxlciwgdGhpcy5pZCwgbnVsbCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5fZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgX2RlbGF5KSB7XG4gICAgICAgIHZhciBlcnJvcmVkID0gZmFsc2U7XG4gICAgICAgIHZhciBlcnJvclZhbHVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy53b3JrKHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZXJyb3JlZCA9IHRydWU7XG4gICAgICAgICAgICBlcnJvclZhbHVlID0gZSA/IGUgOiBuZXcgRXJyb3IoJ1NjaGVkdWxlZCBhY3Rpb24gdGhyZXcgZmFsc3kgZXJyb3InKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3JlZCkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yVmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgaWQgPSBfYS5pZCwgc2NoZWR1bGVyID0gX2Euc2NoZWR1bGVyO1xuICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBzY2hlZHVsZXIuYWN0aW9ucztcbiAgICAgICAgICAgIHRoaXMud29yayA9IHRoaXMuc3RhdGUgPSB0aGlzLnNjaGVkdWxlciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGFyclJlbW92ZShhY3Rpb25zLCB0aGlzKTtcbiAgICAgICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMucmVjeWNsZUFzeW5jSWQoc2NoZWR1bGVyLCBpZCwgbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRlbGF5ID0gbnVsbDtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUudW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFzeW5jQWN0aW9uO1xufShBY3Rpb24pKTtcbmV4cG9ydCB7IEFzeW5jQWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc3luY0FjdGlvbi5qcy5tYXAiLCJleHBvcnQgdmFyIGRhdGVUaW1lc3RhbXBQcm92aWRlciA9IHtcbiAgICBub3c6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChkYXRlVGltZXN0YW1wUHJvdmlkZXIuZGVsZWdhdGUgfHwgRGF0ZSkubm93KCk7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGVUaW1lc3RhbXBQcm92aWRlci5qcy5tYXAiLCJpbXBvcnQgeyBkYXRlVGltZXN0YW1wUHJvdmlkZXIgfSBmcm9tICcuL3NjaGVkdWxlci9kYXRlVGltZXN0YW1wUHJvdmlkZXInO1xudmFyIFNjaGVkdWxlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2NoZWR1bGVyKHNjaGVkdWxlckFjdGlvbkN0b3IsIG5vdykge1xuICAgICAgICBpZiAobm93ID09PSB2b2lkIDApIHsgbm93ID0gU2NoZWR1bGVyLm5vdzsgfVxuICAgICAgICB0aGlzLnNjaGVkdWxlckFjdGlvbkN0b3IgPSBzY2hlZHVsZXJBY3Rpb25DdG9yO1xuICAgICAgICB0aGlzLm5vdyA9IG5vdztcbiAgICB9XG4gICAgU2NoZWR1bGVyLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uICh3b3JrLCBkZWxheSwgc3RhdGUpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIHJldHVybiBuZXcgdGhpcy5zY2hlZHVsZXJBY3Rpb25DdG9yKHRoaXMsIHdvcmspLnNjaGVkdWxlKHN0YXRlLCBkZWxheSk7XG4gICAgfTtcbiAgICBTY2hlZHVsZXIubm93ID0gZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLm5vdztcbiAgICByZXR1cm4gU2NoZWR1bGVyO1xufSgpKTtcbmV4cG9ydCB7IFNjaGVkdWxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2NoZWR1bGVyLmpzLm1hcCIsImltcG9ydCB7IEFzeW5jQWN0aW9uIH0gZnJvbSAnLi9Bc3luY0FjdGlvbic7XG5pbXBvcnQgeyBBc3luY1NjaGVkdWxlciB9IGZyb20gJy4vQXN5bmNTY2hlZHVsZXInO1xuZXhwb3J0IHZhciBhc3luY1NjaGVkdWxlciA9IG5ldyBBc3luY1NjaGVkdWxlcihBc3luY0FjdGlvbik7XG5leHBvcnQgdmFyIGFzeW5jID0gYXN5bmNTY2hlZHVsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3luYy5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFNjaGVkdWxlciB9IGZyb20gJy4uL1NjaGVkdWxlcic7XG52YXIgQXN5bmNTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBc3luY1NjaGVkdWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc3luY1NjaGVkdWxlcihTY2hlZHVsZXJBY3Rpb24sIG5vdykge1xuICAgICAgICBpZiAobm93ID09PSB2b2lkIDApIHsgbm93ID0gU2NoZWR1bGVyLm5vdzsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBTY2hlZHVsZXJBY3Rpb24sIG5vdykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYWN0aW9ucyA9IFtdO1xuICAgICAgICBfdGhpcy5fYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzLl9zY2hlZHVsZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXN5bmNTY2hlZHVsZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICB2YXIgYWN0aW9ucyA9IHRoaXMuYWN0aW9ucztcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZSkge1xuICAgICAgICAgICAgYWN0aW9ucy5wdXNoKGFjdGlvbik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSB0cnVlO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoKGVycm9yID0gYWN0aW9uLmV4ZWN1dGUoYWN0aW9uLnN0YXRlLCBhY3Rpb24uZGVsYXkpKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICgoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSk7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHdoaWxlICgoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBc3luY1NjaGVkdWxlcjtcbn0oU2NoZWR1bGVyKSk7XG5leHBvcnQgeyBBc3luY1NjaGVkdWxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNTY2hlZHVsZXIuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNTY2hlZHVsZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5zY2hlZHVsZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1NjaGVkdWxlci5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBhc3luYyBhcyBhc3luY1NjaGVkdWxlciB9IGZyb20gJy4uL3NjaGVkdWxlci9hc3luYyc7XG5pbXBvcnQgeyBpc1NjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvaXNTY2hlZHVsZXInO1xuaW1wb3J0IHsgaXNWYWxpZERhdGUgfSBmcm9tICcuLi91dGlsL2lzRGF0ZSc7XG5leHBvcnQgZnVuY3Rpb24gdGltZXIoZHVlVGltZSwgaW50ZXJ2YWxPclNjaGVkdWxlciwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGR1ZVRpbWUgPT09IHZvaWQgMCkgeyBkdWVUaW1lID0gMDsgfVxuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY1NjaGVkdWxlcjsgfVxuICAgIHZhciBpbnRlcnZhbER1cmF0aW9uID0gLTE7XG4gICAgaWYgKGludGVydmFsT3JTY2hlZHVsZXIgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNTY2hlZHVsZXIoaW50ZXJ2YWxPclNjaGVkdWxlcikpIHtcbiAgICAgICAgICAgIHNjaGVkdWxlciA9IGludGVydmFsT3JTY2hlZHVsZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbnRlcnZhbER1cmF0aW9uID0gaW50ZXJ2YWxPclNjaGVkdWxlcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGR1ZSA9IGlzVmFsaWREYXRlKGR1ZVRpbWUpID8gK2R1ZVRpbWUgLSBzY2hlZHVsZXIubm93KCkgOiBkdWVUaW1lO1xuICAgICAgICBpZiAoZHVlIDwgMCkge1xuICAgICAgICAgICAgZHVlID0gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbiA9IDA7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChuKyspO1xuICAgICAgICAgICAgICAgIGlmICgwIDw9IGludGVydmFsRHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSh1bmRlZmluZWQsIGludGVydmFsRHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZHVlKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVyLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRGF0ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgJiYgIWlzTmFOKHZhbHVlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRGF0ZS5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBoYXNMaWZ0KHNvdXJjZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHNvdXJjZSA9PT0gbnVsbCB8fCBzb3VyY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNvdXJjZS5saWZ0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBvcGVyYXRlKGluaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzTGlmdChzb3VyY2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLmxpZnQoZnVuY3Rpb24gKGxpZnRlZFNvdXJjZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbml0KGxpZnRlZFNvdXJjZSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuYWJsZSB0byBsaWZ0IHVua25vd24gT2JzZXJ2YWJsZSB0eXBlJyk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpZnQuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUpIHtcbiAgICByZXR1cm4gbmV3IE9wZXJhdG9yU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb25OZXh0LCBvbkNvbXBsZXRlLCBvbkVycm9yLCBvbkZpbmFsaXplKTtcbn1cbnZhciBPcGVyYXRvclN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhPcGVyYXRvclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUsIHNob3VsZFVuc3Vic2NyaWJlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vbkZpbmFsaXplID0gb25GaW5hbGl6ZTtcbiAgICAgICAgX3RoaXMuc2hvdWxkVW5zdWJzY3JpYmUgPSBzaG91bGRVbnN1YnNjcmliZTtcbiAgICAgICAgX3RoaXMuX25leHQgPSBvbk5leHRcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25OZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogX3N1cGVyLnByb3RvdHlwZS5fbmV4dDtcbiAgICAgICAgX3RoaXMuX2Vycm9yID0gb25FcnJvclxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9lcnJvcjtcbiAgICAgICAgX3RoaXMuX2NvbXBsZXRlID0gb25Db21wbGV0ZVxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPcGVyYXRvclN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghdGhpcy5zaG91bGRVbnN1YnNjcmliZSB8fCB0aGlzLnNob3VsZFVuc3Vic2NyaWJlKCkpIHtcbiAgICAgICAgICAgIHZhciBjbG9zZWRfMSA9IHRoaXMuY2xvc2VkO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgIWNsb3NlZF8xICYmICgoX2EgPSB0aGlzLm9uRmluYWxpemUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE9wZXJhdG9yU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PcGVyYXRvclN1YnNjcmliZXIuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vdXRpbC9pZGVudGl0eSc7XG5leHBvcnQgZnVuY3Rpb24gdGFwKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICB2YXIgdGFwT2JzZXJ2ZXIgPSBpc0Z1bmN0aW9uKG9ic2VydmVyT3JOZXh0KSB8fCBlcnJvciB8fCBjb21wbGV0ZVxuICAgICAgICA/XG4gICAgICAgICAgICB7IG5leHQ6IG9ic2VydmVyT3JOZXh0LCBlcnJvcjogZXJyb3IsIGNvbXBsZXRlOiBjb21wbGV0ZSB9XG4gICAgICAgIDogb2JzZXJ2ZXJPck5leHQ7XG4gICAgcmV0dXJuIHRhcE9ic2VydmVyXG4gICAgICAgID8gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAoX2EgPSB0YXBPYnNlcnZlci5zdWJzY3JpYmUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRhcE9ic2VydmVyKTtcbiAgICAgICAgICAgIHZhciBpc1Vuc3ViID0gdHJ1ZTtcbiAgICAgICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAoX2EgPSB0YXBPYnNlcnZlci5uZXh0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0YXBPYnNlcnZlciwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIGlzVW5zdWIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAoX2EgPSB0YXBPYnNlcnZlci5jb21wbGV0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGFwT2JzZXJ2ZXIpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgaXNVbnN1YiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIChfYSA9IHRhcE9ic2VydmVyLmVycm9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0YXBPYnNlcnZlciwgZXJyKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICBpZiAoaXNVbnN1Yikge1xuICAgICAgICAgICAgICAgICAgICAoX2EgPSB0YXBPYnNlcnZlci51bnN1YnNjcmliZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGFwT2JzZXJ2ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAoX2IgPSB0YXBPYnNlcnZlci5maW5hbGl6ZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwodGFwT2JzZXJ2ZXIpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KVxuICAgICAgICA6XG4gICAgICAgICAgICBpZGVudGl0eTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRhcC5qcy5tYXAiLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBtYXAocHJvamVjdCwgdGhpc0FyZykge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocHJvamVjdC5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCsrKSk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5qcy5tYXAiLCJleHBvcnQgdmFyIGlzQXJyYXlMaWtlID0gKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHggIT09ICdmdW5jdGlvbic7IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheUxpa2UuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gXCIuL2lzRnVuY3Rpb25cIjtcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb21pc2UodmFsdWUpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWUudGhlbik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1Byb21pc2UuanMubWFwIiwiaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihpbnB1dFtTeW1ib2xfb2JzZXJ2YWJsZV0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNJbnRlcm9wT2JzZXJ2YWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0FzeW5jSXRlcmFibGUob2JqKSB7XG4gICAgcmV0dXJuIFN5bWJvbC5hc3luY0l0ZXJhdG9yICYmIGlzRnVuY3Rpb24ob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FzeW5jSXRlcmFibGUuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KSB7XG4gICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJZb3UgcHJvdmlkZWQgXCIgKyAoaW5wdXQgIT09IG51bGwgJiYgdHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyA/ICdhbiBpbnZhbGlkIG9iamVjdCcgOiBcIidcIiArIGlucHV0ICsgXCInXCIpICsgXCIgd2hlcmUgYSBzdHJlYW0gd2FzIGV4cGVjdGVkLiBZb3UgY2FuIHByb3ZpZGUgYW4gT2JzZXJ2YWJsZSwgUHJvbWlzZSwgUmVhZGFibGVTdHJlYW0sIEFycmF5LCBBc3luY0l0ZXJhYmxlLCBvciBJdGVyYWJsZS5cIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvd1Vub2JzZXJ2YWJsZUVycm9yLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBnZXRTeW1ib2xJdGVyYXRvcigpIHtcbiAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCAhU3ltYm9sLml0ZXJhdG9yKSB7XG4gICAgICAgIHJldHVybiAnQEBpdGVyYXRvcic7XG4gICAgfVxuICAgIHJldHVybiBTeW1ib2wuaXRlcmF0b3I7XG59XG5leHBvcnQgdmFyIGl0ZXJhdG9yID0gZ2V0U3ltYm9sSXRlcmF0b3IoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWl0ZXJhdG9yLmpzLm1hcCIsImltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0l0ZXJhYmxlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oaW5wdXQgPT09IG51bGwgfHwgaW5wdXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGlucHV0W1N5bWJvbF9pdGVyYXRvcl0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNJdGVyYWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBfX2FzeW5jR2VuZXJhdG9yLCBfX2F3YWl0LCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcihyZWFkYWJsZVN0cmVhbSkge1xuICAgIHJldHVybiBfX2FzeW5jR2VuZXJhdG9yKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcl8xKCkge1xuICAgICAgICB2YXIgcmVhZGVyLCBfYSwgdmFsdWUsIGRvbmU7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlciA9IHJlYWRhYmxlU3RyZWFtLmdldFJlYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzEsICwgOSwgMTBdKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0cnVlKSByZXR1cm4gWzMsIDhdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9fYXdhaXQocmVhZGVyLnJlYWQoKSldO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgX2EgPSBfYi5zZW50KCksIHZhbHVlID0gX2EudmFsdWUsIGRvbmUgPSBfYS5kb25lO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWRvbmUpIHJldHVybiBbMywgNV07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgX19hd2FpdCh2b2lkIDApXTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiwgX2Iuc2VudCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbNCwgX19hd2FpdCh2YWx1ZSldO1xuICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFs0LCBfYi5zZW50KCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDJdO1xuICAgICAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFszLCAxMF07XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVsZWFzZUxvY2soKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1JlYWRhYmxlU3RyZWFtTGlrZShvYmopIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihvYmogPT09IG51bGwgfHwgb2JqID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmouZ2V0UmVhZGVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzUmVhZGFibGVTdHJlYW1MaWtlLmpzLm1hcCIsImltcG9ydCB7IF9fYXN5bmNWYWx1ZXMsIF9fYXdhaXRlciwgX19nZW5lcmF0b3IsIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0FycmF5TGlrZSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheUxpa2UnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9pc1Byb21pc2UnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNJbnRlcm9wT2JzZXJ2YWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0FzeW5jSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciB9IGZyb20gJy4uL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvcic7XG5pbXBvcnQgeyBpc0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0l0ZXJhYmxlJztcbmltcG9ydCB7IGlzUmVhZGFibGVTdHJlYW1MaWtlLCByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIH0gZnJvbSAnLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IHJlcG9ydFVuaGFuZGxlZEVycm9yIH0gZnJvbSAnLi4vdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvcic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIGlubmVyRnJvbShpbnB1dCkge1xuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5TGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQcm9taXNlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21Qcm9taXNlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBc3luY0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21Bc3luY0l0ZXJhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tSXRlcmFibGUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1JlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvcihpbnB1dCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUludGVyb3BPYnNlcnZhYmxlKG9iaikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgb2JzID0gb2JqW1N5bWJvbF9vYnNlcnZhYmxlXSgpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYnMuc3Vic2NyaWJlKSkge1xuICAgICAgICAgICAgcmV0dXJuIG9icy5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvdmlkZWQgb2JqZWN0IGRvZXMgbm90IGNvcnJlY3RseSBpbXBsZW1lbnQgU3ltYm9sLm9ic2VydmFibGUnKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tQXJyYXlMaWtlKGFycmF5KSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoICYmICFzdWJzY3JpYmVyLmNsb3NlZDsgaSsrKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoYXJyYXlbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUHJvbWlzZShwcm9taXNlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHByb21pc2VcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pXG4gICAgICAgICAgICAudGhlbihudWxsLCByZXBvcnRVbmhhbmRsZWRFcnJvcik7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUl0ZXJhYmxlKGl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgaXRlcmFibGVfMSA9IF9fdmFsdWVzKGl0ZXJhYmxlKSwgaXRlcmFibGVfMV8xID0gaXRlcmFibGVfMS5uZXh0KCk7ICFpdGVyYWJsZV8xXzEuZG9uZTsgaXRlcmFibGVfMV8xID0gaXRlcmFibGVfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpdGVyYWJsZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZXJhYmxlXzFfMSAmJiAhaXRlcmFibGVfMV8xLmRvbmUgJiYgKF9hID0gaXRlcmFibGVfMS5yZXR1cm4pKSBfYS5jYWxsKGl0ZXJhYmxlXzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tQXN5bmNJdGVyYWJsZShhc3luY0l0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHByb2Nlc3MoYXN5bmNJdGVyYWJsZSwgc3Vic2NyaWJlcikuY2F0Y2goZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUmVhZGFibGVTdHJlYW1MaWtlKHJlYWRhYmxlU3RyZWFtKSB7XG4gICAgcmV0dXJuIGZyb21Bc3luY0l0ZXJhYmxlKHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pKTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3MoYXN5bmNJdGVyYWJsZSwgc3Vic2NyaWJlcikge1xuICAgIHZhciBhc3luY0l0ZXJhYmxlXzEsIGFzeW5jSXRlcmFibGVfMV8xO1xuICAgIHZhciBlXzIsIF9hO1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHZhbHVlLCBlXzJfMTtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFswLCA1LCA2LCAxMV0pO1xuICAgICAgICAgICAgICAgICAgICBhc3luY0l0ZXJhYmxlXzEgPSBfX2FzeW5jVmFsdWVzKGFzeW5jSXRlcmFibGUpO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzQsIGFzeW5jSXRlcmFibGVfMS5uZXh0KCldO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYXN5bmNJdGVyYWJsZV8xXzEgPSBfYi5zZW50KCksICFhc3luY0l0ZXJhYmxlXzFfMS5kb25lKSkgcmV0dXJuIFszLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBhc3luY0l0ZXJhYmxlXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMztcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMywgMV07XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzMsIDExXTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGVfMl8xID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBlXzIgPSB7IGVycm9yOiBlXzJfMSB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDExXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbNiwgLCA5LCAxMF0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShhc3luY0l0ZXJhYmxlXzFfMSAmJiAhYXN5bmNJdGVyYWJsZV8xXzEuZG9uZSAmJiAoX2EgPSBhc3luY0l0ZXJhYmxlXzEucmV0dXJuKSkpIHJldHVybiBbMywgOF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgX2EuY2FsbChhc3luY0l0ZXJhYmxlXzEpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSA4O1xuICAgICAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFszLCAxMF07XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFs3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5uZXJGcm9tLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBleGVjdXRlU2NoZWR1bGUocGFyZW50U3Vic2NyaXB0aW9uLCBzY2hlZHVsZXIsIHdvcmssIGRlbGF5LCByZXBlYXQpIHtcbiAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICBpZiAocmVwZWF0ID09PSB2b2lkIDApIHsgcmVwZWF0ID0gZmFsc2U7IH1cbiAgICB2YXIgc2NoZWR1bGVTdWJzY3JpcHRpb24gPSBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICB3b3JrKCk7XG4gICAgICAgIGlmIChyZXBlYXQpIHtcbiAgICAgICAgICAgIHBhcmVudFN1YnNjcmlwdGlvbi5hZGQodGhpcy5zY2hlZHVsZShudWxsLCBkZWxheSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfSwgZGVsYXkpO1xuICAgIHBhcmVudFN1YnNjcmlwdGlvbi5hZGQoc2NoZWR1bGVTdWJzY3JpcHRpb24pO1xuICAgIGlmICghcmVwZWF0KSB7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZVN1YnNjcmlwdGlvbjtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGVjdXRlU2NoZWR1bGUuanMubWFwIiwiaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi9tYXAnO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBtZXJnZUludGVybmFscyB9IGZyb20gJy4vbWVyZ2VJbnRlcm5hbHMnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IsIGNvbmN1cnJlbnQpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7IGNvbmN1cnJlbnQgPSBJbmZpbml0eTsgfVxuICAgIGlmIChpc0Z1bmN0aW9uKHJlc3VsdFNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gbWVyZ2VNYXAoZnVuY3Rpb24gKGEsIGkpIHsgcmV0dXJuIG1hcChmdW5jdGlvbiAoYiwgaWkpIHsgcmV0dXJuIHJlc3VsdFNlbGVjdG9yKGEsIGIsIGksIGlpKTsgfSkoaW5uZXJGcm9tKHByb2plY3QoYSwgaSkpKTsgfSwgY29uY3VycmVudCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiByZXN1bHRTZWxlY3RvciA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uY3VycmVudCA9IHJlc3VsdFNlbGVjdG9yO1xuICAgIH1cbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7IHJldHVybiBtZXJnZUludGVybmFscyhzb3VyY2UsIHN1YnNjcmliZXIsIHByb2plY3QsIGNvbmN1cnJlbnQpOyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlTWFwLmpzLm1hcCIsImltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUludGVybmFscyhzb3VyY2UsIHN1YnNjcmliZXIsIHByb2plY3QsIGNvbmN1cnJlbnQsIG9uQmVmb3JlTmV4dCwgZXhwYW5kLCBpbm5lclN1YlNjaGVkdWxlciwgYWRkaXRpb25hbEZpbmFsaXplcikge1xuICAgIHZhciBidWZmZXIgPSBbXTtcbiAgICB2YXIgYWN0aXZlID0gMDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgdmFyIGNoZWNrQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc0NvbXBsZXRlICYmICFidWZmZXIubGVuZ3RoICYmICFhY3RpdmUpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIG91dGVyTmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gKGFjdGl2ZSA8IGNvbmN1cnJlbnQgPyBkb0lubmVyU3ViKHZhbHVlKSA6IGJ1ZmZlci5wdXNoKHZhbHVlKSk7IH07XG4gICAgdmFyIGRvSW5uZXJTdWIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgZXhwYW5kICYmIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgIGFjdGl2ZSsrO1xuICAgICAgICB2YXIgaW5uZXJDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICBpbm5lckZyb20ocHJvamVjdCh2YWx1ZSwgaW5kZXgrKykpLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKGlubmVyVmFsdWUpIHtcbiAgICAgICAgICAgIG9uQmVmb3JlTmV4dCA9PT0gbnVsbCB8fCBvbkJlZm9yZU5leHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uQmVmb3JlTmV4dChpbm5lclZhbHVlKTtcbiAgICAgICAgICAgIGlmIChleHBhbmQpIHtcbiAgICAgICAgICAgICAgICBvdXRlck5leHQoaW5uZXJWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoaW5uZXJWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlubmVyQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICB9LCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpbm5lckNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlLS07XG4gICAgICAgICAgICAgICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlcmVkVmFsdWUgPSBidWZmZXIuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbm5lclN1YlNjaGVkdWxlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBpbm5lclN1YlNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9Jbm5lclN1YihidWZmZXJlZFZhbHVlKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb0lubmVyU3ViKGJ1ZmZlcmVkVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYnVmZmVyLmxlbmd0aCAmJiBhY3RpdmUgPCBjb25jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfbG9vcF8xKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2hlY2tDb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIG91dGVyTmV4dCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgY2hlY2tDb21wbGV0ZSgpO1xuICAgIH0pKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBhZGRpdGlvbmFsRmluYWxpemVyID09PSBudWxsIHx8IGFkZGl0aW9uYWxGaW5hbGl6ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFkZGl0aW9uYWxGaW5hbGl6ZXIoKTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VJbnRlcm5hbHMuanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VBbGwgfSBmcm9tICcuL21lcmdlQWxsJztcbmV4cG9ydCBmdW5jdGlvbiBjb25jYXRBbGwoKSB7XG4gICAgcmV0dXJuIG1lcmdlQWxsKDEpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0QWxsLmpzLm1hcCIsImltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAnLi9tZXJnZU1hcCc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL3V0aWwvaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQWxsKGNvbmN1cnJlbnQpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7IGNvbmN1cnJlbnQgPSBJbmZpbml0eTsgfVxuICAgIHJldHVybiBtZXJnZU1hcChpZGVudGl0eSwgY29uY3VycmVudCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZUFsbC5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGlzU2NoZWR1bGVyIH0gZnJvbSAnLi9pc1NjaGVkdWxlcic7XG5mdW5jdGlvbiBsYXN0KGFycikge1xuICAgIHJldHVybiBhcnJbYXJyLmxlbmd0aCAtIDFdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvcFJlc3VsdFNlbGVjdG9yKGFyZ3MpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihsYXN0KGFyZ3MpKSA/IGFyZ3MucG9wKCkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gcG9wU2NoZWR1bGVyKGFyZ3MpIHtcbiAgICByZXR1cm4gaXNTY2hlZHVsZXIobGFzdChhcmdzKSkgPyBhcmdzLnBvcCgpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvcE51bWJlcihhcmdzLCBkZWZhdWx0VmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIGxhc3QoYXJncykgPT09ICdudW1iZXInID8gYXJncy5wb3AoKSA6IGRlZmF1bHRWYWx1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyZ3MuanMubWFwIiwiaW1wb3J0IHsgZXhlY3V0ZVNjaGVkdWxlIH0gZnJvbSAnLi4vdXRpbC9leGVjdXRlU2NoZWR1bGUnO1xuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gb2JzZXJ2ZU9uKHNjaGVkdWxlciwgZGVsYXkpIHtcbiAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSwgZGVsYXkpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0sIGRlbGF5KTsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9LCBkZWxheSk7IH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmVPbi5qcy5tYXAiLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmV4cG9ydCBmdW5jdGlvbiBzdWJzY3JpYmVPbihzY2hlZHVsZXIsIGRlbGF5KSB7XG4gICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICBzdWJzY3JpYmVyLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKTsgfSwgZGVsYXkpKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZU9uLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUFzeW5jSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmICghaW5wdXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJdGVyYWJsZSBjYW5ub3QgYmUgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gaW5wdXRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaXRlcmF0b3IubmV4dCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChyZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCAwLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUFzeW5jSXRlcmFibGUuanMubWFwIiwiaW1wb3J0IHsgc2NoZWR1bGVkIH0gZnJvbSAnLi4vc2NoZWR1bGVkL3NjaGVkdWxlZCc7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuL2lubmVyRnJvbSc7XG5leHBvcnQgZnVuY3Rpb24gZnJvbShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlciA/IHNjaGVkdWxlZChpbnB1dCwgc2NoZWR1bGVyKSA6IGlubmVyRnJvbShpbnB1dCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tLmpzLm1hcCIsImltcG9ydCB7IHNjaGVkdWxlT2JzZXJ2YWJsZSB9IGZyb20gJy4vc2NoZWR1bGVPYnNlcnZhYmxlJztcbmltcG9ydCB7IHNjaGVkdWxlUHJvbWlzZSB9IGZyb20gJy4vc2NoZWR1bGVQcm9taXNlJztcbmltcG9ydCB7IHNjaGVkdWxlQXJyYXkgfSBmcm9tICcuL3NjaGVkdWxlQXJyYXknO1xuaW1wb3J0IHsgc2NoZWR1bGVJdGVyYWJsZSB9IGZyb20gJy4vc2NoZWR1bGVJdGVyYWJsZSc7XG5pbXBvcnQgeyBzY2hlZHVsZUFzeW5jSXRlcmFibGUgfSBmcm9tICcuL3NjaGVkdWxlQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyBpc0ludGVyb3BPYnNlcnZhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0ludGVyb3BPYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvaXNQcm9taXNlJztcbmltcG9ydCB7IGlzQXJyYXlMaWtlIH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5TGlrZSc7XG5pbXBvcnQgeyBpc0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0l0ZXJhYmxlJztcbmltcG9ydCB7IGlzQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yIH0gZnJvbSAnLi4vdXRpbC90aHJvd1Vub2JzZXJ2YWJsZUVycm9yJztcbmltcG9ydCB7IGlzUmVhZGFibGVTdHJlYW1MaWtlIH0gZnJvbSAnLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZSc7XG5pbXBvcnQgeyBzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSB9IGZyb20gJy4vc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlZChpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVPYnNlcnZhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5TGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUFycmF5KGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Byb21pc2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVQcm9taXNlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FzeW5jSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVBc3luY0l0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlZC5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBvYnNlcnZlT24gfSBmcm9tICcuLi9vcGVyYXRvcnMvb2JzZXJ2ZU9uJztcbmltcG9ydCB7IHN1YnNjcmliZU9uIH0gZnJvbSAnLi4vb3BlcmF0b3JzL3N1YnNjcmliZU9uJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBpbm5lckZyb20oaW5wdXQpLnBpcGUoc3Vic2NyaWJlT24oc2NoZWR1bGVyKSwgb2JzZXJ2ZU9uKHNjaGVkdWxlcikpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVPYnNlcnZhYmxlLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUFycmF5KGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpID09PSBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoaW5wdXRbaSsrXSk7XG4gICAgICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlQXJyYXkuanMubWFwIiwiaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgb2JzZXJ2ZU9uIH0gZnJvbSAnLi4vb3BlcmF0b3JzL29ic2VydmVPbic7XG5pbXBvcnQgeyBzdWJzY3JpYmVPbiB9IGZyb20gJy4uL29wZXJhdG9ycy9zdWJzY3JpYmVPbic7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVQcm9taXNlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gaW5uZXJGcm9tKGlucHV0KS5waXBlKHN1YnNjcmliZU9uKHNjaGVkdWxlciksIG9ic2VydmVPbihzY2hlZHVsZXIpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlUHJvbWlzZS5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi9zeW1ib2wvaXRlcmF0b3InO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBleGVjdXRlU2NoZWR1bGUgfSBmcm9tICcuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpdGVyYXRvcjtcbiAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXRlcmF0b3IgPSBpbnB1dFtTeW1ib2xfaXRlcmF0b3JdKCk7XG4gICAgICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgZG9uZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAoX2EgPSBpdGVyYXRvci5uZXh0KCksIHZhbHVlID0gX2EudmFsdWUsIGRvbmUgPSBfYS5kb25lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAwLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0Z1bmN0aW9uKGl0ZXJhdG9yID09PSBudWxsIHx8IGl0ZXJhdG9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpdGVyYXRvci5yZXR1cm4pICYmIGl0ZXJhdG9yLnJldHVybigpOyB9O1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVJdGVyYWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBzY2hlZHVsZUFzeW5jSXRlcmFibGUgfSBmcm9tICcuL3NjaGVkdWxlQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIH0gZnJvbSAnLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBzY2hlZHVsZUFzeW5jSXRlcmFibGUocmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcihpbnB1dCksIHNjaGVkdWxlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZS5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5leHBvcnQgdmFyIEVNUFRZID0gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSk7XG5leHBvcnQgZnVuY3Rpb24gZW1wdHkoc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlciA/IGVtcHR5U2NoZWR1bGVkKHNjaGVkdWxlcikgOiBFTVBUWTtcbn1cbmZ1bmN0aW9uIGVtcHR5U2NoZWR1bGVkKHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikgeyByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW1wdHkuanMubWFwIiwiaW1wb3J0IHsgRU1QVFkgfSBmcm9tICcuLi9vYnNlcnZhYmxlL2VtcHR5JztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHRha2UoY291bnQpIHtcbiAgICByZXR1cm4gY291bnQgPD0gMFxuICAgICAgICA/XG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBFTVBUWTsgfVxuICAgICAgICA6IG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgdmFyIHNlZW4gPSAwO1xuICAgICAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCsrc2VlbiA8PSBjb3VudCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY291bnQgPD0gc2Vlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2UuanMubWFwIiwiaW1wb3J0IHsgY29uY2F0IH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9jb25jYXQnO1xuaW1wb3J0IHsgdGFrZSB9IGZyb20gJy4vdGFrZSc7XG5pbXBvcnQgeyBpZ25vcmVFbGVtZW50cyB9IGZyb20gJy4vaWdub3JlRWxlbWVudHMnO1xuaW1wb3J0IHsgbWFwVG8gfSBmcm9tICcuL21hcFRvJztcbmltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAnLi9tZXJnZU1hcCc7XG5leHBvcnQgZnVuY3Rpb24gZGVsYXlXaGVuKGRlbGF5RHVyYXRpb25TZWxlY3Rvciwgc3Vic2NyaXB0aW9uRGVsYXkpIHtcbiAgICBpZiAoc3Vic2NyaXB0aW9uRGVsYXkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25jYXQoc3Vic2NyaXB0aW9uRGVsYXkucGlwZSh0YWtlKDEpLCBpZ25vcmVFbGVtZW50cygpKSwgc291cmNlLnBpcGUoZGVsYXlXaGVuKGRlbGF5RHVyYXRpb25TZWxlY3RvcikpKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHsgcmV0dXJuIGRlbGF5RHVyYXRpb25TZWxlY3Rvcih2YWx1ZSwgaW5kZXgpLnBpcGUodGFrZSgxKSwgbWFwVG8odmFsdWUpKTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWxheVdoZW4uanMubWFwIiwiaW1wb3J0IHsgY29uY2F0QWxsIH0gZnJvbSAnLi4vb3BlcmF0b3JzL2NvbmNhdEFsbCc7XG5pbXBvcnQgeyBwb3BTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2FyZ3MnO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJy4vZnJvbSc7XG5leHBvcnQgZnVuY3Rpb24gY29uY2F0KCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gY29uY2F0QWxsKCkoZnJvbShhcmdzLCBwb3BTY2hlZHVsZXIoYXJncykpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdC5qcy5tYXAiLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuLi91dGlsL25vb3AnO1xuZXhwb3J0IGZ1bmN0aW9uIGlnbm9yZUVsZW1lbnRzKCkge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgbm9vcCkpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWdub3JlRWxlbWVudHMuanMubWFwIiwiaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi9tYXAnO1xuZXhwb3J0IGZ1bmN0aW9uIG1hcFRvKHZhbHVlKSB7XG4gICAgcmV0dXJuIG1hcChmdW5jdGlvbiAoKSB7IHJldHVybiB2YWx1ZTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXBUby5qcy5tYXAiLCJleHBvcnQgY2xhc3MgS29yaXNuaWsge1xyXG4gICAgbmlja05hbWU6IHN0cmluZztcclxuICAgIHBydmFJZ3JhVGltZXI6IG51bWJlcjtcclxuICAgIGRydWdhSWdyYVNrb3I6IG51bWJlcjtcclxuICAgIHRyZWNhSWdyYVNrb3I6IG51bWJlcjtcclxuICAgIGRhdHVtOnN0cmluZztcclxuICAgIGNvbnN0cnVjdG9yKG5pY2tOYW1lOiBzdHJpbmcsIHBydmFJZ3JhVGltZXI6IG51bWJlciwgZHJ1Z2FJZ3JhU2tvcjogbnVtYmVyLCB0cmVjYUlncmFTa29yOiBudW1iZXIsIGRhdHVtOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLm5pY2tOYW1lID0gbmlja05hbWU7XHJcbiAgICAgICAgdGhpcy5wcnZhSWdyYVRpbWVyID0gcHJ2YUlncmFUaW1lcjtcclxuICAgICAgICB0aGlzLmRydWdhSWdyYVNrb3IgPSBkcnVnYUlncmFTa29yO1xyXG4gICAgICAgIHRoaXMudHJlY2FJZ3JhU2tvciA9IHRyZWNhSWdyYVNrb3I7XHJcbiAgICAgICAgdGhpcy5kYXR1bSA9IGRhdHVtO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgZmlsdGVyLCBmcm9tLCBtYXAsIHN3aXRjaE1hcCB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IEtvcmlzbmlrIH0gZnJvbSBcIi4uL21vZHVsZXMvS29yaXNuaWtcIlxyXG5pbXBvcnQgeyBmcm9tRmV0Y2ggfSBmcm9tICdyeGpzL2ZldGNoJztcclxuXHJcbnZhciBrb3Jpc25pazogS29yaXNuaWs7XHJcblxyXG5hc3luYyBmdW5jdGlvbiB1cGlzaVVCYXp1KCkge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cDovL2xvY2FsaG9zdDozMDAwL2tvcmlzbmljaScsIHtcclxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGtvcmlzbmlrKVxyXG4gICAgfSlcclxuICAgIHJldHVybiByZXNwb25zZS5qc29uKClcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHByaWthemlTa29yVGFiZWx1KGxldmlEZW9TdHJhbmU6IGFueSwgZGVzbmlEZW9TdHJhbmU6IGFueSwgbmlja05hbWU6IHN0cmluZywgdnJlbWVQcnZlSWdyZTogbnVtYmVyLCBkcnVnYUlncmFTa29yOiBudW1iZXIsIHNrb3JUcmVjZUlncmU6IG51bWJlcikge1xyXG4gICAga29yaXNuaWsgPSBuZXcgS29yaXNuaWsobmlja05hbWUsIHZyZW1lUHJ2ZUlncmUsIGRydWdhSWdyYVNrb3IsIHNrb3JUcmVjZUlncmUsIG5ldyBEYXRlKCkudG9Mb2NhbGVTdHJpbmcoKSk7XHJcblxyXG4gICAgdXBpc2lVQmF6dSgpO1xyXG4gICAgLypmZXRjaCgnaHR0cDovL2xvY2FsaG9zdDozMDAwL2tvcmlzbmljaScsIHtcclxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGtvcmlzbmlrKVxyXG4gICAgfSkuY2F0Y2goZXJyPT5jb25zb2xlLmxvZyhlcnIpKTsqL1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGtvcmlzbmlrKTtcclxuICAgIGNvbnN0IGtvcmlzbmljaSA9IGZyb21GZXRjaCgnaHR0cDovL2xvY2FsaG9zdDozMDAwL2tvcmlzbmljaScpLnBpcGUoc3dpdGNoTWFwKHJlc3BvbnNlID0+IHtcclxuICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICB9XHJcbiAgICB9KSk7XHJcblxyXG4gICAga29yaXNuaWNpLnBpcGUobWFwKGl0ZW1zID0+IGl0ZW1zLmZpbHRlcigoazogS29yaXNuaWspID0+IGsucHJ2YUlncmFUaW1lciA+PSBrb3Jpc25pay5wcnZhSWdyYVRpbWVyKSkpLnN1YnNjcmliZSh7XHJcbiAgICAgICAgbmV4dDogcmVzdWx0ID0+IHsgbmFwcmF2aVRhYmVsdShyZXN1bHQsIGRlc25pRGVvU3RyYW5lLCAxKSB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBrb3Jpc25pY2kucGlwZShtYXAoaXRlbXMgPT4gaXRlbXMuZmlsdGVyKChrOiBLb3Jpc25paykgPT4gay5kcnVnYUlncmFTa29yIDw9IGtvcmlzbmlrLmRydWdhSWdyYVNrb3IpKSkuc3Vic2NyaWJlKHtcclxuICAgICAgICBuZXh0OiByZXN1bHQgPT4geyBuYXByYXZpVGFiZWx1KHJlc3VsdCwgZGVzbmlEZW9TdHJhbmUsIDIpIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGtvcmlzbmljaS5waXBlKG1hcChpdGVtcyA9PiBpdGVtcy5maWx0ZXIoKGs6IEtvcmlzbmlrKSA9PiBrLnRyZWNhSWdyYVNrb3IgPj0ga29yaXNuaWsudHJlY2FJZ3JhU2tvcikpKS5zdWJzY3JpYmUoe1xyXG4gICAgICAgIG5leHQ6IHJlc3VsdCA9PiB7IG5hcHJhdmlUYWJlbHUocmVzdWx0LCBkZXNuaURlb1N0cmFuZSwgMykgfVxyXG4gICAgfSk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBuYXByYXZpVGFiZWx1KG5pektvcmlzbmlrYTogS29yaXNuaWtbXSwgZGVzbmlEZW9TdHJhbmU6IGFueSwgc29ydDogbnVtYmVyKSB7XHJcbiAgICB2YXIgb3Bpc1RhYmVsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIG9waXNUYWJlbGUuc3R5bGUuZm9udFNpemUgPSBcIjIwcHhcIlxyXG4gICAgb3Bpc1RhYmVsZS5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnMSUnXHJcbiAgICBkZXNuaURlb1N0cmFuZS5hcHBlbmRDaGlsZChvcGlzVGFiZWxlKTtcclxuXHJcbiAgICB2YXIgdGFiZWxhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRhYmxlXCIpO1xyXG4gICAgZGVzbmlEZW9TdHJhbmUuYXBwZW5kQ2hpbGQodGFiZWxhKTtcclxuXHJcbiAgICB2YXIgdGFiZWxhUmVkWmFnbGF2bGplID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xyXG4gICAgdGFiZWxhLmFwcGVuZENoaWxkKHRhYmVsYVJlZFphZ2xhdmxqZSk7XHJcblxyXG4gICAgdmFyIHRhYmVsYVphZ2xhdmxqZU5pY2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGhcIik7XHJcbiAgICB0YWJlbGFaYWdsYXZsamVOaWNrLmlubmVySFRNTCA9ICdOaWNrIE5hbWUnO1xyXG4gICAgdGFiZWxhUmVkWmFnbGF2bGplLmFwcGVuZENoaWxkKHRhYmVsYVphZ2xhdmxqZU5pY2spO1xyXG5cclxuICAgIHZhciB0YWJlbGFaYWdsYXZsamVUaW1lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0aFwiKTtcclxuICAgIHRhYmVsYVphZ2xhdmxqZVRpbWVyLmlubmVySFRNTCA9ICdWcmVtZSBwcnZlIGlncmUnO1xyXG4gICAgdGFiZWxhUmVkWmFnbGF2bGplLmFwcGVuZENoaWxkKHRhYmVsYVphZ2xhdmxqZVRpbWVyKTtcclxuXHJcbiAgICB2YXIgdGFiZWxhWmFnbGF2bGplU2tvcjIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGhcIik7XHJcbiAgICB0YWJlbGFaYWdsYXZsamVTa29yMi5pbm5lckhUTUwgPSAnU2tvciBkcnVnZSBpZ3JlJztcclxuICAgIHRhYmVsYVJlZFphZ2xhdmxqZS5hcHBlbmRDaGlsZCh0YWJlbGFaYWdsYXZsamVTa29yMik7XHJcblxyXG4gICAgdmFyIHRhYmVsYVphZ2xhdmxqZVNrb3IzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRoXCIpO1xyXG4gICAgdGFiZWxhWmFnbGF2bGplU2tvcjMuaW5uZXJIVE1MID0gJ1Nrb3IgdHJlxIdlIGlncmUnO1xyXG4gICAgdGFiZWxhUmVkWmFnbGF2bGplLmFwcGVuZENoaWxkKHRhYmVsYVphZ2xhdmxqZVNrb3IzKTtcclxuXHJcbiAgICB2YXIgdGFiZWxhWmFnbGF2bGplRGF0dW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGhcIik7XHJcbiAgICB0YWJlbGFaYWdsYXZsamVEYXR1bS5pbm5lckhUTUwgPSAnRGF0dW0gaWdyYW5qYSc7XHJcbiAgICB0YWJlbGFSZWRaYWdsYXZsamUuYXBwZW5kQ2hpbGQodGFiZWxhWmFnbGF2bGplRGF0dW0pO1xyXG5cclxuICAgIGlmIChzb3J0ID09IDEpIHtcclxuICAgICAgICBuaXpLb3Jpc25pa2Euc29ydCgoYSwgYikgPT4gYi5wcnZhSWdyYVRpbWVyIC0gYS5wcnZhSWdyYVRpbWVyKTtcclxuICAgICAgICBvcGlzVGFiZWxlLmlubmVySFRNTCA9ICdUYWJlbGEgemEgcHJpa2F6IGlncmHEjWEgc29ydGlyYW5paCBwbyBwcnZvaiBpZ3JpJ1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoc29ydCA9PSAyKSB7XHJcbiAgICAgICAgbml6S29yaXNuaWthLnNvcnQoKGEsIGIpID0+IGIuZHJ1Z2FJZ3JhU2tvciAtIGEuZHJ1Z2FJZ3JhU2tvcik7XHJcbiAgICAgICAgb3Bpc1RhYmVsZS5pbm5lckhUTUwgPSAnVGFiZWxhIHphIHByaWtheiBpZ3JhxI1hIHNvcnRpcmFuaWggcG8gZHJ1Z29qIGlncmknXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIG5pektvcmlzbmlrYS5zb3J0KChhLCBiKSA9PiBiLnRyZWNhSWdyYVNrb3IgLSBhLnRyZWNhSWdyYVNrb3IpO1xyXG4gICAgICAgIG9waXNUYWJlbGUuaW5uZXJIVE1MID0gJ1RhYmVsYSB6YSBwcmlrYXogaWdyYcSNYSBzb3J0aXJhbmloIHBvIHRyZcSHb2ogaWdyaSdcclxuICAgIH1cclxuICAgIG5pektvcmlzbmlrYS5zbGljZSgtNSkuZm9yRWFjaCgoa29yOiBLb3Jpc25paykgPT4ge1xyXG4gICAgICAgIHZhciB0YWJlbGFSZWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidHJcIik7XHJcbiAgICAgICAgdGFiZWxhLmFwcGVuZENoaWxkKHRhYmVsYVJlZCk7XHJcblxyXG4gICAgICAgIHZhciBuaWNrUG9kYXRhayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcclxuICAgICAgICBuaWNrUG9kYXRhay5pbm5lckhUTUwgPSBrb3Iubmlja05hbWU7XHJcbiAgICAgICAgdGFiZWxhUmVkLmFwcGVuZENoaWxkKG5pY2tQb2RhdGFrKTtcclxuXHJcbiAgICAgICAgdmFyIHRpbWVyUG9kYXRhayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcclxuICAgICAgICB0aW1lclBvZGF0YWsuaW5uZXJIVE1MID0gcHJlYmFjaVVWcmVtZShrb3IucHJ2YUlncmFUaW1lcik7XHJcbiAgICAgICAgdGFiZWxhUmVkLmFwcGVuZENoaWxkKHRpbWVyUG9kYXRhayk7XHJcblxyXG4gICAgICAgIHZhciBkcnVnYUlncmFTa29yUG9kYXRhayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcclxuICAgICAgICBkcnVnYUlncmFTa29yUG9kYXRhay5pbm5lckhUTUwgPSBrb3IuZHJ1Z2FJZ3JhU2tvci50b1N0cmluZygpO1xyXG4gICAgICAgIHRhYmVsYVJlZC5hcHBlbmRDaGlsZChkcnVnYUlncmFTa29yUG9kYXRhayk7XHJcblxyXG4gICAgICAgIHZhciB0cmVjYUlncmFTa29yUG9kYXRhayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcclxuICAgICAgICB0cmVjYUlncmFTa29yUG9kYXRhay5pbm5lckhUTUwgPSBrb3IudHJlY2FJZ3JhU2tvci50b1N0cmluZygpO1xyXG4gICAgICAgIHRhYmVsYVJlZC5hcHBlbmRDaGlsZCh0cmVjYUlncmFTa29yUG9kYXRhayk7XHJcblxyXG4gICAgICAgIHZhciBkYXR1bVBvZGF0YWsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XHJcbiAgICAgICAgZGF0dW1Qb2RhdGFrLmlubmVySFRNTCA9IGtvci5kYXR1bTtcclxuICAgICAgICB0YWJlbGFSZWQuYXBwZW5kQ2hpbGQoZGF0dW1Qb2RhdGFrKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwcmViYWNpVVZyZW1lKHZyZW1lOiBudW1iZXIpIHtcclxuICAgIHZhciBtaW51dGk6IGFueSA9IE1hdGguZmxvb3IodnJlbWUgLyA2MDAwKTtcclxuICAgIHZhciBzZWt1bmRlOiBhbnkgPSBNYXRoLmZsb29yKCh2cmVtZSAtIChtaW51dGkgKiA2MDAwKSkgLyAxMDApO1xyXG4gICAgdmFyIG1pbGlzZWt1bmRlOiBhbnkgPSB2cmVtZSAtIChtaW51dGkgKiA2MDAwKSAtIChzZWt1bmRlICogMTAwKTtcclxuXHJcbiAgICBpZiAobWludXRpIDwgMTApIHsgbWludXRpID0gXCIwXCIgKyBtaW51dGk7IH1cclxuICAgIGlmIChzZWt1bmRlIDwgMTApIHsgc2VrdW5kZSA9IFwiMFwiICsgc2VrdW5kZTsgfVxyXG4gICAgaWYgKG1pbGlzZWt1bmRlIDwgMTApIHsgbWlsaXNla3VuZGUgPSBcIjBcIiArIG1pbGlzZWt1bmRlOyB9XHJcbiAgICByZXR1cm4gbWludXRpICsgJzonICsgc2VrdW5kZSArICcuJyArIG1pbGlzZWt1bmRlO1xyXG59IiwiaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gc3dpdGNoTWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGNoZWNrQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0NvbXBsZXRlICYmICFpbm5lclN1YnNjcmliZXIgJiYgc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9O1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlubmVyU3Vic2NyaWJlciA9PT0gbnVsbCB8fCBpbm5lclN1YnNjcmliZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGlubmVyU3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdmFyIGlubmVySW5kZXggPSAwO1xuICAgICAgICAgICAgdmFyIG91dGVySW5kZXggPSBpbmRleCsrO1xuICAgICAgICAgICAgaW5uZXJGcm9tKHByb2plY3QodmFsdWUsIG91dGVySW5kZXgpKS5zdWJzY3JpYmUoKGlubmVyU3Vic2NyaWJlciA9IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoaW5uZXJWYWx1ZSkgeyByZXR1cm4gc3Vic2NyaWJlci5uZXh0KHJlc3VsdFNlbGVjdG9yID8gcmVzdWx0U2VsZWN0b3IodmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgrKykgOiBpbm5lclZhbHVlKTsgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlubmVyU3Vic2NyaWJlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgY2hlY2tDb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICBjaGVja0NvbXBsZXRlKCk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN3aXRjaE1hcC5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiwgX19yZXN0IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuLi8uLi9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi8uLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uLy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmV4cG9ydCBmdW5jdGlvbiBmcm9tRmV0Y2goaW5wdXQsIGluaXRXaXRoU2VsZWN0b3IpIHtcbiAgICBpZiAoaW5pdFdpdGhTZWxlY3RvciA9PT0gdm9pZCAwKSB7IGluaXRXaXRoU2VsZWN0b3IgPSB7fTsgfVxuICAgIHZhciBzZWxlY3RvciA9IGluaXRXaXRoU2VsZWN0b3Iuc2VsZWN0b3IsIGluaXQgPSBfX3Jlc3QoaW5pdFdpdGhTZWxlY3RvciwgW1wic2VsZWN0b3JcIl0pO1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICAgICAgdmFyIHNpZ25hbCA9IGNvbnRyb2xsZXIuc2lnbmFsO1xuICAgICAgICB2YXIgYWJvcnRhYmxlID0gdHJ1ZTtcbiAgICAgICAgdmFyIG91dGVyU2lnbmFsID0gaW5pdC5zaWduYWw7XG4gICAgICAgIGlmIChvdXRlclNpZ25hbCkge1xuICAgICAgICAgICAgaWYgKG91dGVyU2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgb3V0ZXJTaWduYWxIYW5kbGVyXzEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgb3V0ZXJTaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvdXRlclNpZ25hbEhhbmRsZXJfMSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoZnVuY3Rpb24gKCkgeyByZXR1cm4gb3V0ZXJTaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvdXRlclNpZ25hbEhhbmRsZXJfMSk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBwZXJTdWJzY3JpYmVySW5pdCA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBpbml0KSwgeyBzaWduYWw6IHNpZ25hbCB9KTtcbiAgICAgICAgdmFyIGhhbmRsZUVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgYWJvcnRhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgIH07XG4gICAgICAgIGZldGNoKGlucHV0LCBwZXJTdWJzY3JpYmVySW5pdClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgaW5uZXJGcm9tKHNlbGVjdG9yKHJlc3BvbnNlKSkuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgYWJvcnRhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9LCBoYW5kbGVFcnJvcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYWJvcnRhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goaGFuZGxlRXJyb3IpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGFib3J0YWJsZSkge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZldGNoLmpzLm1hcCIsImltcG9ydCB7IGludGVydmFsLCB0YXAsIGRlbGF5LCB0aW1lciB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IHByaWthemlTa29yVGFiZWx1IH0gZnJvbSBcIi4vcmV6dWx0YXRpXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcG9rcmVuaVRyZWN1SWdydShsZXZpRGVvU3RyYW5lOiBhbnksIGRlc25pRGVvU3RyYW5lOiBhbnksIG5pY2tOYW1lOiBzdHJpbmcsIHZyZW1lUHJ2ZUlncmU6IG51bWJlciwgZHJ1Z2FJZ3JhU2tvcjogbnVtYmVyKSB7XHJcbiAgICB2YXIgeml2b3RpOiBudW1iZXIgPSA0O1xyXG4gICAgdmFyIGJyb2o6IHN0cmluZyA9ICdhJztcclxuICAgIHZhciB0cmVudXRub0Jyb2pldmE6IG51bWJlciA9IDA7XHJcbiAgICB2YXIgc2tvclRyZWNlSWdyZTogbnVtYmVyID0gMDtcclxuICAgIHZhciB2cmVtZTogbnVtYmVyID0gODA7Ly8gTkEgODAwMCBTVEFWSSBQT1NMRSBURVNUSVJBTkpBXHJcbiAgICB2YXIgcHJvbWVuamVuOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgdmFyIGRpdlRyZWNhSWdyYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBkaXZUcmVjYUlncmEuY2xhc3NOYW1lID0gXCJkaXZMZXZlU3RyYW5lSWdyYWNhXCI7XHJcbiAgICBsZXZpRGVvU3RyYW5lLmFwcGVuZENoaWxkKGRpdlRyZWNhSWdyYSk7XHJcblxyXG4gICAgdmFyIHByaWthekJyb2phID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgLy9wcmlrYXpCcm9qYS5pbm5lckhUTUwgPSAnSWdyYSB1c2tvcm8gcG/EjWluamUnO1xyXG4gICAgcHJpa2F6QnJvamEuY2xhc3NOYW1lID0gJ2xhYmVsYVphUmVjaSc7XHJcbiAgICBkZXNuaURlb1N0cmFuZS5hcHBlbmRDaGlsZChwcmlrYXpCcm9qYSk7XHJcblxyXG4gICAgbGV0IHByb2dyZXNzQmFyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIHByb2dyZXNzQmFyRGl2LmlkID0gJ3Byb2dyZXNzQmFyRGl2JztcclxuICAgIGRlc25pRGVvU3RyYW5lLmFwcGVuZENoaWxkKHByb2dyZXNzQmFyRGl2KTtcclxuXHJcbiAgICB2YXIgdW5vc0Jyb2pldmEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICB1bm9zQnJvamV2YS5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICB1bm9zQnJvamV2YS50eXBlID0gJ251bWJlcic7XHJcbiAgICB1bm9zQnJvamV2YS5jbGFzc05hbWUgPSAnbmlja0lucHV0JztcclxuICAgIHVub3NCcm9qZXZhLnN0eWxlLndpZHRoID0gJzI1cmVtJztcclxuICAgIGRlc25pRGVvU3RyYW5lLmFwcGVuZENoaWxkKHVub3NCcm9qZXZhKTtcclxuXHJcbiAgICB2YXIgYnJvalppdm90YSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIC8vYnJvalppdm90YS5pbm5lckhUTUwgPSAnUHJlb3N0YWxvIHppdm90YSAnO1xyXG4gICAgLy9icm9qWml2b3RhLmNsYXNzTmFtZSA9ICdkaXZMZXZlU3RyYW5lSWdyYWNhJztcclxuICAgIGJyb2paaXZvdGEuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICBicm9qWml2b3RhLnN0eWxlLmZvbnRTaXplID0gJzMycHgnO1xyXG4gICAgLy9icm9qWml2b3RhLmNsYXNzTmFtZSA9ICdza29yRHJ1Z2VJZ3JlJztcclxuICAgIGxldmlEZW9TdHJhbmUuYXBwZW5kQ2hpbGQoYnJvalppdm90YSk7XHJcbiAgICAvLy8vLyAgIHNyY2FcclxuICAgIHZhciBzcmNlMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgICBzcmNlMS5zcmMgPSBcIi4uL3NyYy9hc3NldHMvaGVhcnQucG5nXCJcclxuICAgIHNyY2UxLmlkID0gJ3NyY2UxJztcclxuICAgIHNyY2UxLndpZHRoID0gNDA7XHJcbiAgICBkaXZUcmVjYUlncmEuYXBwZW5kQ2hpbGQoc3JjZTEpO1xyXG5cclxuICAgIHZhciBzcmNlMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgICBzcmNlMi5zcmMgPSBcIi4uL3NyYy9hc3NldHMvaGVhcnQucG5nXCJcclxuICAgIHNyY2UyLmlkID0gJ3NyY2UyJztcclxuICAgIHNyY2UyLndpZHRoID0gNDA7XHJcbiAgICBkaXZUcmVjYUlncmEuYXBwZW5kQ2hpbGQoc3JjZTIpO1xyXG5cclxuICAgIHZhciBzcmNlMyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgICBzcmNlMy5zcmMgPSBcIi4uL3NyYy9hc3NldHMvaGVhcnQucG5nXCJcclxuICAgIHNyY2UzLmlkID0gJ3NyY2UzJztcclxuICAgIHNyY2UzLndpZHRoID0gNDA7XHJcbiAgICBkaXZUcmVjYUlncmEuYXBwZW5kQ2hpbGQoc3JjZTMpO1xyXG4gICAgLy8vLy8gICBzcmNhXHJcblxyXG4gICAgdmFyIHByaWthelNrb3JhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgZGl2VHJlY2FJZ3JhLmFwcGVuZENoaWxkKHByaWthelNrb3JhKTtcclxuXHJcbiAgICAvKiAgbGV0IHBydmlUaW1lcj1pbnRlcnZhbCgxNTAwKTtcclxuICAgIHBydmlUaW1lci5uZXh0XHJcbiAgICBsZXQgZHJ1Z2lUaW1lcj1pbnRlcnZhbCgzMDAwKTsqL1xyXG5cclxuICAgIGxldCB0aW1lclBvY2V0a2EgPSB0aW1lcigwLCAxMDAwKS5zdWJzY3JpYmUobiA9PiB7IHByaWthekJyb2phLmlubmVySFRNTCA9ICdUcmXEh2EgaWdyYSBwb8SNaW5qZSB6YTogJyArICg4IC0gbikudG9TdHJpbmcoKSArICcgc2VrdW5kaSc7IH0pO1xyXG5cclxuICAgIGxldCB0aW1lclRyZWNlSWdyZSA9IGludGVydmFsKHZyZW1lKS5waXBlKHRhcCgoKSA9PiB7XHJcbiAgICAgICAgdGltZXJQb2NldGthLnVuc3Vic2NyaWJlKClcclxuICAgICAgICBpZiAodW5vc0Jyb2pldmEudmFsdWUgIT0gYnJvaiAmJiAhcHJvbWVuamVuKSB7XHJcbiAgICAgICAgICAgIGlmICh6aXZvdGkgIT0gNCkge1xyXG4gICAgICAgICAgICAgICAgb2JyaXNpU3JjZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Ugeml2b3RpLS07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCFwcm9tZW5qZW4pIGJyb2paaXZvdGEuaW5uZXJIVE1MID0gJ0Jyb2ogcG9nb2Rha2E6ICcgKyAoKytza29yVHJlY2VJZ3JlKS50b1N0cmluZygpO1xyXG5cclxuICAgICAgICBwcm9tZW5qZW4gPSBmYWxzZTtcclxuICAgICAgICBpZiAodHJlbnV0bm9Ccm9qZXZhICUgNSA9PSAwKSB2cmVtZSArPSB2cmVtZSAvIDJcclxuICAgICAgICBiYXIuYW5pbWF0ZSgxLjApO1xyXG4gICAgICAgIHVub3NCcm9qZXZhLnZhbHVlID0gJyc7XHJcbiAgICAgICAgdHJlbnV0bm9Ccm9qZXZhKys7XHJcbiAgICAgICAgbmFwdW5pTml6KCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYnJvaik7XHJcbiAgICAgICAgcHJpa2F6QnJvamEuaW5uZXJIVE1MID0gYnJvajtcclxuICAgICAgICB1bm9zQnJvamV2YS5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICB9KSxcclxuICAgICAgICBkZWxheSh2cmVtZSAvIDIpLFxyXG4gICAgICAgIHRhcCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGJhci5zZXQoMC4wKTtcclxuICAgICAgICAgICAgcHJpa2F6QnJvamEuaW5uZXJIVE1MID0gJ1VuZXNpdGUgYnJvaic7XHJcbiAgICAgICAgICAgIHVub3NCcm9qZXZhLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHVub3NCcm9qZXZhLmZvY3VzKCk7XHJcbiAgICAgICAgfSkpXHJcbiAgICAgICAgLnN1YnNjcmliZSgpO1xyXG5cclxuICAgIHVub3NCcm9qZXZhLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgaWYgKGUua2V5ID09PSBcIkVudGVyXCIpIHtcclxuICAgICAgICAgICAgaWYgKHVub3NCcm9qZXZhLnZhbHVlICE9IGJyb2opIHtcclxuICAgICAgICAgICAgICAgIC8vdW5vc0Jyb2pldmEuY2xhc3NMaXN0LnRvZ2dsZShcInNoYWtlQW5pbWFjaWphXCIpO1xyXG4gICAgICAgICAgICAgICAgb2JyaXNpU3JjZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnJvalppdm90YS5pbm5lckhUTUwgPSAnQnJvaiBwb2dvZGFrYTogJyArICgrK3Nrb3JUcmVjZUlncmUpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcHJvbWVuamVuID0gdHJ1ZTtcclxuICAgICAgICAgICAgdW5vc0Jyb2pldmEuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBwcmlrYXpCcm9qYS5pbm5lckhUTUwgPSAnU2HEjWVrYWp0ZSBzbGVkZcSHaSBicm9qJztcclxuICAgICAgICB9XHJcblxyXG4gICAgfSlcclxuXHJcbiAgICBmdW5jdGlvbiBvYnJpc2lTcmNlKCkge1xyXG4gICAgICAgIHZhciBzcmNlWmFCcmlzYW5qZTogYW55ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NyY2UnICsgeml2b3RpKTtcclxuICAgICAgICB6aXZvdGktLTtcclxuICAgICAgICBzcmNlWmFCcmlzYW5qZS5zcmMgPSAnLi4vc3JjL2Fzc2V0cy9oZWFydEJyb2tlbi5wbmcnO1xyXG4gICAgICAgIGlmICh6aXZvdGkgPT0gMCkge1xyXG4gICAgICAgICAgICB0aW1lclRyZWNlSWdyZS51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICBwcmlrYXpCcm9qYS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXHJcbiAgICAgICAgICAgIHByb2dyZXNzQmFyRGl2LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcclxuICAgICAgICAgICAgdW5vc0Jyb2pldmEuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xyXG4gICAgICAgICAgICBwcmlrYXppU2tvclRhYmVsdShsZXZpRGVvU3RyYW5lLCBkZXNuaURlb1N0cmFuZSwgbmlja05hbWUsIHZyZW1lUHJ2ZUlncmUsIGRydWdhSWdyYVNrb3IsIHNrb3JUcmVjZUlncmUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIG5hcHVuaU5peigpIHtcclxuICAgICAgICBicm9qID0gJyc7XHJcbiAgICAgICAgZm9yICh2YXIgaTogbnVtYmVyID0gMDsgaSA8IHRyZW51dG5vQnJvamV2YTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGJyb2ogKz0gTWF0aC5yYW5kb20oKSAqICgxMCkgfCAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHZhciBQcm9ncmVzc0JhciA9IHJlcXVpcmUoJ3Byb2dyZXNzYmFyLmpzJylcclxuICAgIHZhciBsaW5lID0gbmV3IFByb2dyZXNzQmFyLkxpbmUoJyNwcm9ncmVzc0JhckRpdicpO1xyXG4gICAgdmFyIGJhciA9IG5ldyBQcm9ncmVzc0Jhci5MaW5lKHByb2dyZXNzQmFyRGl2LCB7XHJcbiAgICAgICAgc3Ryb2tlV2lkdGg6IDQsXHJcbiAgICAgICAgZWFzaW5nOiAnZWFzZUluT3V0JyxcclxuICAgICAgICBkdXJhdGlvbjogdnJlbWUgLyAyLFxyXG4gICAgICAgIGNvbG9yOiAnIzdhZGJmYScsXHJcbiAgICAgICAgdHJhaWxDb2xvcjogJyNlZWUnLFxyXG4gICAgICAgIHRyYWlsV2lkdGg6IDEsXHJcbiAgICAgICAgc3ZnU3R5bGU6IHsgd2lkdGg6ICcxMDAlJywgaGVpZ2h0OiAnMTAwJScgfSxcclxuICAgICAgICBmcm9tOiB7IGNvbG9yOiAnIzZkZTZlNicgfSxcclxuICAgICAgICB0bzogeyBjb2xvcjogJyMyMDk2OTYnIH0sXHJcbiAgICAgICAgc3RlcDogKHN0YXRlOiBhbnksIGJhcjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGJhci5wYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgc3RhdGUuY29sb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59IiwiaW1wb3J0IHsgYXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXN5bmMnO1xuaW1wb3J0IHsgdGltZXIgfSBmcm9tICcuL3RpbWVyJztcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcnZhbChwZXJpb2QsIHNjaGVkdWxlcikge1xuICAgIGlmIChwZXJpb2QgPT09IHZvaWQgMCkgeyBwZXJpb2QgPSAwOyB9XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzeW5jU2NoZWR1bGVyOyB9XG4gICAgaWYgKHBlcmlvZCA8IDApIHtcbiAgICAgICAgcGVyaW9kID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRpbWVyKHBlcmlvZCwgcGVyaW9kLCBzY2hlZHVsZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJ2YWwuanMubWFwIiwiaW1wb3J0IHsgYXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXN5bmMnO1xuaW1wb3J0IHsgZGVsYXlXaGVuIH0gZnJvbSAnLi9kZWxheVdoZW4nO1xuaW1wb3J0IHsgdGltZXIgfSBmcm9tICcuLi9vYnNlcnZhYmxlL3RpbWVyJztcbmV4cG9ydCBmdW5jdGlvbiBkZWxheShkdWUsIHNjaGVkdWxlcikge1xuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY1NjaGVkdWxlcjsgfVxuICAgIHZhciBkdXJhdGlvbiA9IHRpbWVyKGR1ZSwgc2NoZWR1bGVyKTtcbiAgICByZXR1cm4gZGVsYXlXaGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGR1cmF0aW9uOyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGF5LmpzLm1hcCIsImltcG9ydCB7IHBva3JlbmlQcnZ1SWdydSB9IGZyb20gJy4uL3NyYy9tb2R1bGVzL3BydmFJZ3JhJztcclxuaW1wb3J0IHsgcG9rcmVuaVRyZWN1SWdydSB9IGZyb20gJy4uL3NyYy9tb2R1bGVzL3RyZWNhSWdyYSc7XHJcbmltcG9ydCB7IHBva3JlbmlEcnVndUlncnUgfSBmcm9tICcuLi9zcmMvbW9kdWxlcy9kcnVnYUlncmEnO1xyXG5cclxudmFyIGNlbGFTdHJhbmEgPSBkb2N1bWVudC5ib2R5O1xyXG5jZWxhU3RyYW5hLnN0eWxlLmhlaWdodCA9ICc5OHZoJztcclxuY2VsYVN0cmFuYS5pZCA9IFwiY2VsYVN0cmFuYVwiO1xyXG5cclxudmFyIGxldmlEZW9TdHJhbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG5sZXZpRGVvU3RyYW5lLmlkID0gJ2xldmlEZW9TdHJhbmUnO1xyXG5sZXZpRGVvU3RyYW5lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbmNlbGFTdHJhbmEuYXBwZW5kQ2hpbGQobGV2aURlb1N0cmFuZSk7XHJcblxyXG52YXIgZGVzbmlEZW9TdHJhbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG5kZXNuaURlb1N0cmFuZS5pZCA9ICdkZXNuaURlb1N0cmFuZSc7XHJcbmRlc25pRGVvU3RyYW5lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbmNlbGFTdHJhbmEuYXBwZW5kQ2hpbGQoZGVzbmlEZW9TdHJhbmUpO1xyXG5cclxubGV0IG5pY2tOYW1lOiBzdHJpbmc7XHJcbnBvY2V0YWsoKTtcclxuXHJcbmZ1bmN0aW9uIHBvY2V0YWsoKSB7XHJcbiAgICB2YXIgcG9jZXRuaVByaWtheiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBwb2NldG5pUHJpa2F6LmlkID0gJ3BvY2V0bmlQcmlrYXonO1xyXG4gICAgY2VsYVN0cmFuYS5hcHBlbmRDaGlsZChwb2NldG5pUHJpa2F6KTtcclxuXHJcbiAgICB2YXIgbmlja0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgcG9jZXRuaVByaWthei5hcHBlbmRDaGlsZChuaWNrRGl2KTtcclxuXHJcbiAgICB2YXIgaWdyaWNlT3BpcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgaWdyaWNlT3Bpcy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgcG9jZXRuaVByaWthei5hcHBlbmRDaGlsZChpZ3JpY2VPcGlzKTtcclxuXHJcbiAgICB2YXIgcHJpa2F6aURpdk9waXNhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuICAgIHByaWthemlEaXZPcGlzYS5pbm5lckhUTUwgPSAnUHJpa2HFvmkgdXB1dHN0dmEgemEgaWdyZSc7XHJcbiAgICBwcmlrYXppRGl2T3Bpc2EuY2xhc3NOYW1lID0gJ2xhYmVsZU5hUG9jZXRrdSc7XHJcbiAgICBwcmlrYXppRGl2T3Bpc2Eub25jbGljayA9IChlKSA9PiB7XHJcbiAgICAgICAgcHJpa2F6aURpdk9waXNhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgaWdyaWNlT3Bpcy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICBwb2NldG5pUHJpa2F6LnN0eWxlLndpZHRoID0gJzUwJSc7XHJcbiAgICB9XHJcbiAgICBwb2NldG5pUHJpa2F6LmFwcGVuZENoaWxkKHByaWthemlEaXZPcGlzYSk7XHJcblxyXG4gICAgdmFyIGxhYmVsYU5pY2tOYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgbGFiZWxhTmlja05hbWUuY2xhc3NOYW1lID0gJ2xhYmVsZU5hUG9jZXRrdSc7XHJcbiAgICBsYWJlbGFOaWNrTmFtZS5pbm5lckhUTUwgPSAnTmljayBuYW1lOiAnO1xyXG4gICAgbGFiZWxhTmlja05hbWUuc3R5bGUubWFyZ2luUmlnaHQgPSAnMTVweCdcclxuICAgIG5pY2tEaXYuYXBwZW5kQ2hpbGQobGFiZWxhTmlja05hbWUpO1xyXG5cclxuICAgIHZhciBuaWNrTmFtZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgbmlja05hbWVJbnB1dC5wbGFjZWhvbGRlciA9ICd1bmVzaXRlIG5pY2snO1xyXG4gICAgbmlja05hbWVJbnB1dC5zdHlsZS5sZXR0ZXJTcGFjaW5nID0gJzAnO1xyXG4gICAgbmlja05hbWVJbnB1dC5jbGFzc05hbWUgPSAnbmlja0lucHV0JztcclxuICAgIG5pY2tEaXYuYXBwZW5kQ2hpbGQobmlja05hbWVJbnB1dCk7XHJcbiAgICAvL25pY2tOYW1lSW5wdXQuZm9jdXMoKTtcclxuXHJcbiAgICB2YXIgb3Bpc1BydmVJZ3JlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgb3Bpc1BydmVJZ3JlLmlubmVySFRNTCA9ICcxLiBQcmlsaWtvbSBzdGFydG92YW5qYSBwcnZlIGlncmUgdGltZXIgb2RtYWggcG/EjWluamUgZGEgb2Ricm9qYXZhLCB0YWtvIGRhIGJ1ZGl0ZSBzcHJlbW5pLiBQb3RyZWJubyBqZSBwcm9uYcSHaSBrbGp1xI0gbmEgZWtyYW51LiBEYSBiaXN0ZSB0byB1c3BlbGkgcG90cmVibm8gamUga29yaXN0aXRpIGtydWdvdmUgc2EgbGV2ZSBzdHJhbmUga29qaSBwb21lcmFuamVtIG1pxaFhIHBva2F6dWp1IHZhxaF1IHVkYWxqZW5vc3Qgb2Qga2xqdcSNYS4gS2FkYSBtdSBzZSBkb3ZvbGpubyBwcmlibGnFvml0ZSBrbGp1xI0gxIdlIHBvc3RhdGkgdmlkbGppdiwgYSBwb3RvbSBqZSBwb3RyZWJubyBrbGlrbnV0aSBuYSBuamVnYSwgxI1pbWUgxIdlIHNlIHRpbWVyIHBhdXppcmF0aSBpIHBva3JlbnV0aSBkcnVnYSBpZ3JhLic7XHJcbiAgICBvcGlzUHJ2ZUlncmUuY2xhc3NOYW1lID0gJ2xhYmVsZU5hUG9jZXRrdSc7XHJcbiAgICBpZ3JpY2VPcGlzLmFwcGVuZENoaWxkKG9waXNQcnZlSWdyZSk7XHJcblxyXG4gICAgdmFyIG9waXNEcnVnZUlncmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBvcGlzRHJ1Z2VJZ3JlLmNsYXNzTmFtZSA9ICdsYWJlbGVOYVBvY2V0a3UnO1xyXG4gICAgb3Bpc0RydWdlSWdyZS5pbm5lckhUTUwgPSAnMi4gVSBkcnVnb2ogaWdyaSBqZSBwb3RyZWJubyBwYW10aXRpIHJlxI1pIGtvamUgc2UgcHJpa2F6dWp1IG5hIGVrcmFudSwgemEgc3Zha3UgcmXEjSBpbWF0ZSAyLjUgc2VrdW5kaSBkYSBvZGdvdm9yaXRlIGRhIGxpIGplIG9uYSB2ZcSHIHZpxJFlbmEgaWxpIG5vdmEuIEthZGEgdXR2cmRpdGUgcG90cmVibm8gamUga2xpa251dGkgbmEgZHVnbWUgaSB0aW1lIMSHZSBzZSByZXp1bHRhdCB6YSB0dSBpZ3J1IHBvdmXEh2F0aSBpbGkgb3N0YXRpIG5lcHJvbWVuamVuIHVrb2xpa28gc3RlIHBvZ3JlxaFpbGkuJztcclxuICAgIGlncmljZU9waXMuYXBwZW5kQ2hpbGQob3Bpc0RydWdlSWdyZSk7XHJcblxyXG4gICAgdmFyIG9waXNUcmVjZUlncmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBvcGlzVHJlY2VJZ3JlLmNsYXNzTmFtZSA9ICdsYWJlbGVOYVBvY2V0a3UnO1xyXG4gICAgb3Bpc1RyZWNlSWdyZS5pbm5lckhUTUwgPSAnMy4gVSB0cmXEh29qIGlncmkgaW1hdGUgMyDFvml2b3RhLCBpIGlncmEgdHJhamUgZG9rbGUgZ29kIGltYXRlIGJhcmVtIGplZGFuIHByZW9zdGFvIMW+aXZvdC4gT25pIHN1IHByZWRzdGF2bGplbmkgc2xpY2ljb20gc3JjYSBzYSBsZXZlIHN0cmFuZSwgaSBzdmFraW0gcG9ncmXFoW5pbSB1bm9zb20gZ3ViaXRlIHBvIGplZGFuIMW+aXZvdC4gRG8gNSBicm9qZXZhIGltYXRlIHBvIDQgc2VrdW5kaSBkYSB6YXBhbXRpdGUgaSBwbyA0IHNla3VuZGkgZGEgb2Rnb3Zvcml0ZSwgYSBwb3NsZSB0b2dhIHNlIHZyZW1lIHByb2R1xb5hdmEgemEgcG8gamVkbnUgc2VrdW5kdSBuYSBzdmFraWggNSBkb2RhdG5paCBicm9qZXZhLic7XHJcbiAgICBpZ3JpY2VPcGlzLmFwcGVuZENoaWxkKG9waXNUcmVjZUlncmUpO1xyXG5cclxuICAgIHZhciBvcGlzSWdhcmEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBvcGlzSWdhcmEuaW5uZXJIVE1MID0gJ0tsaWtvbSBuYSBkdWdtZSBcInBva3JlbmkgaWdydVwiIHBvxI1lxIdlIHBydmEgaWdyYSwgdGFrbyBkYSBidWRpdGUgc3ByZW1uaSEnO1xyXG4gICAgb3Bpc0lnYXJhLmNsYXNzTmFtZSA9ICdsYWJlbGVOYVBvY2V0a3UnO1xyXG4gICAgaWdyaWNlT3Bpcy5hcHBlbmRDaGlsZChvcGlzSWdhcmEpO1xyXG5cclxuICAgIHZhciBidXR0b25Qb2tyZW5pSWdyZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICBidXR0b25Qb2tyZW5pSWdyZS5jbGFzc05hbWUgPSAnZHVnbWVaYVJlYyc7XHJcbiAgICBidXR0b25Qb2tyZW5pSWdyZS5pbm5lckhUTUwgPSAnUG9rcmVuaSEnO1xyXG4gICAgcG9jZXRuaVByaWthei5hcHBlbmRDaGlsZChidXR0b25Qb2tyZW5pSWdyZSk7XHJcblxyXG5cclxuICAgIGJ1dHRvblBva3JlbmlJZ3JlLm9uY2xpY2sgPSAoZSkgPT4ge1xyXG4gICAgICAgIGlmIChuaWNrTmFtZUlucHV0LnZhbHVlICE9ICcnKSB7XHJcbiAgICAgICAgICAgIGxldmlEZW9TdHJhbmUuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuICAgICAgICAgICAgZGVzbmlEZW9TdHJhbmUuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuICAgICAgICAgICAgcG9jZXRuaVByaWthei5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICBuaWNrTmFtZSA9IG5pY2tOYW1lSW5wdXQudmFsdWUudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgLy9wb2tyZW5pUHJ2dUlncnUobGV2aURlb1N0cmFuZSwgZGVzbmlEZW9TdHJhbmUsIG5pY2tOYW1lKTsgICAgICAgICAgICBcclxuICAgICAgICAgICAgLy9wb2tyZW5pRHJ1Z3VJZ3J1KGxldmlEZW9TdHJhbmUsZGVzbmlEZW9TdHJhbmUsJ2JsYScsNSk7XHJcbiAgICAgICAgICAgIHBva3JlbmlUcmVjdUlncnUobGV2aURlb1N0cmFuZSwgZGVzbmlEZW9TdHJhbmUsICdUZW9kb3InLCAxMDAyLCAxMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgbmlja05hbWVJbnB1dC5jbGFzc0xpc3QudG9nZ2xlKFwic2hha2VBbmltYWNpamFcIik7XHJcbiAgICB9XHJcblxyXG4gICAgbmlja05hbWVJbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmIChlLmtleSA9PT0gXCJFbnRlclwiKVxyXG4gICAgICAgICAgICBidXR0b25Qb2tyZW5pSWdyZS5jbGljaygpO1xyXG4gICAgfSlcclxufSJdLCJuYW1lcyI6WyJTaGFwZSIsInV0aWxzIiwiQ2lyY2xlIiwiY29udGFpbmVyIiwib3B0aW9ucyIsInRoaXMiLCJfcGF0aFRlbXBsYXRlIiwiY29udGFpbmVyQXNwZWN0UmF0aW8iLCJhcHBseSIsImFyZ3VtZW50cyIsInByb3RvdHlwZSIsImNvbnN0cnVjdG9yIiwiX3BhdGhTdHJpbmciLCJvcHRzIiwid2lkdGhPZldpZGVyIiwic3Ryb2tlV2lkdGgiLCJ0cmFpbFdpZHRoIiwiciIsInJlbmRlciIsInJhZGl1cyIsIl90cmFpbFN0cmluZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJMaW5lIiwiX2luaXRpYWxpemVTdmciLCJzdmciLCJzZXRBdHRyaWJ1dGUiLCJjZW50ZXIiLCJTZW1pQ2lyY2xlIiwiU3F1YXJlIiwiUGF0aCIsInNoaWZ0eSIsIlR3ZWVuYWJsZSIsIkVBU0lOR19BTElBU0VTIiwiZWFzZUluIiwiZWFzZU91dCIsImVhc2VJbk91dCIsInBhdGgiLCJFcnJvciIsImVsZW1lbnQiLCJleHRlbmQiLCJkZWxheSIsImR1cmF0aW9uIiwiZWFzaW5nIiwiZnJvbSIsInRvIiwic3RlcCIsImlzU3RyaW5nIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiX29wdHMiLCJfdHdlZW5hYmxlIiwibGVuZ3RoIiwiZ2V0VG90YWxMZW5ndGgiLCJzdHlsZSIsInN0cm9rZURhc2hhcnJheSIsInNldCIsInZhbHVlIiwib2Zmc2V0IiwiX2dldENvbXB1dGVkRGFzaE9mZnNldCIsInBhcnNlRmxvYXQiLCJ0b0ZpeGVkIiwicHJvZ3Jlc3MiLCJzdG9wIiwic3Ryb2tlRGFzaG9mZnNldCIsIl9wcm9ncmVzc1RvT2Zmc2V0IiwiaXNGdW5jdGlvbiIsIl9lYXNpbmciLCJfY2FsY3VsYXRlVG8iLCJzaGFwZSIsImF0dGFjaG1lbnQiLCJfc3RvcFR3ZWVuIiwiYW5pbWF0ZSIsImNiIiwicGFzc2VkT3B0cyIsImRlZmF1bHRPcHRzIiwic2hpZnR5RWFzaW5nIiwidmFsdWVzIiwiX3Jlc29sdmVGcm9tQW5kVG8iLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJuZXdPZmZzZXQiLCJzZWxmIiwidHdlZW4iLCJzdGF0ZSIsInJlZmVyZW5jZSIsInRoZW4iLCJjb21wdXRlZFN0eWxlIiwid2luZG93IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJfY2FsY3VsYXRlRnJvbSIsImludGVycG9sYXRlIiwiaGFzT3duUHJvcGVydHkiLCJfaW5pdGlhbGl6ZVRleHRDb250YWluZXIiLCJ0ZXh0Q29udGFpbmVyIiwidGV4dCIsInRvcCIsImJvdHRvbSIsImFsaWduVG9Cb3R0b20iLCJzZXRTdHlsZSIsIkRFU1RST1lFRF9FUlJPUiIsImNvbG9yIiwidHJhaWxDb2xvciIsImZpbGwiLCJwb3NpdGlvbiIsImxlZnQiLCJwYWRkaW5nIiwibWFyZ2luIiwidHJhbnNmb3JtIiwicHJlZml4IiwiYXV0b1N0eWxlQ29udGFpbmVyIiwiY2xhc3NOYW1lIiwic3ZnU3R5bGUiLCJkaXNwbGF5Iiwid2lkdGgiLCJ3YXJuaW5ncyIsImlzT2JqZWN0IiwidW5kZWZpbmVkIiwic3ZnVmlldyIsIl9jcmVhdGVTdmdWaWV3IiwiX2NvbnRhaW5lciIsImFwcGVuZENoaWxkIiwiX3dhcm5Db250YWluZXJBc3BlY3RSYXRpbyIsInNldFN0eWxlcyIsInRyYWlsIiwibmV3T3B0cyIsIl9wcm9ncmVzc1BhdGgiLCJzZXRUZXh0IiwicGF1c2UiLCJyZXN1bWUiLCJkZXN0cm95IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwibmV3VGV4dCIsIl9jcmVhdGVUZXh0Q29udGFpbmVyIiwicmVtb3ZlQ2hpbGRyZW4iLCJpbm5lckhUTUwiLCJjcmVhdGVFbGVtZW50TlMiLCJ0cmFpbFBhdGgiLCJfY3JlYXRlVHJhaWwiLCJfY3JlYXRlUGF0aCIsInBhdGhTdHJpbmciLCJfY3JlYXRlUGF0aEVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwidGV4dFN0eWxlIiwiaGVpZ2h0IiwiZmxvYXRFcXVhbHMiLCJjb25zb2xlIiwid2FybiIsImlkIiwiX3RyYWlsVGVtcGxhdGUiLCJ3IiwiaGFsZk9mU3Ryb2tlV2lkdGgiLCJzdGFydE1hcmdpbiIsIlBSRUZJWEVTIiwic3BsaXQiLCJlbFN0eWxlIiwiaSIsImNhcGl0YWxpemUiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwib2JqIiwiT2JqZWN0IiwidG9TdHJpbmciLCJjYWxsIiwiaXNBcnJheSIsImZvckVhY2hPYmplY3QiLCJvYmplY3QiLCJjYWxsYmFjayIsImtleSIsImRlc3RpbmF0aW9uIiwic291cmNlIiwicmVjdXJzaXZlIiwiYXR0ck5hbWUiLCJkZXN0VmFsIiwic291cmNlVmFsIiwidGVtcGxhdGUiLCJ2YXJzIiwicmVuZGVyZWQiLCJ2YWwiLCJyZWdFeHAiLCJSZWdFeHAiLCJyZXBsYWNlIiwic3R5bGVzIiwic3R5bGVWYWx1ZSIsInN0eWxlTmFtZSIsIlN0cmluZyIsImEiLCJiIiwiTWF0aCIsImFicyIsImVsIiwiZmlyc3RDaGlsZCIsInQiLCJuIiwiZSIsImQiLCJTY2VuZSIsInRuIiwiZ3QiLCJIdCIsInByb2Nlc3NUd2VlbnMiLCJmdCIsInNldEJlemllckZ1bmN0aW9uIiwibm4iLCJzaG91bGRTY2hlZHVsZVVwZGF0ZSIsInB0IiwibXQiLCJ1bnNldEJlemllckZ1bmN0aW9uIiwiZW4iLCJib3VuY2UiLCJEIiwiYm91bmNlUGFzdCIsInEiLCJlYXNlRnJvbSIsIkIiLCJlYXNlRnJvbVRvIiwiUSIsImVhc2VJbkJhY2siLCJFIiwiZWFzZUluQ2lyYyIsImoiLCJlYXNlSW5DdWJpYyIsImMiLCJlYXNlSW5FeHBvIiwiZWFzZUluT3V0QmFjayIsIkYiLCJlYXNlSW5PdXRDaXJjIiwiUCIsImVhc2VJbk91dEN1YmljIiwibCIsImVhc2VJbk91dEV4cG8iLCJTIiwiZWFzZUluT3V0UXVhZCIsInMiLCJlYXNlSW5PdXRRdWFydCIsInYiLCJlYXNlSW5PdXRRdWludCIsImVhc2VJbk91dFNpbmUiLCJlYXNlSW5RdWFkIiwibyIsImVhc2VJblF1YXJ0IiwiaCIsImVhc2VJblF1aW50IiwiXyIsImVhc2VJblNpbmUiLCJnIiwiZWFzZU91dEJhY2siLCJUIiwiZWFzZU91dEJvdW5jZSIsIk0iLCJlYXNlT3V0Q2lyYyIsImsiLCJlYXNlT3V0Q3ViaWMiLCJmIiwiZWFzZU91dEV4cG8iLCJPIiwiZWFzZU91dFF1YWQiLCJlYXNlT3V0UXVhcnQiLCJwIiwiZWFzZU91dFF1aW50IiwieSIsImVhc2VPdXRTaW5lIiwibSIsImVhc2VUbyIsIk4iLCJlbGFzdGljIiwiSSIsImxpbmVhciIsInUiLCJzd2luZ0Zyb20iLCJBIiwic3dpbmdGcm9tVG8iLCJ4Iiwic3dpbmdUbyIsIkMiLCJhZnRlclR3ZWVuIiwiVXQiLCJiZWZvcmVUd2VlbiIsInp0IiwiZG9lc0FwcGx5IiwiTnQiLCJ0d2VlbkNyZWF0ZWQiLCJSdCIsInBvdyIsImNvcyIsIlBJIiwic2luIiwic3FydCIsIlIiLCJUeXBlRXJyb3IiLCJVIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJMIiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiViIsImZvckVhY2giLCJXIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiJCIsIkciLCJIIiwiSiIsIksiLCJYIiwiWSIsIloiLCJ0dCIsIm50IiwiZXQiLCJydCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtc1JlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1vekNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1velJlcXVlc3RBbmltYXRpb25GcmFtZSIsInNldFRpbWVvdXQiLCJpdCIsInV0Iiwib3QiLCJhdCIsInN0IiwiY3QiLCJfdGltZXN0YW1wIiwiX2N1cnJlbnRTdGF0ZSIsIl9kZWxheSIsIl9kdXJhdGlvbiIsIl90YXJnZXRTdGF0ZSIsIl9oYXNFbmRlZCIsIl9maWx0ZXJzIiwiX3JlbmRlciIsIl9kYXRhIiwiX2FwcGx5RmlsdGVyIiwiX29yaWdpbmFsU3RhdGUiLCJub3ciLCJfbmV4dCIsImx0IiwiRGF0ZSIsImh0IiwidnQiLCJfdCIsInl0IiwiX3ByZXZpb3VzIiwiZHQiLCJQcm9taXNlIiwiX2NvbmZpZyIsIl9yZXNvbHZlIiwiX3JlamVjdCIsIl9zdGFydCIsIl9wcm9taXNlQ3RvciIsInNldENvbmZpZyIsIl9pc1BsYXlpbmciLCJfcGF1c2VkQXRUaW1lIiwiZ2V0IiwiX3Jlc3VtZSIsInByb21pc2UiLCJzdGFydCIsImZpbmlzaCIsImRhdGEiLCJfc2NoZWR1bGVJZCIsImZpbHRlcnMiLCJfcHJvbWlzZSIsImNhdGNoIiwibWF4IiwidHdlZW5hYmxlIiwic2V0U2NoZWR1bGVGdW5jdGlvbiIsInoiLCJ3dCIsImJ0IiwiT3QiLCJTdCIsImp0Iiwia3QiLCJjb25jYXQiLCJQdCIsIk10IiwiRXQiLCJUdCIsIm1hcCIsIkZ0IiwicGFyc2VJbnQiLCJJdCIsInN1YnN0ciIsImpvaW4iLCJ4dCIsIm1hdGNoIiwiQXQiLCJDdCIsImZsb29yIiwiRHQiLCJxdCIsIlF0IiwiQnQiLCJfdG9rZW5EYXRhIiwiZm9ybWF0U3RyaW5nIiwidW5zaGlmdCIsImNodW5rTmFtZXMiLCJMdCIsIlZ0IiwiV3QiLCIkdCIsIkd0IiwiSnQiLCJBcnJheSIsIkt0IiwiWXQiLCJadCIsIldlYWtNYXAiLCJhZGQiLCJiaW5kIiwiaW5kZXhPZiIsInNwbGljZSIsInR3ZWVuYWJsZXMiLCJyZW1vdmUiLCJzb21lIiwiaXNQbGF5aW5nIiwibmFtZSIsInRlc3QiLCJYdCIsImRpc3BsYXlOYW1lIiwieDEiLCJ5MSIsIngyIiwieTIiLCJmb3JtdWxhcyIsInRva2VuIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwidG9TdHJpbmdUYWciLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZXh0ZW5kU3RhdGljcyIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX19leHRlbmRzIiwiX18iLCJjcmVhdGUiLCJfX2Fzc2lnbiIsImFzc2lnbiIsIl9fZ2VuZXJhdG9yIiwidGhpc0FyZyIsImJvZHkiLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwibmV4dCIsInZlcmIiLCJvcCIsImRvbmUiLCJwb3AiLCJfX3ZhbHVlcyIsIl9fcmVhZCIsImFyIiwiZXJyb3IiLCJfX3NwcmVhZEFycmF5IiwicGFjayIsIl9fYXdhaXQiLCJfX2FzeW5jR2VuZXJhdG9yIiwiX2FyZ3VtZW50cyIsImdlbmVyYXRvciIsImFzeW5jSXRlcmF0b3IiLCJyZXNvbHZlIiwiZnVsZmlsbCIsInJlamVjdCIsInNldHRsZSIsInNoaWZ0IiwiY3RvckZ1bmMiLCJVbnN1YnNjcmlwdGlvbkVycm9yIiwiX3N1cGVyIiwiZXJyb3JzIiwibWVzc2FnZSIsImVyciIsImNyZWF0ZUltcGwiLCJpbnN0YW5jZSIsInN0YWNrIiwiYXJyUmVtb3ZlIiwiYXJyIiwiaXRlbSIsImluZGV4IiwiU3Vic2NyaXB0aW9uIiwiaW5pdGlhbFRlYXJkb3duIiwiY2xvc2VkIiwiX3BhcmVudGFnZSIsIl9maW5hbGl6ZXJzIiwidW5zdWJzY3JpYmUiLCJlXzEiLCJfYSIsImVfMiIsIl9iIiwiX3BhcmVudGFnZV8xIiwiX3BhcmVudGFnZV8xXzEiLCJlXzFfMSIsInJldHVybiIsImluaXRpYWxGaW5hbGl6ZXIiLCJfZmluYWxpemVyc18xIiwiX2ZpbmFsaXplcnNfMV8xIiwiZmluYWxpemVyIiwiZXhlY0ZpbmFsaXplciIsImVfMl8xIiwidGVhcmRvd24iLCJfaGFzUGFyZW50IiwiX2FkZFBhcmVudCIsInBhcmVudCIsImluY2x1ZGVzIiwiX3JlbW92ZVBhcmVudCIsIkVNUFRZIiwiZW1wdHkiLCJpc1N1YnNjcmlwdGlvbiIsImNvbmZpZyIsInRpbWVvdXRQcm92aWRlciIsImhhbmRsZXIiLCJ0aW1lb3V0IiwiYXJncyIsIl9pIiwiZGVsZWdhdGUiLCJjbGVhclRpbWVvdXQiLCJoYW5kbGUiLCJyZXBvcnRVbmhhbmRsZWRFcnJvciIsIm5vb3AiLCJDT01QTEVURV9OT1RJRklDQVRJT04iLCJjcmVhdGVOb3RpZmljYXRpb24iLCJraW5kIiwiY29udGV4dCIsIlN1YnNjcmliZXIiLCJfdGhpcyIsImlzU3RvcHBlZCIsIkVNUFRZX09CU0VSVkVSIiwiY29tcGxldGUiLCJTYWZlU3Vic2NyaWJlciIsImhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24iLCJuZXh0Tm90aWZpY2F0aW9uIiwiX2Vycm9yIiwiX2NvbXBsZXRlIiwiX2JpbmQiLCJmbiIsIkNvbnN1bWVyT2JzZXJ2ZXIiLCJwYXJ0aWFsT2JzZXJ2ZXIiLCJoYW5kbGVVbmhhbmRsZWRFcnJvciIsIm9ic2VydmVyT3JOZXh0IiwiY29udGV4dF8xIiwiZXJyb3JUaHJvd24iLCJub3RpZmljYXRpb24iLCJzdWJzY3JpYmVyIiwib25TdG9wcGVkTm90aWZpY2F0aW9uIiwib2JzZXJ2YWJsZSIsImlkZW50aXR5IiwicGlwZUZyb21BcnJheSIsImZucyIsImlucHV0IiwicmVkdWNlIiwicHJldiIsIk9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJfc3Vic2NyaWJlIiwibGlmdCIsIm9wZXJhdG9yIiwiaXNPYnNlcnZlciIsImlzUm9vdCIsImVycm9yQ29udGV4dCIsIl90cnlTdWJzY3JpYmUiLCJzaW5rIiwicHJvbWlzZUN0b3IiLCJnZXRQcm9taXNlQ3RvciIsInBpcGUiLCJvcGVyYXRpb25zIiwidG9Qcm9taXNlIiwiQWN0aW9uIiwic2NoZWR1bGVyIiwid29yayIsInNjaGVkdWxlIiwiaW50ZXJ2YWxQcm92aWRlciIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIkFzeW5jQWN0aW9uIiwicGVuZGluZyIsInJlY3ljbGVBc3luY0lkIiwicmVxdWVzdEFzeW5jSWQiLCJfaWQiLCJmbHVzaCIsIl9zY2hlZHVsZXIiLCJleGVjdXRlIiwiX2V4ZWN1dGUiLCJlcnJvclZhbHVlIiwiZXJyb3JlZCIsImFjdGlvbnMiLCJkYXRlVGltZXN0YW1wUHJvdmlkZXIiLCJTY2hlZHVsZXIiLCJzY2hlZHVsZXJBY3Rpb25DdG9yIiwiYXN5bmNTY2hlZHVsZXIiLCJBc3luY1NjaGVkdWxlciIsIlNjaGVkdWxlckFjdGlvbiIsIl9hY3RpdmUiLCJfc2NoZWR1bGVkIiwiYWN0aW9uIiwiaXNTY2hlZHVsZXIiLCJ0aW1lciIsImR1ZVRpbWUiLCJpbnRlcnZhbE9yU2NoZWR1bGVyIiwiaW50ZXJ2YWxEdXJhdGlvbiIsImR1ZSIsImlzTmFOIiwib3BlcmF0ZSIsImluaXQiLCJoYXNMaWZ0IiwibGlmdGVkU291cmNlIiwiY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIiwib25OZXh0Iiwib25Db21wbGV0ZSIsIm9uRXJyb3IiLCJvbkZpbmFsaXplIiwiT3BlcmF0b3JTdWJzY3JpYmVyIiwic2hvdWxkVW5zdWJzY3JpYmUiLCJjbG9zZWRfMSIsInRhcCIsInRhcE9ic2VydmVyIiwiaXNVbnN1YiIsImZpbmFsaXplIiwicHJvamVjdCIsImlzQXJyYXlMaWtlIiwiaXNQcm9taXNlIiwiaXNJbnRlcm9wT2JzZXJ2YWJsZSIsImlzQXN5bmNJdGVyYWJsZSIsImNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yIiwiaXNJdGVyYWJsZSIsInJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IiLCJyZWFkYWJsZVN0cmVhbSIsInJlYWRlciIsImdldFJlYWRlciIsInJlYWQiLCJyZWxlYXNlTG9jayIsImlzUmVhZGFibGVTdHJlYW1MaWtlIiwiaW5uZXJGcm9tIiwib2JzIiwiYXJyYXkiLCJmcm9tQXN5bmNJdGVyYWJsZSIsIml0ZXJhYmxlIiwiaXRlcmFibGVfMSIsIml0ZXJhYmxlXzFfMSIsImFzeW5jSXRlcmFibGUiLCJhc3luY0l0ZXJhYmxlXzEiLCJhc3luY0l0ZXJhYmxlXzFfMSIsIl9fYXN5bmNWYWx1ZXMiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInJlc3VsdCIsInByb2Nlc3MiLCJleGVjdXRlU2NoZWR1bGUiLCJwYXJlbnRTdWJzY3JpcHRpb24iLCJyZXBlYXQiLCJzY2hlZHVsZVN1YnNjcmlwdGlvbiIsIm1lcmdlTWFwIiwicmVzdWx0U2VsZWN0b3IiLCJjb25jdXJyZW50IiwiSW5maW5pdHkiLCJpaSIsIm9uQmVmb3JlTmV4dCIsImV4cGFuZCIsImlubmVyU3ViU2NoZWR1bGVyIiwiYWRkaXRpb25hbEZpbmFsaXplciIsImJ1ZmZlciIsImFjdGl2ZSIsImlzQ29tcGxldGUiLCJjaGVja0NvbXBsZXRlIiwib3V0ZXJOZXh0IiwiZG9Jbm5lclN1YiIsImlubmVyQ29tcGxldGUiLCJpbm5lclZhbHVlIiwiYnVmZmVyZWRWYWx1ZSIsIm1lcmdlSW50ZXJuYWxzIiwiY29uY2F0QWxsIiwicG9wU2NoZWR1bGVyIiwib2JzZXJ2ZU9uIiwic3Vic2NyaWJlT24iLCJzY2hlZHVsZUFzeW5jSXRlcmFibGUiLCJzY2hlZHVsZU9ic2VydmFibGUiLCJzY2hlZHVsZUFycmF5Iiwic2NoZWR1bGVQcm9taXNlIiwic2NoZWR1bGVJdGVyYWJsZSIsInNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlIiwic2NoZWR1bGVkIiwidGFrZSIsImNvdW50Iiwic2VlbiIsImRlbGF5V2hlbiIsImRlbGF5RHVyYXRpb25TZWxlY3RvciIsInN1YnNjcmlwdGlvbkRlbGF5IiwibWFwVG8iLCJuaWNrTmFtZSIsInBydmFJZ3JhVGltZXIiLCJkcnVnYUlncmFTa29yIiwidHJlY2FJZ3JhU2tvciIsImRhdHVtIiwia29yaXNuaWsiLCJwcmlrYXppU2tvclRhYmVsdSIsImxldmlEZW9TdHJhbmUiLCJkZXNuaURlb1N0cmFuZSIsInZyZW1lUHJ2ZUlncmUiLCJza29yVHJlY2VJZ3JlIiwiS29yaXNuaWsiLCJ0b0xvY2FsZVN0cmluZyIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsIkpTT04iLCJzdHJpbmdpZnkiLCJqc29uIiwidXBpc2lVQmF6dSIsImxvZyIsImtvcmlzbmljaSIsImluaXRXaXRoU2VsZWN0b3IiLCJzZWxlY3RvciIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX19yZXN0IiwiY29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlciIsInNpZ25hbCIsImFib3J0YWJsZSIsIm91dGVyU2lnbmFsIiwiYWJvcnRlZCIsImFib3J0Iiwib3V0ZXJTaWduYWxIYW5kbGVyXzEiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInBlclN1YnNjcmliZXJJbml0IiwiaGFuZGxlRXJyb3IiLCJyZXNwb25zZSIsImZyb21GZXRjaCIsIm9rIiwiaW5uZXJTdWJzY3JpYmVyIiwiaXRlbXMiLCJuYXByYXZpVGFiZWx1Iiwibml6S29yaXNuaWthIiwic29ydCIsIm9waXNUYWJlbGUiLCJmb250U2l6ZSIsIm1hcmdpbkJvdHRvbSIsInRhYmVsYSIsInRhYmVsYVJlZFphZ2xhdmxqZSIsInRhYmVsYVphZ2xhdmxqZU5pY2siLCJ0YWJlbGFaYWdsYXZsamVUaW1lciIsInRhYmVsYVphZ2xhdmxqZVNrb3IyIiwidGFiZWxhWmFnbGF2bGplU2tvcjMiLCJ0YWJlbGFaYWdsYXZsamVEYXR1bSIsImtvciIsInRhYmVsYVJlZCIsIm5pY2tQb2RhdGFrIiwidnJlbWUiLCJtaW51dGkiLCJzZWt1bmRlIiwibWlsaXNla3VuZGUiLCJ0aW1lclBvZGF0YWsiLCJkcnVnYUlncmFTa29yUG9kYXRhayIsInRyZWNhSWdyYVNrb3JQb2RhdGFrIiwiZGF0dW1Qb2RhdGFrIiwicG9rcmVuaVRyZWN1SWdydSIsInppdm90aSIsImJyb2oiLCJ0cmVudXRub0Jyb2pldmEiLCJwcm9tZW5qZW4iLCJkaXZUcmVjYUlncmEiLCJwcmlrYXpCcm9qYSIsInByb2dyZXNzQmFyRGl2IiwidW5vc0Jyb2pldmEiLCJkaXNhYmxlZCIsInR5cGUiLCJicm9qWml2b3RhIiwic3JjZTEiLCJzcmMiLCJzcmNlMiIsInNyY2UzIiwicHJpa2F6U2tvcmEiLCJwZXJpb2QiLCJ0aW1lclBvY2V0a2EiLCJ0aW1lclRyZWNlSWdyZSIsIm9icmlzaVNyY2UiLCJiYXIiLCJyYW5kb20iLCJuYXB1bmlOaXoiLCJmb2N1cyIsInNyY2VaYUJyaXNhbmplIiwiZ2V0RWxlbWVudEJ5SWQiLCJQcm9ncmVzc0JhciIsImNlbGFTdHJhbmEiLCJwb2NldG5pUHJpa2F6Iiwibmlja0RpdiIsImlncmljZU9waXMiLCJwcmlrYXppRGl2T3Bpc2EiLCJvbmNsaWNrIiwibGFiZWxhTmlja05hbWUiLCJtYXJnaW5SaWdodCIsIm5pY2tOYW1lSW5wdXQiLCJwbGFjZWhvbGRlciIsImxldHRlclNwYWNpbmciLCJvcGlzUHJ2ZUlncmUiLCJvcGlzRHJ1Z2VJZ3JlIiwib3Bpc1RyZWNlSWdyZSIsIm9waXNJZ2FyYSIsImJ1dHRvblBva3JlbmlJZ3JlIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwiY2xpY2siLCJwb2NldGFrIl0sInNvdXJjZVJvb3QiOiIifQ==